/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fiberhome.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-20")
public class NE implements org.apache.thrift.TBase<NE, NE._Fields>, java.io.Serializable, Cloneable, Comparable<NE> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NE");

  private static final org.apache.thrift.protocol.TField NE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("NeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PJT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("PjtId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("PartId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PART_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("PartName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MANAGER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ManagerId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PART_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("PartType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("NeName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LOCATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("LocationName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField NE_TYPE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("NeTypeNo", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField NE_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("NeTypeName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField EMUTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("EMUType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField PART_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("PartNo", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField NE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("NeNo", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField NE_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("NeIp", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField NE_SWITCH1_FIELD_DESC = new org.apache.thrift.protocol.TField("NeSwitch1", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField NE_SWITCH2_FIELD_DESC = new org.apache.thrift.protocol.TField("NeSwitch2", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField MANAGER_A_FIELD_DESC = new org.apache.thrift.protocol.TField("ManagerA", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField MANAGER_B_FIELD_DESC = new org.apache.thrift.protocol.TField("ManagerB", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("CreateTime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField LOGIN_DOMAIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("LoginDomainId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField LOGIN_DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("LoginDomainName", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField PJT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("PjtName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField BASIC_DOMAIN_MASK_FIELD_DESC = new org.apache.thrift.protocol.TField("BasicDomainMask", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField BASIC_DOMAINID_FIELD_DESC = new org.apache.thrift.protocol.TField("BasicDomainid", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField BASIC_DOMAIN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("BasicDomainType", org.apache.thrift.protocol.TType.STRING, (short)25);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NEStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NETupleSchemeFactory();

  public int NeId; // required
  public int PjtId; // required
  public int PartId; // required
  public java.lang.String PartName; // required
  public int ManagerId; // required
  public int PartType; // required
  public java.lang.String NeName; // required
  public java.lang.String LocationName; // required
  public int NeTypeNo; // required
  public java.lang.String NeTypeName; // required
  public int EMUType; // required
  public int PartNo; // required
  public int NeNo; // required
  public java.lang.String NeIp; // required
  public int NeSwitch1; // required
  public int NeSwitch2; // required
  public int ManagerA; // required
  public int ManagerB; // required
  public java.lang.String CreateTime; // required
  public int LoginDomainId; // required
  public java.lang.String LoginDomainName; // required
  public java.lang.String PjtName; // required
  public java.lang.String BasicDomainMask; // required
  public java.lang.String BasicDomainid; // required
  public java.lang.String BasicDomainType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NE_ID((short)1, "NeId"),
    PJT_ID((short)2, "PjtId"),
    PART_ID((short)3, "PartId"),
    PART_NAME((short)4, "PartName"),
    MANAGER_ID((short)5, "ManagerId"),
    PART_TYPE((short)6, "PartType"),
    NE_NAME((short)7, "NeName"),
    LOCATION_NAME((short)8, "LocationName"),
    NE_TYPE_NO((short)9, "NeTypeNo"),
    NE_TYPE_NAME((short)10, "NeTypeName"),
    EMUTYPE((short)11, "EMUType"),
    PART_NO((short)12, "PartNo"),
    NE_NO((short)13, "NeNo"),
    NE_IP((short)14, "NeIp"),
    NE_SWITCH1((short)15, "NeSwitch1"),
    NE_SWITCH2((short)16, "NeSwitch2"),
    MANAGER_A((short)17, "ManagerA"),
    MANAGER_B((short)18, "ManagerB"),
    CREATE_TIME((short)19, "CreateTime"),
    LOGIN_DOMAIN_ID((short)20, "LoginDomainId"),
    LOGIN_DOMAIN_NAME((short)21, "LoginDomainName"),
    PJT_NAME((short)22, "PjtName"),
    BASIC_DOMAIN_MASK((short)23, "BasicDomainMask"),
    BASIC_DOMAINID((short)24, "BasicDomainid"),
    BASIC_DOMAIN_TYPE((short)25, "BasicDomainType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NE_ID
          return NE_ID;
        case 2: // PJT_ID
          return PJT_ID;
        case 3: // PART_ID
          return PART_ID;
        case 4: // PART_NAME
          return PART_NAME;
        case 5: // MANAGER_ID
          return MANAGER_ID;
        case 6: // PART_TYPE
          return PART_TYPE;
        case 7: // NE_NAME
          return NE_NAME;
        case 8: // LOCATION_NAME
          return LOCATION_NAME;
        case 9: // NE_TYPE_NO
          return NE_TYPE_NO;
        case 10: // NE_TYPE_NAME
          return NE_TYPE_NAME;
        case 11: // EMUTYPE
          return EMUTYPE;
        case 12: // PART_NO
          return PART_NO;
        case 13: // NE_NO
          return NE_NO;
        case 14: // NE_IP
          return NE_IP;
        case 15: // NE_SWITCH1
          return NE_SWITCH1;
        case 16: // NE_SWITCH2
          return NE_SWITCH2;
        case 17: // MANAGER_A
          return MANAGER_A;
        case 18: // MANAGER_B
          return MANAGER_B;
        case 19: // CREATE_TIME
          return CREATE_TIME;
        case 20: // LOGIN_DOMAIN_ID
          return LOGIN_DOMAIN_ID;
        case 21: // LOGIN_DOMAIN_NAME
          return LOGIN_DOMAIN_NAME;
        case 22: // PJT_NAME
          return PJT_NAME;
        case 23: // BASIC_DOMAIN_MASK
          return BASIC_DOMAIN_MASK;
        case 24: // BASIC_DOMAINID
          return BASIC_DOMAINID;
        case 25: // BASIC_DOMAIN_TYPE
          return BASIC_DOMAIN_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEID_ISSET_ID = 0;
  private static final int __PJTID_ISSET_ID = 1;
  private static final int __PARTID_ISSET_ID = 2;
  private static final int __MANAGERID_ISSET_ID = 3;
  private static final int __PARTTYPE_ISSET_ID = 4;
  private static final int __NETYPENO_ISSET_ID = 5;
  private static final int __EMUTYPE_ISSET_ID = 6;
  private static final int __PARTNO_ISSET_ID = 7;
  private static final int __NENO_ISSET_ID = 8;
  private static final int __NESWITCH1_ISSET_ID = 9;
  private static final int __NESWITCH2_ISSET_ID = 10;
  private static final int __MANAGERA_ISSET_ID = 11;
  private static final int __MANAGERB_ISSET_ID = 12;
  private static final int __LOGINDOMAINID_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NE_ID, new org.apache.thrift.meta_data.FieldMetaData("NeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PJT_ID, new org.apache.thrift.meta_data.FieldMetaData("PjtId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PART_ID, new org.apache.thrift.meta_data.FieldMetaData("PartId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PART_NAME, new org.apache.thrift.meta_data.FieldMetaData("PartName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MANAGER_ID, new org.apache.thrift.meta_data.FieldMetaData("ManagerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PART_TYPE, new org.apache.thrift.meta_data.FieldMetaData("PartType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NE_NAME, new org.apache.thrift.meta_data.FieldMetaData("NeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("LocationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NE_TYPE_NO, new org.apache.thrift.meta_data.FieldMetaData("NeTypeNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NE_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("NeTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMUTYPE, new org.apache.thrift.meta_data.FieldMetaData("EMUType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PART_NO, new org.apache.thrift.meta_data.FieldMetaData("PartNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NE_NO, new org.apache.thrift.meta_data.FieldMetaData("NeNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NE_IP, new org.apache.thrift.meta_data.FieldMetaData("NeIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NE_SWITCH1, new org.apache.thrift.meta_data.FieldMetaData("NeSwitch1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NE_SWITCH2, new org.apache.thrift.meta_data.FieldMetaData("NeSwitch2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MANAGER_A, new org.apache.thrift.meta_data.FieldMetaData("ManagerA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MANAGER_B, new org.apache.thrift.meta_data.FieldMetaData("ManagerB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("CreateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_DOMAIN_ID, new org.apache.thrift.meta_data.FieldMetaData("LoginDomainId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOGIN_DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("LoginDomainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PJT_NAME, new org.apache.thrift.meta_data.FieldMetaData("PjtName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BASIC_DOMAIN_MASK, new org.apache.thrift.meta_data.FieldMetaData("BasicDomainMask", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BASIC_DOMAINID, new org.apache.thrift.meta_data.FieldMetaData("BasicDomainid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BASIC_DOMAIN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("BasicDomainType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NE.class, metaDataMap);
  }

  public NE() {
  }

  public NE(
    int NeId,
    int PjtId,
    int PartId,
    java.lang.String PartName,
    int ManagerId,
    int PartType,
    java.lang.String NeName,
    java.lang.String LocationName,
    int NeTypeNo,
    java.lang.String NeTypeName,
    int EMUType,
    int PartNo,
    int NeNo,
    java.lang.String NeIp,
    int NeSwitch1,
    int NeSwitch2,
    int ManagerA,
    int ManagerB,
    java.lang.String CreateTime,
    int LoginDomainId,
    java.lang.String LoginDomainName,
    java.lang.String PjtName,
    java.lang.String BasicDomainMask,
    java.lang.String BasicDomainid,
    java.lang.String BasicDomainType)
  {
    this();
    this.NeId = NeId;
    setNeIdIsSet(true);
    this.PjtId = PjtId;
    setPjtIdIsSet(true);
    this.PartId = PartId;
    setPartIdIsSet(true);
    this.PartName = PartName;
    this.ManagerId = ManagerId;
    setManagerIdIsSet(true);
    this.PartType = PartType;
    setPartTypeIsSet(true);
    this.NeName = NeName;
    this.LocationName = LocationName;
    this.NeTypeNo = NeTypeNo;
    setNeTypeNoIsSet(true);
    this.NeTypeName = NeTypeName;
    this.EMUType = EMUType;
    setEMUTypeIsSet(true);
    this.PartNo = PartNo;
    setPartNoIsSet(true);
    this.NeNo = NeNo;
    setNeNoIsSet(true);
    this.NeIp = NeIp;
    this.NeSwitch1 = NeSwitch1;
    setNeSwitch1IsSet(true);
    this.NeSwitch2 = NeSwitch2;
    setNeSwitch2IsSet(true);
    this.ManagerA = ManagerA;
    setManagerAIsSet(true);
    this.ManagerB = ManagerB;
    setManagerBIsSet(true);
    this.CreateTime = CreateTime;
    this.LoginDomainId = LoginDomainId;
    setLoginDomainIdIsSet(true);
    this.LoginDomainName = LoginDomainName;
    this.PjtName = PjtName;
    this.BasicDomainMask = BasicDomainMask;
    this.BasicDomainid = BasicDomainid;
    this.BasicDomainType = BasicDomainType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NE(NE other) {
    __isset_bitfield = other.__isset_bitfield;
    this.NeId = other.NeId;
    this.PjtId = other.PjtId;
    this.PartId = other.PartId;
    if (other.isSetPartName()) {
      this.PartName = other.PartName;
    }
    this.ManagerId = other.ManagerId;
    this.PartType = other.PartType;
    if (other.isSetNeName()) {
      this.NeName = other.NeName;
    }
    if (other.isSetLocationName()) {
      this.LocationName = other.LocationName;
    }
    this.NeTypeNo = other.NeTypeNo;
    if (other.isSetNeTypeName()) {
      this.NeTypeName = other.NeTypeName;
    }
    this.EMUType = other.EMUType;
    this.PartNo = other.PartNo;
    this.NeNo = other.NeNo;
    if (other.isSetNeIp()) {
      this.NeIp = other.NeIp;
    }
    this.NeSwitch1 = other.NeSwitch1;
    this.NeSwitch2 = other.NeSwitch2;
    this.ManagerA = other.ManagerA;
    this.ManagerB = other.ManagerB;
    if (other.isSetCreateTime()) {
      this.CreateTime = other.CreateTime;
    }
    this.LoginDomainId = other.LoginDomainId;
    if (other.isSetLoginDomainName()) {
      this.LoginDomainName = other.LoginDomainName;
    }
    if (other.isSetPjtName()) {
      this.PjtName = other.PjtName;
    }
    if (other.isSetBasicDomainMask()) {
      this.BasicDomainMask = other.BasicDomainMask;
    }
    if (other.isSetBasicDomainid()) {
      this.BasicDomainid = other.BasicDomainid;
    }
    if (other.isSetBasicDomainType()) {
      this.BasicDomainType = other.BasicDomainType;
    }
  }

  public NE deepCopy() {
    return new NE(this);
  }

  @Override
  public void clear() {
    setNeIdIsSet(false);
    this.NeId = 0;
    setPjtIdIsSet(false);
    this.PjtId = 0;
    setPartIdIsSet(false);
    this.PartId = 0;
    this.PartName = null;
    setManagerIdIsSet(false);
    this.ManagerId = 0;
    setPartTypeIsSet(false);
    this.PartType = 0;
    this.NeName = null;
    this.LocationName = null;
    setNeTypeNoIsSet(false);
    this.NeTypeNo = 0;
    this.NeTypeName = null;
    setEMUTypeIsSet(false);
    this.EMUType = 0;
    setPartNoIsSet(false);
    this.PartNo = 0;
    setNeNoIsSet(false);
    this.NeNo = 0;
    this.NeIp = null;
    setNeSwitch1IsSet(false);
    this.NeSwitch1 = 0;
    setNeSwitch2IsSet(false);
    this.NeSwitch2 = 0;
    setManagerAIsSet(false);
    this.ManagerA = 0;
    setManagerBIsSet(false);
    this.ManagerB = 0;
    this.CreateTime = null;
    setLoginDomainIdIsSet(false);
    this.LoginDomainId = 0;
    this.LoginDomainName = null;
    this.PjtName = null;
    this.BasicDomainMask = null;
    this.BasicDomainid = null;
    this.BasicDomainType = null;
  }

  public int getNeId() {
    return this.NeId;
  }

  public NE setNeId(int NeId) {
    this.NeId = NeId;
    setNeIdIsSet(true);
    return this;
  }

  public void unsetNeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEID_ISSET_ID);
  }

  /** Returns true if field NeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEID_ISSET_ID);
  }

  public void setNeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEID_ISSET_ID, value);
  }

  public int getPjtId() {
    return this.PjtId;
  }

  public NE setPjtId(int PjtId) {
    this.PjtId = PjtId;
    setPjtIdIsSet(true);
    return this;
  }

  public void unsetPjtId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PJTID_ISSET_ID);
  }

  /** Returns true if field PjtId is set (has been assigned a value) and false otherwise */
  public boolean isSetPjtId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PJTID_ISSET_ID);
  }

  public void setPjtIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PJTID_ISSET_ID, value);
  }

  public int getPartId() {
    return this.PartId;
  }

  public NE setPartId(int PartId) {
    this.PartId = PartId;
    setPartIdIsSet(true);
    return this;
  }

  public void unsetPartId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTID_ISSET_ID);
  }

  /** Returns true if field PartId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTID_ISSET_ID);
  }

  public void setPartIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTID_ISSET_ID, value);
  }

  public java.lang.String getPartName() {
    return this.PartName;
  }

  public NE setPartName(java.lang.String PartName) {
    this.PartName = PartName;
    return this;
  }

  public void unsetPartName() {
    this.PartName = null;
  }

  /** Returns true if field PartName is set (has been assigned a value) and false otherwise */
  public boolean isSetPartName() {
    return this.PartName != null;
  }

  public void setPartNameIsSet(boolean value) {
    if (!value) {
      this.PartName = null;
    }
  }

  public int getManagerId() {
    return this.ManagerId;
  }

  public NE setManagerId(int ManagerId) {
    this.ManagerId = ManagerId;
    setManagerIdIsSet(true);
    return this;
  }

  public void unsetManagerId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MANAGERID_ISSET_ID);
  }

  /** Returns true if field ManagerId is set (has been assigned a value) and false otherwise */
  public boolean isSetManagerId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MANAGERID_ISSET_ID);
  }

  public void setManagerIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MANAGERID_ISSET_ID, value);
  }

  public int getPartType() {
    return this.PartType;
  }

  public NE setPartType(int PartType) {
    this.PartType = PartType;
    setPartTypeIsSet(true);
    return this;
  }

  public void unsetPartType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTTYPE_ISSET_ID);
  }

  /** Returns true if field PartType is set (has been assigned a value) and false otherwise */
  public boolean isSetPartType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTTYPE_ISSET_ID);
  }

  public void setPartTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTTYPE_ISSET_ID, value);
  }

  public java.lang.String getNeName() {
    return this.NeName;
  }

  public NE setNeName(java.lang.String NeName) {
    this.NeName = NeName;
    return this;
  }

  public void unsetNeName() {
    this.NeName = null;
  }

  /** Returns true if field NeName is set (has been assigned a value) and false otherwise */
  public boolean isSetNeName() {
    return this.NeName != null;
  }

  public void setNeNameIsSet(boolean value) {
    if (!value) {
      this.NeName = null;
    }
  }

  public java.lang.String getLocationName() {
    return this.LocationName;
  }

  public NE setLocationName(java.lang.String LocationName) {
    this.LocationName = LocationName;
    return this;
  }

  public void unsetLocationName() {
    this.LocationName = null;
  }

  /** Returns true if field LocationName is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationName() {
    return this.LocationName != null;
  }

  public void setLocationNameIsSet(boolean value) {
    if (!value) {
      this.LocationName = null;
    }
  }

  public int getNeTypeNo() {
    return this.NeTypeNo;
  }

  public NE setNeTypeNo(int NeTypeNo) {
    this.NeTypeNo = NeTypeNo;
    setNeTypeNoIsSet(true);
    return this;
  }

  public void unsetNeTypeNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NETYPENO_ISSET_ID);
  }

  /** Returns true if field NeTypeNo is set (has been assigned a value) and false otherwise */
  public boolean isSetNeTypeNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NETYPENO_ISSET_ID);
  }

  public void setNeTypeNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NETYPENO_ISSET_ID, value);
  }

  public java.lang.String getNeTypeName() {
    return this.NeTypeName;
  }

  public NE setNeTypeName(java.lang.String NeTypeName) {
    this.NeTypeName = NeTypeName;
    return this;
  }

  public void unsetNeTypeName() {
    this.NeTypeName = null;
  }

  /** Returns true if field NeTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetNeTypeName() {
    return this.NeTypeName != null;
  }

  public void setNeTypeNameIsSet(boolean value) {
    if (!value) {
      this.NeTypeName = null;
    }
  }

  public int getEMUType() {
    return this.EMUType;
  }

  public NE setEMUType(int EMUType) {
    this.EMUType = EMUType;
    setEMUTypeIsSet(true);
    return this;
  }

  public void unsetEMUType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMUTYPE_ISSET_ID);
  }

  /** Returns true if field EMUType is set (has been assigned a value) and false otherwise */
  public boolean isSetEMUType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMUTYPE_ISSET_ID);
  }

  public void setEMUTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMUTYPE_ISSET_ID, value);
  }

  public int getPartNo() {
    return this.PartNo;
  }

  public NE setPartNo(int PartNo) {
    this.PartNo = PartNo;
    setPartNoIsSet(true);
    return this;
  }

  public void unsetPartNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTNO_ISSET_ID);
  }

  /** Returns true if field PartNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPartNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTNO_ISSET_ID);
  }

  public void setPartNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTNO_ISSET_ID, value);
  }

  public int getNeNo() {
    return this.NeNo;
  }

  public NE setNeNo(int NeNo) {
    this.NeNo = NeNo;
    setNeNoIsSet(true);
    return this;
  }

  public void unsetNeNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NENO_ISSET_ID);
  }

  /** Returns true if field NeNo is set (has been assigned a value) and false otherwise */
  public boolean isSetNeNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NENO_ISSET_ID);
  }

  public void setNeNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NENO_ISSET_ID, value);
  }

  public java.lang.String getNeIp() {
    return this.NeIp;
  }

  public NE setNeIp(java.lang.String NeIp) {
    this.NeIp = NeIp;
    return this;
  }

  public void unsetNeIp() {
    this.NeIp = null;
  }

  /** Returns true if field NeIp is set (has been assigned a value) and false otherwise */
  public boolean isSetNeIp() {
    return this.NeIp != null;
  }

  public void setNeIpIsSet(boolean value) {
    if (!value) {
      this.NeIp = null;
    }
  }

  public int getNeSwitch1() {
    return this.NeSwitch1;
  }

  public NE setNeSwitch1(int NeSwitch1) {
    this.NeSwitch1 = NeSwitch1;
    setNeSwitch1IsSet(true);
    return this;
  }

  public void unsetNeSwitch1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NESWITCH1_ISSET_ID);
  }

  /** Returns true if field NeSwitch1 is set (has been assigned a value) and false otherwise */
  public boolean isSetNeSwitch1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NESWITCH1_ISSET_ID);
  }

  public void setNeSwitch1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NESWITCH1_ISSET_ID, value);
  }

  public int getNeSwitch2() {
    return this.NeSwitch2;
  }

  public NE setNeSwitch2(int NeSwitch2) {
    this.NeSwitch2 = NeSwitch2;
    setNeSwitch2IsSet(true);
    return this;
  }

  public void unsetNeSwitch2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NESWITCH2_ISSET_ID);
  }

  /** Returns true if field NeSwitch2 is set (has been assigned a value) and false otherwise */
  public boolean isSetNeSwitch2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NESWITCH2_ISSET_ID);
  }

  public void setNeSwitch2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NESWITCH2_ISSET_ID, value);
  }

  public int getManagerA() {
    return this.ManagerA;
  }

  public NE setManagerA(int ManagerA) {
    this.ManagerA = ManagerA;
    setManagerAIsSet(true);
    return this;
  }

  public void unsetManagerA() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MANAGERA_ISSET_ID);
  }

  /** Returns true if field ManagerA is set (has been assigned a value) and false otherwise */
  public boolean isSetManagerA() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MANAGERA_ISSET_ID);
  }

  public void setManagerAIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MANAGERA_ISSET_ID, value);
  }

  public int getManagerB() {
    return this.ManagerB;
  }

  public NE setManagerB(int ManagerB) {
    this.ManagerB = ManagerB;
    setManagerBIsSet(true);
    return this;
  }

  public void unsetManagerB() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MANAGERB_ISSET_ID);
  }

  /** Returns true if field ManagerB is set (has been assigned a value) and false otherwise */
  public boolean isSetManagerB() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MANAGERB_ISSET_ID);
  }

  public void setManagerBIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MANAGERB_ISSET_ID, value);
  }

  public java.lang.String getCreateTime() {
    return this.CreateTime;
  }

  public NE setCreateTime(java.lang.String CreateTime) {
    this.CreateTime = CreateTime;
    return this;
  }

  public void unsetCreateTime() {
    this.CreateTime = null;
  }

  /** Returns true if field CreateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.CreateTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.CreateTime = null;
    }
  }

  public int getLoginDomainId() {
    return this.LoginDomainId;
  }

  public NE setLoginDomainId(int LoginDomainId) {
    this.LoginDomainId = LoginDomainId;
    setLoginDomainIdIsSet(true);
    return this;
  }

  public void unsetLoginDomainId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOGINDOMAINID_ISSET_ID);
  }

  /** Returns true if field LoginDomainId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginDomainId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOGINDOMAINID_ISSET_ID);
  }

  public void setLoginDomainIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOGINDOMAINID_ISSET_ID, value);
  }

  public java.lang.String getLoginDomainName() {
    return this.LoginDomainName;
  }

  public NE setLoginDomainName(java.lang.String LoginDomainName) {
    this.LoginDomainName = LoginDomainName;
    return this;
  }

  public void unsetLoginDomainName() {
    this.LoginDomainName = null;
  }

  /** Returns true if field LoginDomainName is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginDomainName() {
    return this.LoginDomainName != null;
  }

  public void setLoginDomainNameIsSet(boolean value) {
    if (!value) {
      this.LoginDomainName = null;
    }
  }

  public java.lang.String getPjtName() {
    return this.PjtName;
  }

  public NE setPjtName(java.lang.String PjtName) {
    this.PjtName = PjtName;
    return this;
  }

  public void unsetPjtName() {
    this.PjtName = null;
  }

  /** Returns true if field PjtName is set (has been assigned a value) and false otherwise */
  public boolean isSetPjtName() {
    return this.PjtName != null;
  }

  public void setPjtNameIsSet(boolean value) {
    if (!value) {
      this.PjtName = null;
    }
  }

  public java.lang.String getBasicDomainMask() {
    return this.BasicDomainMask;
  }

  public NE setBasicDomainMask(java.lang.String BasicDomainMask) {
    this.BasicDomainMask = BasicDomainMask;
    return this;
  }

  public void unsetBasicDomainMask() {
    this.BasicDomainMask = null;
  }

  /** Returns true if field BasicDomainMask is set (has been assigned a value) and false otherwise */
  public boolean isSetBasicDomainMask() {
    return this.BasicDomainMask != null;
  }

  public void setBasicDomainMaskIsSet(boolean value) {
    if (!value) {
      this.BasicDomainMask = null;
    }
  }

  public java.lang.String getBasicDomainid() {
    return this.BasicDomainid;
  }

  public NE setBasicDomainid(java.lang.String BasicDomainid) {
    this.BasicDomainid = BasicDomainid;
    return this;
  }

  public void unsetBasicDomainid() {
    this.BasicDomainid = null;
  }

  /** Returns true if field BasicDomainid is set (has been assigned a value) and false otherwise */
  public boolean isSetBasicDomainid() {
    return this.BasicDomainid != null;
  }

  public void setBasicDomainidIsSet(boolean value) {
    if (!value) {
      this.BasicDomainid = null;
    }
  }

  public java.lang.String getBasicDomainType() {
    return this.BasicDomainType;
  }

  public NE setBasicDomainType(java.lang.String BasicDomainType) {
    this.BasicDomainType = BasicDomainType;
    return this;
  }

  public void unsetBasicDomainType() {
    this.BasicDomainType = null;
  }

  /** Returns true if field BasicDomainType is set (has been assigned a value) and false otherwise */
  public boolean isSetBasicDomainType() {
    return this.BasicDomainType != null;
  }

  public void setBasicDomainTypeIsSet(boolean value) {
    if (!value) {
      this.BasicDomainType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NE_ID:
      if (value == null) {
        unsetNeId();
      } else {
        setNeId((java.lang.Integer)value);
      }
      break;

    case PJT_ID:
      if (value == null) {
        unsetPjtId();
      } else {
        setPjtId((java.lang.Integer)value);
      }
      break;

    case PART_ID:
      if (value == null) {
        unsetPartId();
      } else {
        setPartId((java.lang.Integer)value);
      }
      break;

    case PART_NAME:
      if (value == null) {
        unsetPartName();
      } else {
        setPartName((java.lang.String)value);
      }
      break;

    case MANAGER_ID:
      if (value == null) {
        unsetManagerId();
      } else {
        setManagerId((java.lang.Integer)value);
      }
      break;

    case PART_TYPE:
      if (value == null) {
        unsetPartType();
      } else {
        setPartType((java.lang.Integer)value);
      }
      break;

    case NE_NAME:
      if (value == null) {
        unsetNeName();
      } else {
        setNeName((java.lang.String)value);
      }
      break;

    case LOCATION_NAME:
      if (value == null) {
        unsetLocationName();
      } else {
        setLocationName((java.lang.String)value);
      }
      break;

    case NE_TYPE_NO:
      if (value == null) {
        unsetNeTypeNo();
      } else {
        setNeTypeNo((java.lang.Integer)value);
      }
      break;

    case NE_TYPE_NAME:
      if (value == null) {
        unsetNeTypeName();
      } else {
        setNeTypeName((java.lang.String)value);
      }
      break;

    case EMUTYPE:
      if (value == null) {
        unsetEMUType();
      } else {
        setEMUType((java.lang.Integer)value);
      }
      break;

    case PART_NO:
      if (value == null) {
        unsetPartNo();
      } else {
        setPartNo((java.lang.Integer)value);
      }
      break;

    case NE_NO:
      if (value == null) {
        unsetNeNo();
      } else {
        setNeNo((java.lang.Integer)value);
      }
      break;

    case NE_IP:
      if (value == null) {
        unsetNeIp();
      } else {
        setNeIp((java.lang.String)value);
      }
      break;

    case NE_SWITCH1:
      if (value == null) {
        unsetNeSwitch1();
      } else {
        setNeSwitch1((java.lang.Integer)value);
      }
      break;

    case NE_SWITCH2:
      if (value == null) {
        unsetNeSwitch2();
      } else {
        setNeSwitch2((java.lang.Integer)value);
      }
      break;

    case MANAGER_A:
      if (value == null) {
        unsetManagerA();
      } else {
        setManagerA((java.lang.Integer)value);
      }
      break;

    case MANAGER_B:
      if (value == null) {
        unsetManagerB();
      } else {
        setManagerB((java.lang.Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case LOGIN_DOMAIN_ID:
      if (value == null) {
        unsetLoginDomainId();
      } else {
        setLoginDomainId((java.lang.Integer)value);
      }
      break;

    case LOGIN_DOMAIN_NAME:
      if (value == null) {
        unsetLoginDomainName();
      } else {
        setLoginDomainName((java.lang.String)value);
      }
      break;

    case PJT_NAME:
      if (value == null) {
        unsetPjtName();
      } else {
        setPjtName((java.lang.String)value);
      }
      break;

    case BASIC_DOMAIN_MASK:
      if (value == null) {
        unsetBasicDomainMask();
      } else {
        setBasicDomainMask((java.lang.String)value);
      }
      break;

    case BASIC_DOMAINID:
      if (value == null) {
        unsetBasicDomainid();
      } else {
        setBasicDomainid((java.lang.String)value);
      }
      break;

    case BASIC_DOMAIN_TYPE:
      if (value == null) {
        unsetBasicDomainType();
      } else {
        setBasicDomainType((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NE_ID:
      return getNeId();

    case PJT_ID:
      return getPjtId();

    case PART_ID:
      return getPartId();

    case PART_NAME:
      return getPartName();

    case MANAGER_ID:
      return getManagerId();

    case PART_TYPE:
      return getPartType();

    case NE_NAME:
      return getNeName();

    case LOCATION_NAME:
      return getLocationName();

    case NE_TYPE_NO:
      return getNeTypeNo();

    case NE_TYPE_NAME:
      return getNeTypeName();

    case EMUTYPE:
      return getEMUType();

    case PART_NO:
      return getPartNo();

    case NE_NO:
      return getNeNo();

    case NE_IP:
      return getNeIp();

    case NE_SWITCH1:
      return getNeSwitch1();

    case NE_SWITCH2:
      return getNeSwitch2();

    case MANAGER_A:
      return getManagerA();

    case MANAGER_B:
      return getManagerB();

    case CREATE_TIME:
      return getCreateTime();

    case LOGIN_DOMAIN_ID:
      return getLoginDomainId();

    case LOGIN_DOMAIN_NAME:
      return getLoginDomainName();

    case PJT_NAME:
      return getPjtName();

    case BASIC_DOMAIN_MASK:
      return getBasicDomainMask();

    case BASIC_DOMAINID:
      return getBasicDomainid();

    case BASIC_DOMAIN_TYPE:
      return getBasicDomainType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NE_ID:
      return isSetNeId();
    case PJT_ID:
      return isSetPjtId();
    case PART_ID:
      return isSetPartId();
    case PART_NAME:
      return isSetPartName();
    case MANAGER_ID:
      return isSetManagerId();
    case PART_TYPE:
      return isSetPartType();
    case NE_NAME:
      return isSetNeName();
    case LOCATION_NAME:
      return isSetLocationName();
    case NE_TYPE_NO:
      return isSetNeTypeNo();
    case NE_TYPE_NAME:
      return isSetNeTypeName();
    case EMUTYPE:
      return isSetEMUType();
    case PART_NO:
      return isSetPartNo();
    case NE_NO:
      return isSetNeNo();
    case NE_IP:
      return isSetNeIp();
    case NE_SWITCH1:
      return isSetNeSwitch1();
    case NE_SWITCH2:
      return isSetNeSwitch2();
    case MANAGER_A:
      return isSetManagerA();
    case MANAGER_B:
      return isSetManagerB();
    case CREATE_TIME:
      return isSetCreateTime();
    case LOGIN_DOMAIN_ID:
      return isSetLoginDomainId();
    case LOGIN_DOMAIN_NAME:
      return isSetLoginDomainName();
    case PJT_NAME:
      return isSetPjtName();
    case BASIC_DOMAIN_MASK:
      return isSetBasicDomainMask();
    case BASIC_DOMAINID:
      return isSetBasicDomainid();
    case BASIC_DOMAIN_TYPE:
      return isSetBasicDomainType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NE)
      return this.equals((NE)that);
    return false;
  }

  public boolean equals(NE that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_NeId = true;
    boolean that_present_NeId = true;
    if (this_present_NeId || that_present_NeId) {
      if (!(this_present_NeId && that_present_NeId))
        return false;
      if (this.NeId != that.NeId)
        return false;
    }

    boolean this_present_PjtId = true;
    boolean that_present_PjtId = true;
    if (this_present_PjtId || that_present_PjtId) {
      if (!(this_present_PjtId && that_present_PjtId))
        return false;
      if (this.PjtId != that.PjtId)
        return false;
    }

    boolean this_present_PartId = true;
    boolean that_present_PartId = true;
    if (this_present_PartId || that_present_PartId) {
      if (!(this_present_PartId && that_present_PartId))
        return false;
      if (this.PartId != that.PartId)
        return false;
    }

    boolean this_present_PartName = true && this.isSetPartName();
    boolean that_present_PartName = true && that.isSetPartName();
    if (this_present_PartName || that_present_PartName) {
      if (!(this_present_PartName && that_present_PartName))
        return false;
      if (!this.PartName.equals(that.PartName))
        return false;
    }

    boolean this_present_ManagerId = true;
    boolean that_present_ManagerId = true;
    if (this_present_ManagerId || that_present_ManagerId) {
      if (!(this_present_ManagerId && that_present_ManagerId))
        return false;
      if (this.ManagerId != that.ManagerId)
        return false;
    }

    boolean this_present_PartType = true;
    boolean that_present_PartType = true;
    if (this_present_PartType || that_present_PartType) {
      if (!(this_present_PartType && that_present_PartType))
        return false;
      if (this.PartType != that.PartType)
        return false;
    }

    boolean this_present_NeName = true && this.isSetNeName();
    boolean that_present_NeName = true && that.isSetNeName();
    if (this_present_NeName || that_present_NeName) {
      if (!(this_present_NeName && that_present_NeName))
        return false;
      if (!this.NeName.equals(that.NeName))
        return false;
    }

    boolean this_present_LocationName = true && this.isSetLocationName();
    boolean that_present_LocationName = true && that.isSetLocationName();
    if (this_present_LocationName || that_present_LocationName) {
      if (!(this_present_LocationName && that_present_LocationName))
        return false;
      if (!this.LocationName.equals(that.LocationName))
        return false;
    }

    boolean this_present_NeTypeNo = true;
    boolean that_present_NeTypeNo = true;
    if (this_present_NeTypeNo || that_present_NeTypeNo) {
      if (!(this_present_NeTypeNo && that_present_NeTypeNo))
        return false;
      if (this.NeTypeNo != that.NeTypeNo)
        return false;
    }

    boolean this_present_NeTypeName = true && this.isSetNeTypeName();
    boolean that_present_NeTypeName = true && that.isSetNeTypeName();
    if (this_present_NeTypeName || that_present_NeTypeName) {
      if (!(this_present_NeTypeName && that_present_NeTypeName))
        return false;
      if (!this.NeTypeName.equals(that.NeTypeName))
        return false;
    }

    boolean this_present_EMUType = true;
    boolean that_present_EMUType = true;
    if (this_present_EMUType || that_present_EMUType) {
      if (!(this_present_EMUType && that_present_EMUType))
        return false;
      if (this.EMUType != that.EMUType)
        return false;
    }

    boolean this_present_PartNo = true;
    boolean that_present_PartNo = true;
    if (this_present_PartNo || that_present_PartNo) {
      if (!(this_present_PartNo && that_present_PartNo))
        return false;
      if (this.PartNo != that.PartNo)
        return false;
    }

    boolean this_present_NeNo = true;
    boolean that_present_NeNo = true;
    if (this_present_NeNo || that_present_NeNo) {
      if (!(this_present_NeNo && that_present_NeNo))
        return false;
      if (this.NeNo != that.NeNo)
        return false;
    }

    boolean this_present_NeIp = true && this.isSetNeIp();
    boolean that_present_NeIp = true && that.isSetNeIp();
    if (this_present_NeIp || that_present_NeIp) {
      if (!(this_present_NeIp && that_present_NeIp))
        return false;
      if (!this.NeIp.equals(that.NeIp))
        return false;
    }

    boolean this_present_NeSwitch1 = true;
    boolean that_present_NeSwitch1 = true;
    if (this_present_NeSwitch1 || that_present_NeSwitch1) {
      if (!(this_present_NeSwitch1 && that_present_NeSwitch1))
        return false;
      if (this.NeSwitch1 != that.NeSwitch1)
        return false;
    }

    boolean this_present_NeSwitch2 = true;
    boolean that_present_NeSwitch2 = true;
    if (this_present_NeSwitch2 || that_present_NeSwitch2) {
      if (!(this_present_NeSwitch2 && that_present_NeSwitch2))
        return false;
      if (this.NeSwitch2 != that.NeSwitch2)
        return false;
    }

    boolean this_present_ManagerA = true;
    boolean that_present_ManagerA = true;
    if (this_present_ManagerA || that_present_ManagerA) {
      if (!(this_present_ManagerA && that_present_ManagerA))
        return false;
      if (this.ManagerA != that.ManagerA)
        return false;
    }

    boolean this_present_ManagerB = true;
    boolean that_present_ManagerB = true;
    if (this_present_ManagerB || that_present_ManagerB) {
      if (!(this_present_ManagerB && that_present_ManagerB))
        return false;
      if (this.ManagerB != that.ManagerB)
        return false;
    }

    boolean this_present_CreateTime = true && this.isSetCreateTime();
    boolean that_present_CreateTime = true && that.isSetCreateTime();
    if (this_present_CreateTime || that_present_CreateTime) {
      if (!(this_present_CreateTime && that_present_CreateTime))
        return false;
      if (!this.CreateTime.equals(that.CreateTime))
        return false;
    }

    boolean this_present_LoginDomainId = true;
    boolean that_present_LoginDomainId = true;
    if (this_present_LoginDomainId || that_present_LoginDomainId) {
      if (!(this_present_LoginDomainId && that_present_LoginDomainId))
        return false;
      if (this.LoginDomainId != that.LoginDomainId)
        return false;
    }

    boolean this_present_LoginDomainName = true && this.isSetLoginDomainName();
    boolean that_present_LoginDomainName = true && that.isSetLoginDomainName();
    if (this_present_LoginDomainName || that_present_LoginDomainName) {
      if (!(this_present_LoginDomainName && that_present_LoginDomainName))
        return false;
      if (!this.LoginDomainName.equals(that.LoginDomainName))
        return false;
    }

    boolean this_present_PjtName = true && this.isSetPjtName();
    boolean that_present_PjtName = true && that.isSetPjtName();
    if (this_present_PjtName || that_present_PjtName) {
      if (!(this_present_PjtName && that_present_PjtName))
        return false;
      if (!this.PjtName.equals(that.PjtName))
        return false;
    }

    boolean this_present_BasicDomainMask = true && this.isSetBasicDomainMask();
    boolean that_present_BasicDomainMask = true && that.isSetBasicDomainMask();
    if (this_present_BasicDomainMask || that_present_BasicDomainMask) {
      if (!(this_present_BasicDomainMask && that_present_BasicDomainMask))
        return false;
      if (!this.BasicDomainMask.equals(that.BasicDomainMask))
        return false;
    }

    boolean this_present_BasicDomainid = true && this.isSetBasicDomainid();
    boolean that_present_BasicDomainid = true && that.isSetBasicDomainid();
    if (this_present_BasicDomainid || that_present_BasicDomainid) {
      if (!(this_present_BasicDomainid && that_present_BasicDomainid))
        return false;
      if (!this.BasicDomainid.equals(that.BasicDomainid))
        return false;
    }

    boolean this_present_BasicDomainType = true && this.isSetBasicDomainType();
    boolean that_present_BasicDomainType = true && that.isSetBasicDomainType();
    if (this_present_BasicDomainType || that_present_BasicDomainType) {
      if (!(this_present_BasicDomainType && that_present_BasicDomainType))
        return false;
      if (!this.BasicDomainType.equals(that.BasicDomainType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + NeId;

    hashCode = hashCode * 8191 + PjtId;

    hashCode = hashCode * 8191 + PartId;

    hashCode = hashCode * 8191 + ((isSetPartName()) ? 131071 : 524287);
    if (isSetPartName())
      hashCode = hashCode * 8191 + PartName.hashCode();

    hashCode = hashCode * 8191 + ManagerId;

    hashCode = hashCode * 8191 + PartType;

    hashCode = hashCode * 8191 + ((isSetNeName()) ? 131071 : 524287);
    if (isSetNeName())
      hashCode = hashCode * 8191 + NeName.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocationName()) ? 131071 : 524287);
    if (isSetLocationName())
      hashCode = hashCode * 8191 + LocationName.hashCode();

    hashCode = hashCode * 8191 + NeTypeNo;

    hashCode = hashCode * 8191 + ((isSetNeTypeName()) ? 131071 : 524287);
    if (isSetNeTypeName())
      hashCode = hashCode * 8191 + NeTypeName.hashCode();

    hashCode = hashCode * 8191 + EMUType;

    hashCode = hashCode * 8191 + PartNo;

    hashCode = hashCode * 8191 + NeNo;

    hashCode = hashCode * 8191 + ((isSetNeIp()) ? 131071 : 524287);
    if (isSetNeIp())
      hashCode = hashCode * 8191 + NeIp.hashCode();

    hashCode = hashCode * 8191 + NeSwitch1;

    hashCode = hashCode * 8191 + NeSwitch2;

    hashCode = hashCode * 8191 + ManagerA;

    hashCode = hashCode * 8191 + ManagerB;

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + CreateTime.hashCode();

    hashCode = hashCode * 8191 + LoginDomainId;

    hashCode = hashCode * 8191 + ((isSetLoginDomainName()) ? 131071 : 524287);
    if (isSetLoginDomainName())
      hashCode = hashCode * 8191 + LoginDomainName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPjtName()) ? 131071 : 524287);
    if (isSetPjtName())
      hashCode = hashCode * 8191 + PjtName.hashCode();

    hashCode = hashCode * 8191 + ((isSetBasicDomainMask()) ? 131071 : 524287);
    if (isSetBasicDomainMask())
      hashCode = hashCode * 8191 + BasicDomainMask.hashCode();

    hashCode = hashCode * 8191 + ((isSetBasicDomainid()) ? 131071 : 524287);
    if (isSetBasicDomainid())
      hashCode = hashCode * 8191 + BasicDomainid.hashCode();

    hashCode = hashCode * 8191 + ((isSetBasicDomainType()) ? 131071 : 524287);
    if (isSetBasicDomainType())
      hashCode = hashCode * 8191 + BasicDomainType.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NE other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNeId()).compareTo(other.isSetNeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NeId, other.NeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPjtId()).compareTo(other.isSetPjtId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPjtId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PjtId, other.PjtId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPartId()).compareTo(other.isSetPartId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PartId, other.PartId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPartName()).compareTo(other.isSetPartName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PartName, other.PartName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManagerId()).compareTo(other.isSetManagerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManagerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ManagerId, other.ManagerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPartType()).compareTo(other.isSetPartType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PartType, other.PartType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNeName()).compareTo(other.isSetNeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NeName, other.NeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocationName()).compareTo(other.isSetLocationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LocationName, other.LocationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNeTypeNo()).compareTo(other.isSetNeTypeNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeTypeNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NeTypeNo, other.NeTypeNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNeTypeName()).compareTo(other.isSetNeTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NeTypeName, other.NeTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEMUType()).compareTo(other.isSetEMUType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEMUType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EMUType, other.EMUType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPartNo()).compareTo(other.isSetPartNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PartNo, other.PartNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNeNo()).compareTo(other.isSetNeNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NeNo, other.NeNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNeIp()).compareTo(other.isSetNeIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NeIp, other.NeIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNeSwitch1()).compareTo(other.isSetNeSwitch1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeSwitch1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NeSwitch1, other.NeSwitch1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNeSwitch2()).compareTo(other.isSetNeSwitch2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeSwitch2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NeSwitch2, other.NeSwitch2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManagerA()).compareTo(other.isSetManagerA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManagerA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ManagerA, other.ManagerA);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManagerB()).compareTo(other.isSetManagerB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManagerB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ManagerB, other.ManagerB);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CreateTime, other.CreateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLoginDomainId()).compareTo(other.isSetLoginDomainId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginDomainId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LoginDomainId, other.LoginDomainId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLoginDomainName()).compareTo(other.isSetLoginDomainName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginDomainName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LoginDomainName, other.LoginDomainName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPjtName()).compareTo(other.isSetPjtName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPjtName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PjtName, other.PjtName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBasicDomainMask()).compareTo(other.isSetBasicDomainMask());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasicDomainMask()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BasicDomainMask, other.BasicDomainMask);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBasicDomainid()).compareTo(other.isSetBasicDomainid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasicDomainid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BasicDomainid, other.BasicDomainid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBasicDomainType()).compareTo(other.isSetBasicDomainType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasicDomainType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BasicDomainType, other.BasicDomainType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NE(");
    boolean first = true;

    sb.append("NeId:");
    sb.append(this.NeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PjtId:");
    sb.append(this.PjtId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PartId:");
    sb.append(this.PartId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PartName:");
    if (this.PartName == null) {
      sb.append("null");
    } else {
      sb.append(this.PartName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ManagerId:");
    sb.append(this.ManagerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PartType:");
    sb.append(this.PartType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NeName:");
    if (this.NeName == null) {
      sb.append("null");
    } else {
      sb.append(this.NeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("LocationName:");
    if (this.LocationName == null) {
      sb.append("null");
    } else {
      sb.append(this.LocationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NeTypeNo:");
    sb.append(this.NeTypeNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NeTypeName:");
    if (this.NeTypeName == null) {
      sb.append("null");
    } else {
      sb.append(this.NeTypeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("EMUType:");
    sb.append(this.EMUType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PartNo:");
    sb.append(this.PartNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NeNo:");
    sb.append(this.NeNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NeIp:");
    if (this.NeIp == null) {
      sb.append("null");
    } else {
      sb.append(this.NeIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NeSwitch1:");
    sb.append(this.NeSwitch1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NeSwitch2:");
    sb.append(this.NeSwitch2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ManagerA:");
    sb.append(this.ManagerA);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ManagerB:");
    sb.append(this.ManagerB);
    first = false;
    if (!first) sb.append(", ");
    sb.append("CreateTime:");
    if (this.CreateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.CreateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("LoginDomainId:");
    sb.append(this.LoginDomainId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("LoginDomainName:");
    if (this.LoginDomainName == null) {
      sb.append("null");
    } else {
      sb.append(this.LoginDomainName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PjtName:");
    if (this.PjtName == null) {
      sb.append("null");
    } else {
      sb.append(this.PjtName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BasicDomainMask:");
    if (this.BasicDomainMask == null) {
      sb.append("null");
    } else {
      sb.append(this.BasicDomainMask);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BasicDomainid:");
    if (this.BasicDomainid == null) {
      sb.append("null");
    } else {
      sb.append(this.BasicDomainid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BasicDomainType:");
    if (this.BasicDomainType == null) {
      sb.append("null");
    } else {
      sb.append(this.BasicDomainType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NEStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NEStandardScheme getScheme() {
      return new NEStandardScheme();
    }
  }

  private static class NEStandardScheme extends org.apache.thrift.scheme.StandardScheme<NE> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NE struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.NeId = iprot.readI32();
              struct.setNeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PJT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PjtId = iprot.readI32();
              struct.setPjtIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PART_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PartId = iprot.readI32();
              struct.setPartIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PART_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PartName = iprot.readString();
              struct.setPartNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MANAGER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ManagerId = iprot.readI32();
              struct.setManagerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PART_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PartType = iprot.readI32();
              struct.setPartTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NeName = iprot.readString();
              struct.setNeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOCATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.LocationName = iprot.readString();
              struct.setLocationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NE_TYPE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.NeTypeNo = iprot.readI32();
              struct.setNeTypeNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NE_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NeTypeName = iprot.readString();
              struct.setNeTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EMUTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.EMUType = iprot.readI32();
              struct.setEMUTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PART_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PartNo = iprot.readI32();
              struct.setPartNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.NeNo = iprot.readI32();
              struct.setNeNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NE_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NeIp = iprot.readString();
              struct.setNeIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NE_SWITCH1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.NeSwitch1 = iprot.readI32();
              struct.setNeSwitch1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NE_SWITCH2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.NeSwitch2 = iprot.readI32();
              struct.setNeSwitch2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MANAGER_A
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ManagerA = iprot.readI32();
              struct.setManagerAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MANAGER_B
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ManagerB = iprot.readI32();
              struct.setManagerBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.CreateTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LOGIN_DOMAIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.LoginDomainId = iprot.readI32();
              struct.setLoginDomainIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LOGIN_DOMAIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.LoginDomainName = iprot.readString();
              struct.setLoginDomainNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PJT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PjtName = iprot.readString();
              struct.setPjtNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // BASIC_DOMAIN_MASK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.BasicDomainMask = iprot.readString();
              struct.setBasicDomainMaskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // BASIC_DOMAINID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.BasicDomainid = iprot.readString();
              struct.setBasicDomainidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // BASIC_DOMAIN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.BasicDomainType = iprot.readString();
              struct.setBasicDomainTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NE struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NE_ID_FIELD_DESC);
      oprot.writeI32(struct.NeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PJT_ID_FIELD_DESC);
      oprot.writeI32(struct.PjtId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PART_ID_FIELD_DESC);
      oprot.writeI32(struct.PartId);
      oprot.writeFieldEnd();
      if (struct.PartName != null) {
        oprot.writeFieldBegin(PART_NAME_FIELD_DESC);
        oprot.writeString(struct.PartName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MANAGER_ID_FIELD_DESC);
      oprot.writeI32(struct.ManagerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PART_TYPE_FIELD_DESC);
      oprot.writeI32(struct.PartType);
      oprot.writeFieldEnd();
      if (struct.NeName != null) {
        oprot.writeFieldBegin(NE_NAME_FIELD_DESC);
        oprot.writeString(struct.NeName);
        oprot.writeFieldEnd();
      }
      if (struct.LocationName != null) {
        oprot.writeFieldBegin(LOCATION_NAME_FIELD_DESC);
        oprot.writeString(struct.LocationName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NE_TYPE_NO_FIELD_DESC);
      oprot.writeI32(struct.NeTypeNo);
      oprot.writeFieldEnd();
      if (struct.NeTypeName != null) {
        oprot.writeFieldBegin(NE_TYPE_NAME_FIELD_DESC);
        oprot.writeString(struct.NeTypeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EMUTYPE_FIELD_DESC);
      oprot.writeI32(struct.EMUType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PART_NO_FIELD_DESC);
      oprot.writeI32(struct.PartNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NE_NO_FIELD_DESC);
      oprot.writeI32(struct.NeNo);
      oprot.writeFieldEnd();
      if (struct.NeIp != null) {
        oprot.writeFieldBegin(NE_IP_FIELD_DESC);
        oprot.writeString(struct.NeIp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NE_SWITCH1_FIELD_DESC);
      oprot.writeI32(struct.NeSwitch1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NE_SWITCH2_FIELD_DESC);
      oprot.writeI32(struct.NeSwitch2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MANAGER_A_FIELD_DESC);
      oprot.writeI32(struct.ManagerA);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MANAGER_B_FIELD_DESC);
      oprot.writeI32(struct.ManagerB);
      oprot.writeFieldEnd();
      if (struct.CreateTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.CreateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOGIN_DOMAIN_ID_FIELD_DESC);
      oprot.writeI32(struct.LoginDomainId);
      oprot.writeFieldEnd();
      if (struct.LoginDomainName != null) {
        oprot.writeFieldBegin(LOGIN_DOMAIN_NAME_FIELD_DESC);
        oprot.writeString(struct.LoginDomainName);
        oprot.writeFieldEnd();
      }
      if (struct.PjtName != null) {
        oprot.writeFieldBegin(PJT_NAME_FIELD_DESC);
        oprot.writeString(struct.PjtName);
        oprot.writeFieldEnd();
      }
      if (struct.BasicDomainMask != null) {
        oprot.writeFieldBegin(BASIC_DOMAIN_MASK_FIELD_DESC);
        oprot.writeString(struct.BasicDomainMask);
        oprot.writeFieldEnd();
      }
      if (struct.BasicDomainid != null) {
        oprot.writeFieldBegin(BASIC_DOMAINID_FIELD_DESC);
        oprot.writeString(struct.BasicDomainid);
        oprot.writeFieldEnd();
      }
      if (struct.BasicDomainType != null) {
        oprot.writeFieldBegin(BASIC_DOMAIN_TYPE_FIELD_DESC);
        oprot.writeString(struct.BasicDomainType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NETupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NETupleScheme getScheme() {
      return new NETupleScheme();
    }
  }

  private static class NETupleScheme extends org.apache.thrift.scheme.TupleScheme<NE> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NE struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNeId()) {
        optionals.set(0);
      }
      if (struct.isSetPjtId()) {
        optionals.set(1);
      }
      if (struct.isSetPartId()) {
        optionals.set(2);
      }
      if (struct.isSetPartName()) {
        optionals.set(3);
      }
      if (struct.isSetManagerId()) {
        optionals.set(4);
      }
      if (struct.isSetPartType()) {
        optionals.set(5);
      }
      if (struct.isSetNeName()) {
        optionals.set(6);
      }
      if (struct.isSetLocationName()) {
        optionals.set(7);
      }
      if (struct.isSetNeTypeNo()) {
        optionals.set(8);
      }
      if (struct.isSetNeTypeName()) {
        optionals.set(9);
      }
      if (struct.isSetEMUType()) {
        optionals.set(10);
      }
      if (struct.isSetPartNo()) {
        optionals.set(11);
      }
      if (struct.isSetNeNo()) {
        optionals.set(12);
      }
      if (struct.isSetNeIp()) {
        optionals.set(13);
      }
      if (struct.isSetNeSwitch1()) {
        optionals.set(14);
      }
      if (struct.isSetNeSwitch2()) {
        optionals.set(15);
      }
      if (struct.isSetManagerA()) {
        optionals.set(16);
      }
      if (struct.isSetManagerB()) {
        optionals.set(17);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(18);
      }
      if (struct.isSetLoginDomainId()) {
        optionals.set(19);
      }
      if (struct.isSetLoginDomainName()) {
        optionals.set(20);
      }
      if (struct.isSetPjtName()) {
        optionals.set(21);
      }
      if (struct.isSetBasicDomainMask()) {
        optionals.set(22);
      }
      if (struct.isSetBasicDomainid()) {
        optionals.set(23);
      }
      if (struct.isSetBasicDomainType()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetNeId()) {
        oprot.writeI32(struct.NeId);
      }
      if (struct.isSetPjtId()) {
        oprot.writeI32(struct.PjtId);
      }
      if (struct.isSetPartId()) {
        oprot.writeI32(struct.PartId);
      }
      if (struct.isSetPartName()) {
        oprot.writeString(struct.PartName);
      }
      if (struct.isSetManagerId()) {
        oprot.writeI32(struct.ManagerId);
      }
      if (struct.isSetPartType()) {
        oprot.writeI32(struct.PartType);
      }
      if (struct.isSetNeName()) {
        oprot.writeString(struct.NeName);
      }
      if (struct.isSetLocationName()) {
        oprot.writeString(struct.LocationName);
      }
      if (struct.isSetNeTypeNo()) {
        oprot.writeI32(struct.NeTypeNo);
      }
      if (struct.isSetNeTypeName()) {
        oprot.writeString(struct.NeTypeName);
      }
      if (struct.isSetEMUType()) {
        oprot.writeI32(struct.EMUType);
      }
      if (struct.isSetPartNo()) {
        oprot.writeI32(struct.PartNo);
      }
      if (struct.isSetNeNo()) {
        oprot.writeI32(struct.NeNo);
      }
      if (struct.isSetNeIp()) {
        oprot.writeString(struct.NeIp);
      }
      if (struct.isSetNeSwitch1()) {
        oprot.writeI32(struct.NeSwitch1);
      }
      if (struct.isSetNeSwitch2()) {
        oprot.writeI32(struct.NeSwitch2);
      }
      if (struct.isSetManagerA()) {
        oprot.writeI32(struct.ManagerA);
      }
      if (struct.isSetManagerB()) {
        oprot.writeI32(struct.ManagerB);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.CreateTime);
      }
      if (struct.isSetLoginDomainId()) {
        oprot.writeI32(struct.LoginDomainId);
      }
      if (struct.isSetLoginDomainName()) {
        oprot.writeString(struct.LoginDomainName);
      }
      if (struct.isSetPjtName()) {
        oprot.writeString(struct.PjtName);
      }
      if (struct.isSetBasicDomainMask()) {
        oprot.writeString(struct.BasicDomainMask);
      }
      if (struct.isSetBasicDomainid()) {
        oprot.writeString(struct.BasicDomainid);
      }
      if (struct.isSetBasicDomainType()) {
        oprot.writeString(struct.BasicDomainType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NE struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.NeId = iprot.readI32();
        struct.setNeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.PjtId = iprot.readI32();
        struct.setPjtIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.PartId = iprot.readI32();
        struct.setPartIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.PartName = iprot.readString();
        struct.setPartNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ManagerId = iprot.readI32();
        struct.setManagerIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.PartType = iprot.readI32();
        struct.setPartTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.NeName = iprot.readString();
        struct.setNeNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.LocationName = iprot.readString();
        struct.setLocationNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.NeTypeNo = iprot.readI32();
        struct.setNeTypeNoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.NeTypeName = iprot.readString();
        struct.setNeTypeNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.EMUType = iprot.readI32();
        struct.setEMUTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.PartNo = iprot.readI32();
        struct.setPartNoIsSet(true);
      }
      if (incoming.get(12)) {
        struct.NeNo = iprot.readI32();
        struct.setNeNoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.NeIp = iprot.readString();
        struct.setNeIpIsSet(true);
      }
      if (incoming.get(14)) {
        struct.NeSwitch1 = iprot.readI32();
        struct.setNeSwitch1IsSet(true);
      }
      if (incoming.get(15)) {
        struct.NeSwitch2 = iprot.readI32();
        struct.setNeSwitch2IsSet(true);
      }
      if (incoming.get(16)) {
        struct.ManagerA = iprot.readI32();
        struct.setManagerAIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ManagerB = iprot.readI32();
        struct.setManagerBIsSet(true);
      }
      if (incoming.get(18)) {
        struct.CreateTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.LoginDomainId = iprot.readI32();
        struct.setLoginDomainIdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.LoginDomainName = iprot.readString();
        struct.setLoginDomainNameIsSet(true);
      }
      if (incoming.get(21)) {
        struct.PjtName = iprot.readString();
        struct.setPjtNameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.BasicDomainMask = iprot.readString();
        struct.setBasicDomainMaskIsSet(true);
      }
      if (incoming.get(23)) {
        struct.BasicDomainid = iprot.readString();
        struct.setBasicDomainidIsSet(true);
      }
      if (incoming.get(24)) {
        struct.BasicDomainType = iprot.readString();
        struct.setBasicDomainTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

