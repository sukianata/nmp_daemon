/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fiberhome.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-20")
public class Summary implements org.apache.thrift.TBase<Summary, Summary._Fields>, java.io.Serializable, Cloneable, Comparable<Summary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Summary");

  private static final org.apache.thrift.protocol.TField BOARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("Boards", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField NES_FIELD_DESC = new org.apache.thrift.protocol.TField("NEs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOPOLOGIES_FIELD_DESC = new org.apache.thrift.protocol.TField("Topologies", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("Ports", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SummaryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SummaryTupleSchemeFactory();

  public java.util.List<Board> Boards; // required
  public java.util.List<NE> NEs; // required
  public Topology Topologies; // required
  public java.util.List<Port> Ports; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOARDS((short)1, "Boards"),
    NES((short)2, "NEs"),
    TOPOLOGIES((short)3, "Topologies"),
    PORTS((short)4, "Ports");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOARDS
          return BOARDS;
        case 2: // NES
          return NES;
        case 3: // TOPOLOGIES
          return TOPOLOGIES;
        case 4: // PORTS
          return PORTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOARDS, new org.apache.thrift.meta_data.FieldMetaData("Boards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Board.class))));
    tmpMap.put(_Fields.NES, new org.apache.thrift.meta_data.FieldMetaData("NEs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NE.class))));
    tmpMap.put(_Fields.TOPOLOGIES, new org.apache.thrift.meta_data.FieldMetaData("Topologies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Topology.class)));
    tmpMap.put(_Fields.PORTS, new org.apache.thrift.meta_data.FieldMetaData("Ports", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Port.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Summary.class, metaDataMap);
  }

  public Summary() {
  }

  public Summary(
    java.util.List<Board> Boards,
    java.util.List<NE> NEs,
    Topology Topologies,
    java.util.List<Port> Ports)
  {
    this();
    this.Boards = Boards;
    this.NEs = NEs;
    this.Topologies = Topologies;
    this.Ports = Ports;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Summary(Summary other) {
    if (other.isSetBoards()) {
      java.util.List<Board> __this__Boards = new java.util.ArrayList<Board>(other.Boards.size());
      for (Board other_element : other.Boards) {
        __this__Boards.add(new Board(other_element));
      }
      this.Boards = __this__Boards;
    }
    if (other.isSetNEs()) {
      java.util.List<NE> __this__NEs = new java.util.ArrayList<NE>(other.NEs.size());
      for (NE other_element : other.NEs) {
        __this__NEs.add(new NE(other_element));
      }
      this.NEs = __this__NEs;
    }
    if (other.isSetTopologies()) {
      this.Topologies = new Topology(other.Topologies);
    }
    if (other.isSetPorts()) {
      java.util.List<Port> __this__Ports = new java.util.ArrayList<Port>(other.Ports.size());
      for (Port other_element : other.Ports) {
        __this__Ports.add(new Port(other_element));
      }
      this.Ports = __this__Ports;
    }
  }

  public Summary deepCopy() {
    return new Summary(this);
  }

  @Override
  public void clear() {
    this.Boards = null;
    this.NEs = null;
    this.Topologies = null;
    this.Ports = null;
  }

  public int getBoardsSize() {
    return (this.Boards == null) ? 0 : this.Boards.size();
  }

  public java.util.Iterator<Board> getBoardsIterator() {
    return (this.Boards == null) ? null : this.Boards.iterator();
  }

  public void addToBoards(Board elem) {
    if (this.Boards == null) {
      this.Boards = new java.util.ArrayList<Board>();
    }
    this.Boards.add(elem);
  }

  public java.util.List<Board> getBoards() {
    return this.Boards;
  }

  public Summary setBoards(java.util.List<Board> Boards) {
    this.Boards = Boards;
    return this;
  }

  public void unsetBoards() {
    this.Boards = null;
  }

  /** Returns true if field Boards is set (has been assigned a value) and false otherwise */
  public boolean isSetBoards() {
    return this.Boards != null;
  }

  public void setBoardsIsSet(boolean value) {
    if (!value) {
      this.Boards = null;
    }
  }

  public int getNEsSize() {
    return (this.NEs == null) ? 0 : this.NEs.size();
  }

  public java.util.Iterator<NE> getNEsIterator() {
    return (this.NEs == null) ? null : this.NEs.iterator();
  }

  public void addToNEs(NE elem) {
    if (this.NEs == null) {
      this.NEs = new java.util.ArrayList<NE>();
    }
    this.NEs.add(elem);
  }

  public java.util.List<NE> getNEs() {
    return this.NEs;
  }

  public Summary setNEs(java.util.List<NE> NEs) {
    this.NEs = NEs;
    return this;
  }

  public void unsetNEs() {
    this.NEs = null;
  }

  /** Returns true if field NEs is set (has been assigned a value) and false otherwise */
  public boolean isSetNEs() {
    return this.NEs != null;
  }

  public void setNEsIsSet(boolean value) {
    if (!value) {
      this.NEs = null;
    }
  }

  public Topology getTopologies() {
    return this.Topologies;
  }

  public Summary setTopologies(Topology Topologies) {
    this.Topologies = Topologies;
    return this;
  }

  public void unsetTopologies() {
    this.Topologies = null;
  }

  /** Returns true if field Topologies is set (has been assigned a value) and false otherwise */
  public boolean isSetTopologies() {
    return this.Topologies != null;
  }

  public void setTopologiesIsSet(boolean value) {
    if (!value) {
      this.Topologies = null;
    }
  }

  public int getPortsSize() {
    return (this.Ports == null) ? 0 : this.Ports.size();
  }

  public java.util.Iterator<Port> getPortsIterator() {
    return (this.Ports == null) ? null : this.Ports.iterator();
  }

  public void addToPorts(Port elem) {
    if (this.Ports == null) {
      this.Ports = new java.util.ArrayList<Port>();
    }
    this.Ports.add(elem);
  }

  public java.util.List<Port> getPorts() {
    return this.Ports;
  }

  public Summary setPorts(java.util.List<Port> Ports) {
    this.Ports = Ports;
    return this;
  }

  public void unsetPorts() {
    this.Ports = null;
  }

  /** Returns true if field Ports is set (has been assigned a value) and false otherwise */
  public boolean isSetPorts() {
    return this.Ports != null;
  }

  public void setPortsIsSet(boolean value) {
    if (!value) {
      this.Ports = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BOARDS:
      if (value == null) {
        unsetBoards();
      } else {
        setBoards((java.util.List<Board>)value);
      }
      break;

    case NES:
      if (value == null) {
        unsetNEs();
      } else {
        setNEs((java.util.List<NE>)value);
      }
      break;

    case TOPOLOGIES:
      if (value == null) {
        unsetTopologies();
      } else {
        setTopologies((Topology)value);
      }
      break;

    case PORTS:
      if (value == null) {
        unsetPorts();
      } else {
        setPorts((java.util.List<Port>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BOARDS:
      return getBoards();

    case NES:
      return getNEs();

    case TOPOLOGIES:
      return getTopologies();

    case PORTS:
      return getPorts();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BOARDS:
      return isSetBoards();
    case NES:
      return isSetNEs();
    case TOPOLOGIES:
      return isSetTopologies();
    case PORTS:
      return isSetPorts();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Summary)
      return this.equals((Summary)that);
    return false;
  }

  public boolean equals(Summary that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Boards = true && this.isSetBoards();
    boolean that_present_Boards = true && that.isSetBoards();
    if (this_present_Boards || that_present_Boards) {
      if (!(this_present_Boards && that_present_Boards))
        return false;
      if (!this.Boards.equals(that.Boards))
        return false;
    }

    boolean this_present_NEs = true && this.isSetNEs();
    boolean that_present_NEs = true && that.isSetNEs();
    if (this_present_NEs || that_present_NEs) {
      if (!(this_present_NEs && that_present_NEs))
        return false;
      if (!this.NEs.equals(that.NEs))
        return false;
    }

    boolean this_present_Topologies = true && this.isSetTopologies();
    boolean that_present_Topologies = true && that.isSetTopologies();
    if (this_present_Topologies || that_present_Topologies) {
      if (!(this_present_Topologies && that_present_Topologies))
        return false;
      if (!this.Topologies.equals(that.Topologies))
        return false;
    }

    boolean this_present_Ports = true && this.isSetPorts();
    boolean that_present_Ports = true && that.isSetPorts();
    if (this_present_Ports || that_present_Ports) {
      if (!(this_present_Ports && that_present_Ports))
        return false;
      if (!this.Ports.equals(that.Ports))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBoards()) ? 131071 : 524287);
    if (isSetBoards())
      hashCode = hashCode * 8191 + Boards.hashCode();

    hashCode = hashCode * 8191 + ((isSetNEs()) ? 131071 : 524287);
    if (isSetNEs())
      hashCode = hashCode * 8191 + NEs.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopologies()) ? 131071 : 524287);
    if (isSetTopologies())
      hashCode = hashCode * 8191 + Topologies.hashCode();

    hashCode = hashCode * 8191 + ((isSetPorts()) ? 131071 : 524287);
    if (isSetPorts())
      hashCode = hashCode * 8191 + Ports.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Summary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBoards()).compareTo(other.isSetBoards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Boards, other.Boards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNEs()).compareTo(other.isSetNEs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNEs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NEs, other.NEs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopologies()).compareTo(other.isSetTopologies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopologies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Topologies, other.Topologies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPorts()).compareTo(other.isSetPorts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPorts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Ports, other.Ports);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Summary(");
    boolean first = true;

    sb.append("Boards:");
    if (this.Boards == null) {
      sb.append("null");
    } else {
      sb.append(this.Boards);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NEs:");
    if (this.NEs == null) {
      sb.append("null");
    } else {
      sb.append(this.NEs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Topologies:");
    if (this.Topologies == null) {
      sb.append("null");
    } else {
      sb.append(this.Topologies);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Ports:");
    if (this.Ports == null) {
      sb.append("null");
    } else {
      sb.append(this.Ports);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (Topologies != null) {
      Topologies.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SummaryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SummaryStandardScheme getScheme() {
      return new SummaryStandardScheme();
    }
  }

  private static class SummaryStandardScheme extends org.apache.thrift.scheme.StandardScheme<Summary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Summary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.Boards = new java.util.ArrayList<Board>(_list16.size);
                Board _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new Board();
                  _elem17.read(iprot);
                  struct.Boards.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setBoardsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.NEs = new java.util.ArrayList<NE>(_list19.size);
                NE _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new NE();
                  _elem20.read(iprot);
                  struct.NEs.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setNEsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOPOLOGIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Topologies = new Topology();
              struct.Topologies.read(iprot);
              struct.setTopologiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.Ports = new java.util.ArrayList<Port>(_list22.size);
                Port _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = new Port();
                  _elem23.read(iprot);
                  struct.Ports.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setPortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Summary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Boards != null) {
        oprot.writeFieldBegin(BOARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Boards.size()));
          for (Board _iter25 : struct.Boards)
          {
            _iter25.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.NEs != null) {
        oprot.writeFieldBegin(NES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.NEs.size()));
          for (NE _iter26 : struct.NEs)
          {
            _iter26.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Topologies != null) {
        oprot.writeFieldBegin(TOPOLOGIES_FIELD_DESC);
        struct.Topologies.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Ports != null) {
        oprot.writeFieldBegin(PORTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Ports.size()));
          for (Port _iter27 : struct.Ports)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SummaryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SummaryTupleScheme getScheme() {
      return new SummaryTupleScheme();
    }
  }

  private static class SummaryTupleScheme extends org.apache.thrift.scheme.TupleScheme<Summary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Summary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBoards()) {
        optionals.set(0);
      }
      if (struct.isSetNEs()) {
        optionals.set(1);
      }
      if (struct.isSetTopologies()) {
        optionals.set(2);
      }
      if (struct.isSetPorts()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBoards()) {
        {
          oprot.writeI32(struct.Boards.size());
          for (Board _iter28 : struct.Boards)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetNEs()) {
        {
          oprot.writeI32(struct.NEs.size());
          for (NE _iter29 : struct.NEs)
          {
            _iter29.write(oprot);
          }
        }
      }
      if (struct.isSetTopologies()) {
        struct.Topologies.write(oprot);
      }
      if (struct.isSetPorts()) {
        {
          oprot.writeI32(struct.Ports.size());
          for (Port _iter30 : struct.Ports)
          {
            _iter30.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Summary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Boards = new java.util.ArrayList<Board>(_list31.size);
          Board _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new Board();
            _elem32.read(iprot);
            struct.Boards.add(_elem32);
          }
        }
        struct.setBoardsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.NEs = new java.util.ArrayList<NE>(_list34.size);
          NE _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = new NE();
            _elem35.read(iprot);
            struct.NEs.add(_elem35);
          }
        }
        struct.setNEsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Topologies = new Topology();
        struct.Topologies.read(iprot);
        struct.setTopologiesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Ports = new java.util.ArrayList<Port>(_list37.size);
          Port _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new Port();
            _elem38.read(iprot);
            struct.Ports.add(_elem38);
          }
        }
        struct.setPortsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

