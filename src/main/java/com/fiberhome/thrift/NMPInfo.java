/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fiberhome.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-20")
public class NMPInfo implements org.apache.thrift.TBase<NMPInfo, NMPInfo._Fields>, java.io.Serializable, Cloneable, Comparable<NMPInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NMPInfo");

  private static final org.apache.thrift.protocol.TField NM_MEMBER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("NmMemberType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NM_MEMBER_MAIN_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("NmMemberMainVersion", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NM_MEMBER_PACK_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("NmMemberPackVersion", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("IP", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("Port", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("NodeName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField INSTALL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("InstallPath", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SCHEMA_INFO__NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("SchemaInfo_Name", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SCHEMA_INFO__USER_FIELD_DESC = new org.apache.thrift.protocol.TField("SchemaInfo_User", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SCHEMA_INFO__PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("SchemaInfo_Password", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DATABASE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("DatabaseType", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DATABASE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("DatabaseVersion", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DB_INSTALL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("DbInstallPath", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NMPInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NMPInfoTupleSchemeFactory();

  public java.lang.String NmMemberType; // required
  public java.lang.String NmMemberMainVersion; // required
  public java.lang.String NmMemberPackVersion; // required
  public java.lang.String IP; // required
  public int Port; // required
  public java.lang.String NodeName; // required
  public java.lang.String InstallPath; // required
  public java.lang.String SchemaInfo_Name; // required
  public java.lang.String SchemaInfo_User; // required
  public java.lang.String SchemaInfo_Password; // required
  public java.lang.String DatabaseType; // required
  public java.lang.String DatabaseVersion; // required
  public java.lang.String DbInstallPath; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NM_MEMBER_TYPE((short)1, "NmMemberType"),
    NM_MEMBER_MAIN_VERSION((short)2, "NmMemberMainVersion"),
    NM_MEMBER_PACK_VERSION((short)3, "NmMemberPackVersion"),
    IP((short)4, "IP"),
    PORT((short)5, "Port"),
    NODE_NAME((short)6, "NodeName"),
    INSTALL_PATH((short)7, "InstallPath"),
    SCHEMA_INFO__NAME((short)8, "SchemaInfo_Name"),
    SCHEMA_INFO__USER((short)9, "SchemaInfo_User"),
    SCHEMA_INFO__PASSWORD((short)10, "SchemaInfo_Password"),
    DATABASE_TYPE((short)11, "DatabaseType"),
    DATABASE_VERSION((short)12, "DatabaseVersion"),
    DB_INSTALL_PATH((short)13, "DbInstallPath");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NM_MEMBER_TYPE
          return NM_MEMBER_TYPE;
        case 2: // NM_MEMBER_MAIN_VERSION
          return NM_MEMBER_MAIN_VERSION;
        case 3: // NM_MEMBER_PACK_VERSION
          return NM_MEMBER_PACK_VERSION;
        case 4: // IP
          return IP;
        case 5: // PORT
          return PORT;
        case 6: // NODE_NAME
          return NODE_NAME;
        case 7: // INSTALL_PATH
          return INSTALL_PATH;
        case 8: // SCHEMA_INFO__NAME
          return SCHEMA_INFO__NAME;
        case 9: // SCHEMA_INFO__USER
          return SCHEMA_INFO__USER;
        case 10: // SCHEMA_INFO__PASSWORD
          return SCHEMA_INFO__PASSWORD;
        case 11: // DATABASE_TYPE
          return DATABASE_TYPE;
        case 12: // DATABASE_VERSION
          return DATABASE_VERSION;
        case 13: // DB_INSTALL_PATH
          return DB_INSTALL_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NM_MEMBER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("NmMemberType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NM_MEMBER_MAIN_VERSION, new org.apache.thrift.meta_data.FieldMetaData("NmMemberMainVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NM_MEMBER_PACK_VERSION, new org.apache.thrift.meta_data.FieldMetaData("NmMemberPackVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("IP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("Port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("NodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTALL_PATH, new org.apache.thrift.meta_data.FieldMetaData("InstallPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHEMA_INFO__NAME, new org.apache.thrift.meta_data.FieldMetaData("SchemaInfo_Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHEMA_INFO__USER, new org.apache.thrift.meta_data.FieldMetaData("SchemaInfo_User", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHEMA_INFO__PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("SchemaInfo_Password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATABASE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("DatabaseType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATABASE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("DatabaseVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_INSTALL_PATH, new org.apache.thrift.meta_data.FieldMetaData("DbInstallPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NMPInfo.class, metaDataMap);
  }

  public NMPInfo() {
  }

  public NMPInfo(
    java.lang.String NmMemberType,
    java.lang.String NmMemberMainVersion,
    java.lang.String NmMemberPackVersion,
    java.lang.String IP,
    int Port,
    java.lang.String NodeName,
    java.lang.String InstallPath,
    java.lang.String SchemaInfo_Name,
    java.lang.String SchemaInfo_User,
    java.lang.String SchemaInfo_Password,
    java.lang.String DatabaseType,
    java.lang.String DatabaseVersion,
    java.lang.String DbInstallPath)
  {
    this();
    this.NmMemberType = NmMemberType;
    this.NmMemberMainVersion = NmMemberMainVersion;
    this.NmMemberPackVersion = NmMemberPackVersion;
    this.IP = IP;
    this.Port = Port;
    setPortIsSet(true);
    this.NodeName = NodeName;
    this.InstallPath = InstallPath;
    this.SchemaInfo_Name = SchemaInfo_Name;
    this.SchemaInfo_User = SchemaInfo_User;
    this.SchemaInfo_Password = SchemaInfo_Password;
    this.DatabaseType = DatabaseType;
    this.DatabaseVersion = DatabaseVersion;
    this.DbInstallPath = DbInstallPath;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NMPInfo(NMPInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNmMemberType()) {
      this.NmMemberType = other.NmMemberType;
    }
    if (other.isSetNmMemberMainVersion()) {
      this.NmMemberMainVersion = other.NmMemberMainVersion;
    }
    if (other.isSetNmMemberPackVersion()) {
      this.NmMemberPackVersion = other.NmMemberPackVersion;
    }
    if (other.isSetIP()) {
      this.IP = other.IP;
    }
    this.Port = other.Port;
    if (other.isSetNodeName()) {
      this.NodeName = other.NodeName;
    }
    if (other.isSetInstallPath()) {
      this.InstallPath = other.InstallPath;
    }
    if (other.isSetSchemaInfo_Name()) {
      this.SchemaInfo_Name = other.SchemaInfo_Name;
    }
    if (other.isSetSchemaInfo_User()) {
      this.SchemaInfo_User = other.SchemaInfo_User;
    }
    if (other.isSetSchemaInfo_Password()) {
      this.SchemaInfo_Password = other.SchemaInfo_Password;
    }
    if (other.isSetDatabaseType()) {
      this.DatabaseType = other.DatabaseType;
    }
    if (other.isSetDatabaseVersion()) {
      this.DatabaseVersion = other.DatabaseVersion;
    }
    if (other.isSetDbInstallPath()) {
      this.DbInstallPath = other.DbInstallPath;
    }
  }

  public NMPInfo deepCopy() {
    return new NMPInfo(this);
  }

  @Override
  public void clear() {
    this.NmMemberType = null;
    this.NmMemberMainVersion = null;
    this.NmMemberPackVersion = null;
    this.IP = null;
    setPortIsSet(false);
    this.Port = 0;
    this.NodeName = null;
    this.InstallPath = null;
    this.SchemaInfo_Name = null;
    this.SchemaInfo_User = null;
    this.SchemaInfo_Password = null;
    this.DatabaseType = null;
    this.DatabaseVersion = null;
    this.DbInstallPath = null;
  }

  public java.lang.String getNmMemberType() {
    return this.NmMemberType;
  }

  public NMPInfo setNmMemberType(java.lang.String NmMemberType) {
    this.NmMemberType = NmMemberType;
    return this;
  }

  public void unsetNmMemberType() {
    this.NmMemberType = null;
  }

  /** Returns true if field NmMemberType is set (has been assigned a value) and false otherwise */
  public boolean isSetNmMemberType() {
    return this.NmMemberType != null;
  }

  public void setNmMemberTypeIsSet(boolean value) {
    if (!value) {
      this.NmMemberType = null;
    }
  }

  public java.lang.String getNmMemberMainVersion() {
    return this.NmMemberMainVersion;
  }

  public NMPInfo setNmMemberMainVersion(java.lang.String NmMemberMainVersion) {
    this.NmMemberMainVersion = NmMemberMainVersion;
    return this;
  }

  public void unsetNmMemberMainVersion() {
    this.NmMemberMainVersion = null;
  }

  /** Returns true if field NmMemberMainVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetNmMemberMainVersion() {
    return this.NmMemberMainVersion != null;
  }

  public void setNmMemberMainVersionIsSet(boolean value) {
    if (!value) {
      this.NmMemberMainVersion = null;
    }
  }

  public java.lang.String getNmMemberPackVersion() {
    return this.NmMemberPackVersion;
  }

  public NMPInfo setNmMemberPackVersion(java.lang.String NmMemberPackVersion) {
    this.NmMemberPackVersion = NmMemberPackVersion;
    return this;
  }

  public void unsetNmMemberPackVersion() {
    this.NmMemberPackVersion = null;
  }

  /** Returns true if field NmMemberPackVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetNmMemberPackVersion() {
    return this.NmMemberPackVersion != null;
  }

  public void setNmMemberPackVersionIsSet(boolean value) {
    if (!value) {
      this.NmMemberPackVersion = null;
    }
  }

  public java.lang.String getIP() {
    return this.IP;
  }

  public NMPInfo setIP(java.lang.String IP) {
    this.IP = IP;
    return this;
  }

  public void unsetIP() {
    this.IP = null;
  }

  /** Returns true if field IP is set (has been assigned a value) and false otherwise */
  public boolean isSetIP() {
    return this.IP != null;
  }

  public void setIPIsSet(boolean value) {
    if (!value) {
      this.IP = null;
    }
  }

  public int getPort() {
    return this.Port;
  }

  public NMPInfo setPort(int Port) {
    this.Port = Port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field Port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public java.lang.String getNodeName() {
    return this.NodeName;
  }

  public NMPInfo setNodeName(java.lang.String NodeName) {
    this.NodeName = NodeName;
    return this;
  }

  public void unsetNodeName() {
    this.NodeName = null;
  }

  /** Returns true if field NodeName is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeName() {
    return this.NodeName != null;
  }

  public void setNodeNameIsSet(boolean value) {
    if (!value) {
      this.NodeName = null;
    }
  }

  public java.lang.String getInstallPath() {
    return this.InstallPath;
  }

  public NMPInfo setInstallPath(java.lang.String InstallPath) {
    this.InstallPath = InstallPath;
    return this;
  }

  public void unsetInstallPath() {
    this.InstallPath = null;
  }

  /** Returns true if field InstallPath is set (has been assigned a value) and false otherwise */
  public boolean isSetInstallPath() {
    return this.InstallPath != null;
  }

  public void setInstallPathIsSet(boolean value) {
    if (!value) {
      this.InstallPath = null;
    }
  }

  public java.lang.String getSchemaInfo_Name() {
    return this.SchemaInfo_Name;
  }

  public NMPInfo setSchemaInfo_Name(java.lang.String SchemaInfo_Name) {
    this.SchemaInfo_Name = SchemaInfo_Name;
    return this;
  }

  public void unsetSchemaInfo_Name() {
    this.SchemaInfo_Name = null;
  }

  /** Returns true if field SchemaInfo_Name is set (has been assigned a value) and false otherwise */
  public boolean isSetSchemaInfo_Name() {
    return this.SchemaInfo_Name != null;
  }

  public void setSchemaInfo_NameIsSet(boolean value) {
    if (!value) {
      this.SchemaInfo_Name = null;
    }
  }

  public java.lang.String getSchemaInfo_User() {
    return this.SchemaInfo_User;
  }

  public NMPInfo setSchemaInfo_User(java.lang.String SchemaInfo_User) {
    this.SchemaInfo_User = SchemaInfo_User;
    return this;
  }

  public void unsetSchemaInfo_User() {
    this.SchemaInfo_User = null;
  }

  /** Returns true if field SchemaInfo_User is set (has been assigned a value) and false otherwise */
  public boolean isSetSchemaInfo_User() {
    return this.SchemaInfo_User != null;
  }

  public void setSchemaInfo_UserIsSet(boolean value) {
    if (!value) {
      this.SchemaInfo_User = null;
    }
  }

  public java.lang.String getSchemaInfo_Password() {
    return this.SchemaInfo_Password;
  }

  public NMPInfo setSchemaInfo_Password(java.lang.String SchemaInfo_Password) {
    this.SchemaInfo_Password = SchemaInfo_Password;
    return this;
  }

  public void unsetSchemaInfo_Password() {
    this.SchemaInfo_Password = null;
  }

  /** Returns true if field SchemaInfo_Password is set (has been assigned a value) and false otherwise */
  public boolean isSetSchemaInfo_Password() {
    return this.SchemaInfo_Password != null;
  }

  public void setSchemaInfo_PasswordIsSet(boolean value) {
    if (!value) {
      this.SchemaInfo_Password = null;
    }
  }

  public java.lang.String getDatabaseType() {
    return this.DatabaseType;
  }

  public NMPInfo setDatabaseType(java.lang.String DatabaseType) {
    this.DatabaseType = DatabaseType;
    return this;
  }

  public void unsetDatabaseType() {
    this.DatabaseType = null;
  }

  /** Returns true if field DatabaseType is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabaseType() {
    return this.DatabaseType != null;
  }

  public void setDatabaseTypeIsSet(boolean value) {
    if (!value) {
      this.DatabaseType = null;
    }
  }

  public java.lang.String getDatabaseVersion() {
    return this.DatabaseVersion;
  }

  public NMPInfo setDatabaseVersion(java.lang.String DatabaseVersion) {
    this.DatabaseVersion = DatabaseVersion;
    return this;
  }

  public void unsetDatabaseVersion() {
    this.DatabaseVersion = null;
  }

  /** Returns true if field DatabaseVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabaseVersion() {
    return this.DatabaseVersion != null;
  }

  public void setDatabaseVersionIsSet(boolean value) {
    if (!value) {
      this.DatabaseVersion = null;
    }
  }

  public java.lang.String getDbInstallPath() {
    return this.DbInstallPath;
  }

  public NMPInfo setDbInstallPath(java.lang.String DbInstallPath) {
    this.DbInstallPath = DbInstallPath;
    return this;
  }

  public void unsetDbInstallPath() {
    this.DbInstallPath = null;
  }

  /** Returns true if field DbInstallPath is set (has been assigned a value) and false otherwise */
  public boolean isSetDbInstallPath() {
    return this.DbInstallPath != null;
  }

  public void setDbInstallPathIsSet(boolean value) {
    if (!value) {
      this.DbInstallPath = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NM_MEMBER_TYPE:
      if (value == null) {
        unsetNmMemberType();
      } else {
        setNmMemberType((java.lang.String)value);
      }
      break;

    case NM_MEMBER_MAIN_VERSION:
      if (value == null) {
        unsetNmMemberMainVersion();
      } else {
        setNmMemberMainVersion((java.lang.String)value);
      }
      break;

    case NM_MEMBER_PACK_VERSION:
      if (value == null) {
        unsetNmMemberPackVersion();
      } else {
        setNmMemberPackVersion((java.lang.String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIP();
      } else {
        setIP((java.lang.String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((java.lang.Integer)value);
      }
      break;

    case NODE_NAME:
      if (value == null) {
        unsetNodeName();
      } else {
        setNodeName((java.lang.String)value);
      }
      break;

    case INSTALL_PATH:
      if (value == null) {
        unsetInstallPath();
      } else {
        setInstallPath((java.lang.String)value);
      }
      break;

    case SCHEMA_INFO__NAME:
      if (value == null) {
        unsetSchemaInfo_Name();
      } else {
        setSchemaInfo_Name((java.lang.String)value);
      }
      break;

    case SCHEMA_INFO__USER:
      if (value == null) {
        unsetSchemaInfo_User();
      } else {
        setSchemaInfo_User((java.lang.String)value);
      }
      break;

    case SCHEMA_INFO__PASSWORD:
      if (value == null) {
        unsetSchemaInfo_Password();
      } else {
        setSchemaInfo_Password((java.lang.String)value);
      }
      break;

    case DATABASE_TYPE:
      if (value == null) {
        unsetDatabaseType();
      } else {
        setDatabaseType((java.lang.String)value);
      }
      break;

    case DATABASE_VERSION:
      if (value == null) {
        unsetDatabaseVersion();
      } else {
        setDatabaseVersion((java.lang.String)value);
      }
      break;

    case DB_INSTALL_PATH:
      if (value == null) {
        unsetDbInstallPath();
      } else {
        setDbInstallPath((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NM_MEMBER_TYPE:
      return getNmMemberType();

    case NM_MEMBER_MAIN_VERSION:
      return getNmMemberMainVersion();

    case NM_MEMBER_PACK_VERSION:
      return getNmMemberPackVersion();

    case IP:
      return getIP();

    case PORT:
      return getPort();

    case NODE_NAME:
      return getNodeName();

    case INSTALL_PATH:
      return getInstallPath();

    case SCHEMA_INFO__NAME:
      return getSchemaInfo_Name();

    case SCHEMA_INFO__USER:
      return getSchemaInfo_User();

    case SCHEMA_INFO__PASSWORD:
      return getSchemaInfo_Password();

    case DATABASE_TYPE:
      return getDatabaseType();

    case DATABASE_VERSION:
      return getDatabaseVersion();

    case DB_INSTALL_PATH:
      return getDbInstallPath();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NM_MEMBER_TYPE:
      return isSetNmMemberType();
    case NM_MEMBER_MAIN_VERSION:
      return isSetNmMemberMainVersion();
    case NM_MEMBER_PACK_VERSION:
      return isSetNmMemberPackVersion();
    case IP:
      return isSetIP();
    case PORT:
      return isSetPort();
    case NODE_NAME:
      return isSetNodeName();
    case INSTALL_PATH:
      return isSetInstallPath();
    case SCHEMA_INFO__NAME:
      return isSetSchemaInfo_Name();
    case SCHEMA_INFO__USER:
      return isSetSchemaInfo_User();
    case SCHEMA_INFO__PASSWORD:
      return isSetSchemaInfo_Password();
    case DATABASE_TYPE:
      return isSetDatabaseType();
    case DATABASE_VERSION:
      return isSetDatabaseVersion();
    case DB_INSTALL_PATH:
      return isSetDbInstallPath();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NMPInfo)
      return this.equals((NMPInfo)that);
    return false;
  }

  public boolean equals(NMPInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_NmMemberType = true && this.isSetNmMemberType();
    boolean that_present_NmMemberType = true && that.isSetNmMemberType();
    if (this_present_NmMemberType || that_present_NmMemberType) {
      if (!(this_present_NmMemberType && that_present_NmMemberType))
        return false;
      if (!this.NmMemberType.equals(that.NmMemberType))
        return false;
    }

    boolean this_present_NmMemberMainVersion = true && this.isSetNmMemberMainVersion();
    boolean that_present_NmMemberMainVersion = true && that.isSetNmMemberMainVersion();
    if (this_present_NmMemberMainVersion || that_present_NmMemberMainVersion) {
      if (!(this_present_NmMemberMainVersion && that_present_NmMemberMainVersion))
        return false;
      if (!this.NmMemberMainVersion.equals(that.NmMemberMainVersion))
        return false;
    }

    boolean this_present_NmMemberPackVersion = true && this.isSetNmMemberPackVersion();
    boolean that_present_NmMemberPackVersion = true && that.isSetNmMemberPackVersion();
    if (this_present_NmMemberPackVersion || that_present_NmMemberPackVersion) {
      if (!(this_present_NmMemberPackVersion && that_present_NmMemberPackVersion))
        return false;
      if (!this.NmMemberPackVersion.equals(that.NmMemberPackVersion))
        return false;
    }

    boolean this_present_IP = true && this.isSetIP();
    boolean that_present_IP = true && that.isSetIP();
    if (this_present_IP || that_present_IP) {
      if (!(this_present_IP && that_present_IP))
        return false;
      if (!this.IP.equals(that.IP))
        return false;
    }

    boolean this_present_Port = true;
    boolean that_present_Port = true;
    if (this_present_Port || that_present_Port) {
      if (!(this_present_Port && that_present_Port))
        return false;
      if (this.Port != that.Port)
        return false;
    }

    boolean this_present_NodeName = true && this.isSetNodeName();
    boolean that_present_NodeName = true && that.isSetNodeName();
    if (this_present_NodeName || that_present_NodeName) {
      if (!(this_present_NodeName && that_present_NodeName))
        return false;
      if (!this.NodeName.equals(that.NodeName))
        return false;
    }

    boolean this_present_InstallPath = true && this.isSetInstallPath();
    boolean that_present_InstallPath = true && that.isSetInstallPath();
    if (this_present_InstallPath || that_present_InstallPath) {
      if (!(this_present_InstallPath && that_present_InstallPath))
        return false;
      if (!this.InstallPath.equals(that.InstallPath))
        return false;
    }

    boolean this_present_SchemaInfo_Name = true && this.isSetSchemaInfo_Name();
    boolean that_present_SchemaInfo_Name = true && that.isSetSchemaInfo_Name();
    if (this_present_SchemaInfo_Name || that_present_SchemaInfo_Name) {
      if (!(this_present_SchemaInfo_Name && that_present_SchemaInfo_Name))
        return false;
      if (!this.SchemaInfo_Name.equals(that.SchemaInfo_Name))
        return false;
    }

    boolean this_present_SchemaInfo_User = true && this.isSetSchemaInfo_User();
    boolean that_present_SchemaInfo_User = true && that.isSetSchemaInfo_User();
    if (this_present_SchemaInfo_User || that_present_SchemaInfo_User) {
      if (!(this_present_SchemaInfo_User && that_present_SchemaInfo_User))
        return false;
      if (!this.SchemaInfo_User.equals(that.SchemaInfo_User))
        return false;
    }

    boolean this_present_SchemaInfo_Password = true && this.isSetSchemaInfo_Password();
    boolean that_present_SchemaInfo_Password = true && that.isSetSchemaInfo_Password();
    if (this_present_SchemaInfo_Password || that_present_SchemaInfo_Password) {
      if (!(this_present_SchemaInfo_Password && that_present_SchemaInfo_Password))
        return false;
      if (!this.SchemaInfo_Password.equals(that.SchemaInfo_Password))
        return false;
    }

    boolean this_present_DatabaseType = true && this.isSetDatabaseType();
    boolean that_present_DatabaseType = true && that.isSetDatabaseType();
    if (this_present_DatabaseType || that_present_DatabaseType) {
      if (!(this_present_DatabaseType && that_present_DatabaseType))
        return false;
      if (!this.DatabaseType.equals(that.DatabaseType))
        return false;
    }

    boolean this_present_DatabaseVersion = true && this.isSetDatabaseVersion();
    boolean that_present_DatabaseVersion = true && that.isSetDatabaseVersion();
    if (this_present_DatabaseVersion || that_present_DatabaseVersion) {
      if (!(this_present_DatabaseVersion && that_present_DatabaseVersion))
        return false;
      if (!this.DatabaseVersion.equals(that.DatabaseVersion))
        return false;
    }

    boolean this_present_DbInstallPath = true && this.isSetDbInstallPath();
    boolean that_present_DbInstallPath = true && that.isSetDbInstallPath();
    if (this_present_DbInstallPath || that_present_DbInstallPath) {
      if (!(this_present_DbInstallPath && that_present_DbInstallPath))
        return false;
      if (!this.DbInstallPath.equals(that.DbInstallPath))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNmMemberType()) ? 131071 : 524287);
    if (isSetNmMemberType())
      hashCode = hashCode * 8191 + NmMemberType.hashCode();

    hashCode = hashCode * 8191 + ((isSetNmMemberMainVersion()) ? 131071 : 524287);
    if (isSetNmMemberMainVersion())
      hashCode = hashCode * 8191 + NmMemberMainVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetNmMemberPackVersion()) ? 131071 : 524287);
    if (isSetNmMemberPackVersion())
      hashCode = hashCode * 8191 + NmMemberPackVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetIP()) ? 131071 : 524287);
    if (isSetIP())
      hashCode = hashCode * 8191 + IP.hashCode();

    hashCode = hashCode * 8191 + Port;

    hashCode = hashCode * 8191 + ((isSetNodeName()) ? 131071 : 524287);
    if (isSetNodeName())
      hashCode = hashCode * 8191 + NodeName.hashCode();

    hashCode = hashCode * 8191 + ((isSetInstallPath()) ? 131071 : 524287);
    if (isSetInstallPath())
      hashCode = hashCode * 8191 + InstallPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchemaInfo_Name()) ? 131071 : 524287);
    if (isSetSchemaInfo_Name())
      hashCode = hashCode * 8191 + SchemaInfo_Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchemaInfo_User()) ? 131071 : 524287);
    if (isSetSchemaInfo_User())
      hashCode = hashCode * 8191 + SchemaInfo_User.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchemaInfo_Password()) ? 131071 : 524287);
    if (isSetSchemaInfo_Password())
      hashCode = hashCode * 8191 + SchemaInfo_Password.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatabaseType()) ? 131071 : 524287);
    if (isSetDatabaseType())
      hashCode = hashCode * 8191 + DatabaseType.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatabaseVersion()) ? 131071 : 524287);
    if (isSetDatabaseVersion())
      hashCode = hashCode * 8191 + DatabaseVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetDbInstallPath()) ? 131071 : 524287);
    if (isSetDbInstallPath())
      hashCode = hashCode * 8191 + DbInstallPath.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NMPInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNmMemberType()).compareTo(other.isSetNmMemberType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNmMemberType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NmMemberType, other.NmMemberType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNmMemberMainVersion()).compareTo(other.isSetNmMemberMainVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNmMemberMainVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NmMemberMainVersion, other.NmMemberMainVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNmMemberPackVersion()).compareTo(other.isSetNmMemberPackVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNmMemberPackVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NmMemberPackVersion, other.NmMemberPackVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIP()).compareTo(other.isSetIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IP, other.IP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Port, other.Port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodeName()).compareTo(other.isSetNodeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NodeName, other.NodeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInstallPath()).compareTo(other.isSetInstallPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstallPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.InstallPath, other.InstallPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSchemaInfo_Name()).compareTo(other.isSetSchemaInfo_Name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchemaInfo_Name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SchemaInfo_Name, other.SchemaInfo_Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSchemaInfo_User()).compareTo(other.isSetSchemaInfo_User());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchemaInfo_User()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SchemaInfo_User, other.SchemaInfo_User);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSchemaInfo_Password()).compareTo(other.isSetSchemaInfo_Password());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchemaInfo_Password()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SchemaInfo_Password, other.SchemaInfo_Password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDatabaseType()).compareTo(other.isSetDatabaseType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabaseType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DatabaseType, other.DatabaseType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDatabaseVersion()).compareTo(other.isSetDatabaseVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabaseVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DatabaseVersion, other.DatabaseVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDbInstallPath()).compareTo(other.isSetDbInstallPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbInstallPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DbInstallPath, other.DbInstallPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NMPInfo(");
    boolean first = true;

    sb.append("NmMemberType:");
    if (this.NmMemberType == null) {
      sb.append("null");
    } else {
      sb.append(this.NmMemberType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NmMemberMainVersion:");
    if (this.NmMemberMainVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.NmMemberMainVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NmMemberPackVersion:");
    if (this.NmMemberPackVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.NmMemberPackVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IP:");
    if (this.IP == null) {
      sb.append("null");
    } else {
      sb.append(this.IP);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Port:");
    sb.append(this.Port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NodeName:");
    if (this.NodeName == null) {
      sb.append("null");
    } else {
      sb.append(this.NodeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("InstallPath:");
    if (this.InstallPath == null) {
      sb.append("null");
    } else {
      sb.append(this.InstallPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SchemaInfo_Name:");
    if (this.SchemaInfo_Name == null) {
      sb.append("null");
    } else {
      sb.append(this.SchemaInfo_Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SchemaInfo_User:");
    if (this.SchemaInfo_User == null) {
      sb.append("null");
    } else {
      sb.append(this.SchemaInfo_User);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SchemaInfo_Password:");
    if (this.SchemaInfo_Password == null) {
      sb.append("null");
    } else {
      sb.append(this.SchemaInfo_Password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DatabaseType:");
    if (this.DatabaseType == null) {
      sb.append("null");
    } else {
      sb.append(this.DatabaseType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DatabaseVersion:");
    if (this.DatabaseVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.DatabaseVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DbInstallPath:");
    if (this.DbInstallPath == null) {
      sb.append("null");
    } else {
      sb.append(this.DbInstallPath);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NMPInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NMPInfoStandardScheme getScheme() {
      return new NMPInfoStandardScheme();
    }
  }

  private static class NMPInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<NMPInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NMPInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NM_MEMBER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NmMemberType = iprot.readString();
              struct.setNmMemberTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NM_MEMBER_MAIN_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NmMemberMainVersion = iprot.readString();
              struct.setNmMemberMainVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NM_MEMBER_PACK_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NmMemberPackVersion = iprot.readString();
              struct.setNmMemberPackVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.IP = iprot.readString();
              struct.setIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NODE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.NodeName = iprot.readString();
              struct.setNodeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INSTALL_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.InstallPath = iprot.readString();
              struct.setInstallPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SCHEMA_INFO__NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SchemaInfo_Name = iprot.readString();
              struct.setSchemaInfo_NameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SCHEMA_INFO__USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SchemaInfo_User = iprot.readString();
              struct.setSchemaInfo_UserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SCHEMA_INFO__PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SchemaInfo_Password = iprot.readString();
              struct.setSchemaInfo_PasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DATABASE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DatabaseType = iprot.readString();
              struct.setDatabaseTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DATABASE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DatabaseVersion = iprot.readString();
              struct.setDatabaseVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DB_INSTALL_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DbInstallPath = iprot.readString();
              struct.setDbInstallPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NMPInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.NmMemberType != null) {
        oprot.writeFieldBegin(NM_MEMBER_TYPE_FIELD_DESC);
        oprot.writeString(struct.NmMemberType);
        oprot.writeFieldEnd();
      }
      if (struct.NmMemberMainVersion != null) {
        oprot.writeFieldBegin(NM_MEMBER_MAIN_VERSION_FIELD_DESC);
        oprot.writeString(struct.NmMemberMainVersion);
        oprot.writeFieldEnd();
      }
      if (struct.NmMemberPackVersion != null) {
        oprot.writeFieldBegin(NM_MEMBER_PACK_VERSION_FIELD_DESC);
        oprot.writeString(struct.NmMemberPackVersion);
        oprot.writeFieldEnd();
      }
      if (struct.IP != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.IP);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.Port);
      oprot.writeFieldEnd();
      if (struct.NodeName != null) {
        oprot.writeFieldBegin(NODE_NAME_FIELD_DESC);
        oprot.writeString(struct.NodeName);
        oprot.writeFieldEnd();
      }
      if (struct.InstallPath != null) {
        oprot.writeFieldBegin(INSTALL_PATH_FIELD_DESC);
        oprot.writeString(struct.InstallPath);
        oprot.writeFieldEnd();
      }
      if (struct.SchemaInfo_Name != null) {
        oprot.writeFieldBegin(SCHEMA_INFO__NAME_FIELD_DESC);
        oprot.writeString(struct.SchemaInfo_Name);
        oprot.writeFieldEnd();
      }
      if (struct.SchemaInfo_User != null) {
        oprot.writeFieldBegin(SCHEMA_INFO__USER_FIELD_DESC);
        oprot.writeString(struct.SchemaInfo_User);
        oprot.writeFieldEnd();
      }
      if (struct.SchemaInfo_Password != null) {
        oprot.writeFieldBegin(SCHEMA_INFO__PASSWORD_FIELD_DESC);
        oprot.writeString(struct.SchemaInfo_Password);
        oprot.writeFieldEnd();
      }
      if (struct.DatabaseType != null) {
        oprot.writeFieldBegin(DATABASE_TYPE_FIELD_DESC);
        oprot.writeString(struct.DatabaseType);
        oprot.writeFieldEnd();
      }
      if (struct.DatabaseVersion != null) {
        oprot.writeFieldBegin(DATABASE_VERSION_FIELD_DESC);
        oprot.writeString(struct.DatabaseVersion);
        oprot.writeFieldEnd();
      }
      if (struct.DbInstallPath != null) {
        oprot.writeFieldBegin(DB_INSTALL_PATH_FIELD_DESC);
        oprot.writeString(struct.DbInstallPath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NMPInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NMPInfoTupleScheme getScheme() {
      return new NMPInfoTupleScheme();
    }
  }

  private static class NMPInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<NMPInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NMPInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNmMemberType()) {
        optionals.set(0);
      }
      if (struct.isSetNmMemberMainVersion()) {
        optionals.set(1);
      }
      if (struct.isSetNmMemberPackVersion()) {
        optionals.set(2);
      }
      if (struct.isSetIP()) {
        optionals.set(3);
      }
      if (struct.isSetPort()) {
        optionals.set(4);
      }
      if (struct.isSetNodeName()) {
        optionals.set(5);
      }
      if (struct.isSetInstallPath()) {
        optionals.set(6);
      }
      if (struct.isSetSchemaInfo_Name()) {
        optionals.set(7);
      }
      if (struct.isSetSchemaInfo_User()) {
        optionals.set(8);
      }
      if (struct.isSetSchemaInfo_Password()) {
        optionals.set(9);
      }
      if (struct.isSetDatabaseType()) {
        optionals.set(10);
      }
      if (struct.isSetDatabaseVersion()) {
        optionals.set(11);
      }
      if (struct.isSetDbInstallPath()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetNmMemberType()) {
        oprot.writeString(struct.NmMemberType);
      }
      if (struct.isSetNmMemberMainVersion()) {
        oprot.writeString(struct.NmMemberMainVersion);
      }
      if (struct.isSetNmMemberPackVersion()) {
        oprot.writeString(struct.NmMemberPackVersion);
      }
      if (struct.isSetIP()) {
        oprot.writeString(struct.IP);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.Port);
      }
      if (struct.isSetNodeName()) {
        oprot.writeString(struct.NodeName);
      }
      if (struct.isSetInstallPath()) {
        oprot.writeString(struct.InstallPath);
      }
      if (struct.isSetSchemaInfo_Name()) {
        oprot.writeString(struct.SchemaInfo_Name);
      }
      if (struct.isSetSchemaInfo_User()) {
        oprot.writeString(struct.SchemaInfo_User);
      }
      if (struct.isSetSchemaInfo_Password()) {
        oprot.writeString(struct.SchemaInfo_Password);
      }
      if (struct.isSetDatabaseType()) {
        oprot.writeString(struct.DatabaseType);
      }
      if (struct.isSetDatabaseVersion()) {
        oprot.writeString(struct.DatabaseVersion);
      }
      if (struct.isSetDbInstallPath()) {
        oprot.writeString(struct.DbInstallPath);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NMPInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.NmMemberType = iprot.readString();
        struct.setNmMemberTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.NmMemberMainVersion = iprot.readString();
        struct.setNmMemberMainVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.NmMemberPackVersion = iprot.readString();
        struct.setNmMemberPackVersionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.IP = iprot.readString();
        struct.setIPIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(5)) {
        struct.NodeName = iprot.readString();
        struct.setNodeNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.InstallPath = iprot.readString();
        struct.setInstallPathIsSet(true);
      }
      if (incoming.get(7)) {
        struct.SchemaInfo_Name = iprot.readString();
        struct.setSchemaInfo_NameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.SchemaInfo_User = iprot.readString();
        struct.setSchemaInfo_UserIsSet(true);
      }
      if (incoming.get(9)) {
        struct.SchemaInfo_Password = iprot.readString();
        struct.setSchemaInfo_PasswordIsSet(true);
      }
      if (incoming.get(10)) {
        struct.DatabaseType = iprot.readString();
        struct.setDatabaseTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.DatabaseVersion = iprot.readString();
        struct.setDatabaseVersionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.DbInstallPath = iprot.readString();
        struct.setDbInstallPathIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

