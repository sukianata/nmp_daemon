/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fiberhome.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-20")
public class SystemStatus implements org.apache.thrift.TBase<SystemStatus, SystemStatus._Fields>, java.io.Serializable, Cloneable, Comparable<SystemStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SystemStatus");

  private static final org.apache.thrift.protocol.TField CPU__PERCENTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("CPU_Percentage", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField MEMORY_CAPACITY__USED_FIELD_DESC = new org.apache.thrift.protocol.TField("MemoryCapacity_Used", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MEMORY_CAPACITY__TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("MemoryCapacity_Total", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DISK_CAPACITY__USED_FIELD_DESC = new org.apache.thrift.protocol.TField("DiskCapacity_Used", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DISK_CAPACITY__TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("DiskCapacity_Total", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENT_PROC_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("CurrentProcCPU", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField DISK_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("DiskInfos", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SystemStatusStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SystemStatusTupleSchemeFactory();

  public double CPU_Percentage; // required
  public long MemoryCapacity_Used; // required
  public long MemoryCapacity_Total; // required
  public long DiskCapacity_Used; // required
  public long DiskCapacity_Total; // required
  public double CurrentProcCPU; // required
  public java.util.List<DiskInfo> DiskInfos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CPU__PERCENTAGE((short)1, "CPU_Percentage"),
    MEMORY_CAPACITY__USED((short)2, "MemoryCapacity_Used"),
    MEMORY_CAPACITY__TOTAL((short)3, "MemoryCapacity_Total"),
    DISK_CAPACITY__USED((short)4, "DiskCapacity_Used"),
    DISK_CAPACITY__TOTAL((short)5, "DiskCapacity_Total"),
    CURRENT_PROC_CPU((short)6, "CurrentProcCPU"),
    DISK_INFOS((short)7, "DiskInfos");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CPU__PERCENTAGE
          return CPU__PERCENTAGE;
        case 2: // MEMORY_CAPACITY__USED
          return MEMORY_CAPACITY__USED;
        case 3: // MEMORY_CAPACITY__TOTAL
          return MEMORY_CAPACITY__TOTAL;
        case 4: // DISK_CAPACITY__USED
          return DISK_CAPACITY__USED;
        case 5: // DISK_CAPACITY__TOTAL
          return DISK_CAPACITY__TOTAL;
        case 6: // CURRENT_PROC_CPU
          return CURRENT_PROC_CPU;
        case 7: // DISK_INFOS
          return DISK_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CPU_PERCENTAGE_ISSET_ID = 0;
  private static final int __MEMORYCAPACITY_USED_ISSET_ID = 1;
  private static final int __MEMORYCAPACITY_TOTAL_ISSET_ID = 2;
  private static final int __DISKCAPACITY_USED_ISSET_ID = 3;
  private static final int __DISKCAPACITY_TOTAL_ISSET_ID = 4;
  private static final int __CURRENTPROCCPU_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CPU__PERCENTAGE, new org.apache.thrift.meta_data.FieldMetaData("CPU_Percentage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEMORY_CAPACITY__USED, new org.apache.thrift.meta_data.FieldMetaData("MemoryCapacity_Used", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEMORY_CAPACITY__TOTAL, new org.apache.thrift.meta_data.FieldMetaData("MemoryCapacity_Total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISK_CAPACITY__USED, new org.apache.thrift.meta_data.FieldMetaData("DiskCapacity_Used", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISK_CAPACITY__TOTAL, new org.apache.thrift.meta_data.FieldMetaData("DiskCapacity_Total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CURRENT_PROC_CPU, new org.apache.thrift.meta_data.FieldMetaData("CurrentProcCPU", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISK_INFOS, new org.apache.thrift.meta_data.FieldMetaData("DiskInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "DiskInfo"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SystemStatus.class, metaDataMap);
  }

  public SystemStatus() {
  }

  public SystemStatus(
    double CPU_Percentage,
    long MemoryCapacity_Used,
    long MemoryCapacity_Total,
    long DiskCapacity_Used,
    long DiskCapacity_Total,
    double CurrentProcCPU,
    java.util.List<DiskInfo> DiskInfos)
  {
    this();
    this.CPU_Percentage = CPU_Percentage;
    setCPU_PercentageIsSet(true);
    this.MemoryCapacity_Used = MemoryCapacity_Used;
    setMemoryCapacity_UsedIsSet(true);
    this.MemoryCapacity_Total = MemoryCapacity_Total;
    setMemoryCapacity_TotalIsSet(true);
    this.DiskCapacity_Used = DiskCapacity_Used;
    setDiskCapacity_UsedIsSet(true);
    this.DiskCapacity_Total = DiskCapacity_Total;
    setDiskCapacity_TotalIsSet(true);
    this.CurrentProcCPU = CurrentProcCPU;
    setCurrentProcCPUIsSet(true);
    this.DiskInfos = DiskInfos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SystemStatus(SystemStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    this.CPU_Percentage = other.CPU_Percentage;
    this.MemoryCapacity_Used = other.MemoryCapacity_Used;
    this.MemoryCapacity_Total = other.MemoryCapacity_Total;
    this.DiskCapacity_Used = other.DiskCapacity_Used;
    this.DiskCapacity_Total = other.DiskCapacity_Total;
    this.CurrentProcCPU = other.CurrentProcCPU;
    if (other.isSetDiskInfos()) {
      java.util.List<DiskInfo> __this__DiskInfos = new java.util.ArrayList<DiskInfo>(other.DiskInfos.size());
      for (DiskInfo other_element : other.DiskInfos) {
        __this__DiskInfos.add(other_element);
      }
      this.DiskInfos = __this__DiskInfos;
    }
  }

  public SystemStatus deepCopy() {
    return new SystemStatus(this);
  }

  @Override
  public void clear() {
    setCPU_PercentageIsSet(false);
    this.CPU_Percentage = 0.0;
    setMemoryCapacity_UsedIsSet(false);
    this.MemoryCapacity_Used = 0;
    setMemoryCapacity_TotalIsSet(false);
    this.MemoryCapacity_Total = 0;
    setDiskCapacity_UsedIsSet(false);
    this.DiskCapacity_Used = 0;
    setDiskCapacity_TotalIsSet(false);
    this.DiskCapacity_Total = 0;
    setCurrentProcCPUIsSet(false);
    this.CurrentProcCPU = 0.0;
    this.DiskInfos = null;
  }

  public double getCPU_Percentage() {
    return this.CPU_Percentage;
  }

  public SystemStatus setCPU_Percentage(double CPU_Percentage) {
    this.CPU_Percentage = CPU_Percentage;
    setCPU_PercentageIsSet(true);
    return this;
  }

  public void unsetCPU_Percentage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPU_PERCENTAGE_ISSET_ID);
  }

  /** Returns true if field CPU_Percentage is set (has been assigned a value) and false otherwise */
  public boolean isSetCPU_Percentage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPU_PERCENTAGE_ISSET_ID);
  }

  public void setCPU_PercentageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPU_PERCENTAGE_ISSET_ID, value);
  }

  public long getMemoryCapacity_Used() {
    return this.MemoryCapacity_Used;
  }

  public SystemStatus setMemoryCapacity_Used(long MemoryCapacity_Used) {
    this.MemoryCapacity_Used = MemoryCapacity_Used;
    setMemoryCapacity_UsedIsSet(true);
    return this;
  }

  public void unsetMemoryCapacity_Used() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEMORYCAPACITY_USED_ISSET_ID);
  }

  /** Returns true if field MemoryCapacity_Used is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryCapacity_Used() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEMORYCAPACITY_USED_ISSET_ID);
  }

  public void setMemoryCapacity_UsedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEMORYCAPACITY_USED_ISSET_ID, value);
  }

  public long getMemoryCapacity_Total() {
    return this.MemoryCapacity_Total;
  }

  public SystemStatus setMemoryCapacity_Total(long MemoryCapacity_Total) {
    this.MemoryCapacity_Total = MemoryCapacity_Total;
    setMemoryCapacity_TotalIsSet(true);
    return this;
  }

  public void unsetMemoryCapacity_Total() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEMORYCAPACITY_TOTAL_ISSET_ID);
  }

  /** Returns true if field MemoryCapacity_Total is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryCapacity_Total() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEMORYCAPACITY_TOTAL_ISSET_ID);
  }

  public void setMemoryCapacity_TotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEMORYCAPACITY_TOTAL_ISSET_ID, value);
  }

  public long getDiskCapacity_Used() {
    return this.DiskCapacity_Used;
  }

  public SystemStatus setDiskCapacity_Used(long DiskCapacity_Used) {
    this.DiskCapacity_Used = DiskCapacity_Used;
    setDiskCapacity_UsedIsSet(true);
    return this;
  }

  public void unsetDiskCapacity_Used() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISKCAPACITY_USED_ISSET_ID);
  }

  /** Returns true if field DiskCapacity_Used is set (has been assigned a value) and false otherwise */
  public boolean isSetDiskCapacity_Used() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISKCAPACITY_USED_ISSET_ID);
  }

  public void setDiskCapacity_UsedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISKCAPACITY_USED_ISSET_ID, value);
  }

  public long getDiskCapacity_Total() {
    return this.DiskCapacity_Total;
  }

  public SystemStatus setDiskCapacity_Total(long DiskCapacity_Total) {
    this.DiskCapacity_Total = DiskCapacity_Total;
    setDiskCapacity_TotalIsSet(true);
    return this;
  }

  public void unsetDiskCapacity_Total() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISKCAPACITY_TOTAL_ISSET_ID);
  }

  /** Returns true if field DiskCapacity_Total is set (has been assigned a value) and false otherwise */
  public boolean isSetDiskCapacity_Total() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISKCAPACITY_TOTAL_ISSET_ID);
  }

  public void setDiskCapacity_TotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISKCAPACITY_TOTAL_ISSET_ID, value);
  }

  public double getCurrentProcCPU() {
    return this.CurrentProcCPU;
  }

  public SystemStatus setCurrentProcCPU(double CurrentProcCPU) {
    this.CurrentProcCPU = CurrentProcCPU;
    setCurrentProcCPUIsSet(true);
    return this;
  }

  public void unsetCurrentProcCPU() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENTPROCCPU_ISSET_ID);
  }

  /** Returns true if field CurrentProcCPU is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentProcCPU() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENTPROCCPU_ISSET_ID);
  }

  public void setCurrentProcCPUIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENTPROCCPU_ISSET_ID, value);
  }

  public int getDiskInfosSize() {
    return (this.DiskInfos == null) ? 0 : this.DiskInfos.size();
  }

  public java.util.Iterator<DiskInfo> getDiskInfosIterator() {
    return (this.DiskInfos == null) ? null : this.DiskInfos.iterator();
  }

  public void addToDiskInfos(DiskInfo elem) {
    if (this.DiskInfos == null) {
      this.DiskInfos = new java.util.ArrayList<DiskInfo>();
    }
    this.DiskInfos.add(elem);
  }

  public java.util.List<DiskInfo> getDiskInfos() {
    return this.DiskInfos;
  }

  public SystemStatus setDiskInfos(java.util.List<DiskInfo> DiskInfos) {
    this.DiskInfos = DiskInfos;
    return this;
  }

  public void unsetDiskInfos() {
    this.DiskInfos = null;
  }

  /** Returns true if field DiskInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetDiskInfos() {
    return this.DiskInfos != null;
  }

  public void setDiskInfosIsSet(boolean value) {
    if (!value) {
      this.DiskInfos = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CPU__PERCENTAGE:
      if (value == null) {
        unsetCPU_Percentage();
      } else {
        setCPU_Percentage((java.lang.Double)value);
      }
      break;

    case MEMORY_CAPACITY__USED:
      if (value == null) {
        unsetMemoryCapacity_Used();
      } else {
        setMemoryCapacity_Used((java.lang.Long)value);
      }
      break;

    case MEMORY_CAPACITY__TOTAL:
      if (value == null) {
        unsetMemoryCapacity_Total();
      } else {
        setMemoryCapacity_Total((java.lang.Long)value);
      }
      break;

    case DISK_CAPACITY__USED:
      if (value == null) {
        unsetDiskCapacity_Used();
      } else {
        setDiskCapacity_Used((java.lang.Long)value);
      }
      break;

    case DISK_CAPACITY__TOTAL:
      if (value == null) {
        unsetDiskCapacity_Total();
      } else {
        setDiskCapacity_Total((java.lang.Long)value);
      }
      break;

    case CURRENT_PROC_CPU:
      if (value == null) {
        unsetCurrentProcCPU();
      } else {
        setCurrentProcCPU((java.lang.Double)value);
      }
      break;

    case DISK_INFOS:
      if (value == null) {
        unsetDiskInfos();
      } else {
        setDiskInfos((java.util.List<DiskInfo>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CPU__PERCENTAGE:
      return getCPU_Percentage();

    case MEMORY_CAPACITY__USED:
      return getMemoryCapacity_Used();

    case MEMORY_CAPACITY__TOTAL:
      return getMemoryCapacity_Total();

    case DISK_CAPACITY__USED:
      return getDiskCapacity_Used();

    case DISK_CAPACITY__TOTAL:
      return getDiskCapacity_Total();

    case CURRENT_PROC_CPU:
      return getCurrentProcCPU();

    case DISK_INFOS:
      return getDiskInfos();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CPU__PERCENTAGE:
      return isSetCPU_Percentage();
    case MEMORY_CAPACITY__USED:
      return isSetMemoryCapacity_Used();
    case MEMORY_CAPACITY__TOTAL:
      return isSetMemoryCapacity_Total();
    case DISK_CAPACITY__USED:
      return isSetDiskCapacity_Used();
    case DISK_CAPACITY__TOTAL:
      return isSetDiskCapacity_Total();
    case CURRENT_PROC_CPU:
      return isSetCurrentProcCPU();
    case DISK_INFOS:
      return isSetDiskInfos();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SystemStatus)
      return this.equals((SystemStatus)that);
    return false;
  }

  public boolean equals(SystemStatus that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_CPU_Percentage = true;
    boolean that_present_CPU_Percentage = true;
    if (this_present_CPU_Percentage || that_present_CPU_Percentage) {
      if (!(this_present_CPU_Percentage && that_present_CPU_Percentage))
        return false;
      if (this.CPU_Percentage != that.CPU_Percentage)
        return false;
    }

    boolean this_present_MemoryCapacity_Used = true;
    boolean that_present_MemoryCapacity_Used = true;
    if (this_present_MemoryCapacity_Used || that_present_MemoryCapacity_Used) {
      if (!(this_present_MemoryCapacity_Used && that_present_MemoryCapacity_Used))
        return false;
      if (this.MemoryCapacity_Used != that.MemoryCapacity_Used)
        return false;
    }

    boolean this_present_MemoryCapacity_Total = true;
    boolean that_present_MemoryCapacity_Total = true;
    if (this_present_MemoryCapacity_Total || that_present_MemoryCapacity_Total) {
      if (!(this_present_MemoryCapacity_Total && that_present_MemoryCapacity_Total))
        return false;
      if (this.MemoryCapacity_Total != that.MemoryCapacity_Total)
        return false;
    }

    boolean this_present_DiskCapacity_Used = true;
    boolean that_present_DiskCapacity_Used = true;
    if (this_present_DiskCapacity_Used || that_present_DiskCapacity_Used) {
      if (!(this_present_DiskCapacity_Used && that_present_DiskCapacity_Used))
        return false;
      if (this.DiskCapacity_Used != that.DiskCapacity_Used)
        return false;
    }

    boolean this_present_DiskCapacity_Total = true;
    boolean that_present_DiskCapacity_Total = true;
    if (this_present_DiskCapacity_Total || that_present_DiskCapacity_Total) {
      if (!(this_present_DiskCapacity_Total && that_present_DiskCapacity_Total))
        return false;
      if (this.DiskCapacity_Total != that.DiskCapacity_Total)
        return false;
    }

    boolean this_present_CurrentProcCPU = true;
    boolean that_present_CurrentProcCPU = true;
    if (this_present_CurrentProcCPU || that_present_CurrentProcCPU) {
      if (!(this_present_CurrentProcCPU && that_present_CurrentProcCPU))
        return false;
      if (this.CurrentProcCPU != that.CurrentProcCPU)
        return false;
    }

    boolean this_present_DiskInfos = true && this.isSetDiskInfos();
    boolean that_present_DiskInfos = true && that.isSetDiskInfos();
    if (this_present_DiskInfos || that_present_DiskInfos) {
      if (!(this_present_DiskInfos && that_present_DiskInfos))
        return false;
      if (!this.DiskInfos.equals(that.DiskInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(CPU_Percentage);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(MemoryCapacity_Used);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(MemoryCapacity_Total);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(DiskCapacity_Used);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(DiskCapacity_Total);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(CurrentProcCPU);

    hashCode = hashCode * 8191 + ((isSetDiskInfos()) ? 131071 : 524287);
    if (isSetDiskInfos())
      hashCode = hashCode * 8191 + DiskInfos.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SystemStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCPU_Percentage()).compareTo(other.isSetCPU_Percentage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCPU_Percentage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CPU_Percentage, other.CPU_Percentage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMemoryCapacity_Used()).compareTo(other.isSetMemoryCapacity_Used());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryCapacity_Used()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MemoryCapacity_Used, other.MemoryCapacity_Used);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMemoryCapacity_Total()).compareTo(other.isSetMemoryCapacity_Total());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryCapacity_Total()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MemoryCapacity_Total, other.MemoryCapacity_Total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDiskCapacity_Used()).compareTo(other.isSetDiskCapacity_Used());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiskCapacity_Used()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DiskCapacity_Used, other.DiskCapacity_Used);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDiskCapacity_Total()).compareTo(other.isSetDiskCapacity_Total());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiskCapacity_Total()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DiskCapacity_Total, other.DiskCapacity_Total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrentProcCPU()).compareTo(other.isSetCurrentProcCPU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentProcCPU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CurrentProcCPU, other.CurrentProcCPU);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDiskInfos()).compareTo(other.isSetDiskInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiskInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DiskInfos, other.DiskInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SystemStatus(");
    boolean first = true;

    sb.append("CPU_Percentage:");
    sb.append(this.CPU_Percentage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MemoryCapacity_Used:");
    sb.append(this.MemoryCapacity_Used);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MemoryCapacity_Total:");
    sb.append(this.MemoryCapacity_Total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DiskCapacity_Used:");
    sb.append(this.DiskCapacity_Used);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DiskCapacity_Total:");
    sb.append(this.DiskCapacity_Total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("CurrentProcCPU:");
    sb.append(this.CurrentProcCPU);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DiskInfos:");
    if (this.DiskInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.DiskInfos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SystemStatusStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SystemStatusStandardScheme getScheme() {
      return new SystemStatusStandardScheme();
    }
  }

  private static class SystemStatusStandardScheme extends org.apache.thrift.scheme.StandardScheme<SystemStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SystemStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CPU__PERCENTAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.CPU_Percentage = iprot.readDouble();
              struct.setCPU_PercentageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMORY_CAPACITY__USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.MemoryCapacity_Used = iprot.readI64();
              struct.setMemoryCapacity_UsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMORY_CAPACITY__TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.MemoryCapacity_Total = iprot.readI64();
              struct.setMemoryCapacity_TotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISK_CAPACITY__USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.DiskCapacity_Used = iprot.readI64();
              struct.setDiskCapacity_UsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISK_CAPACITY__TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.DiskCapacity_Total = iprot.readI64();
              struct.setDiskCapacity_TotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRENT_PROC_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.CurrentProcCPU = iprot.readDouble();
              struct.setCurrentProcCPUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DISK_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.DiskInfos = new java.util.ArrayList<DiskInfo>(_list40.size);
                DiskInfo _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new DiskInfo();
                  _elem41.read(iprot);
                  struct.DiskInfos.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setDiskInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SystemStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CPU__PERCENTAGE_FIELD_DESC);
      oprot.writeDouble(struct.CPU_Percentage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMORY_CAPACITY__USED_FIELD_DESC);
      oprot.writeI64(struct.MemoryCapacity_Used);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMORY_CAPACITY__TOTAL_FIELD_DESC);
      oprot.writeI64(struct.MemoryCapacity_Total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISK_CAPACITY__USED_FIELD_DESC);
      oprot.writeI64(struct.DiskCapacity_Used);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISK_CAPACITY__TOTAL_FIELD_DESC);
      oprot.writeI64(struct.DiskCapacity_Total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_PROC_CPU_FIELD_DESC);
      oprot.writeDouble(struct.CurrentProcCPU);
      oprot.writeFieldEnd();
      if (struct.DiskInfos != null) {
        oprot.writeFieldBegin(DISK_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.DiskInfos.size()));
          for (DiskInfo _iter43 : struct.DiskInfos)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SystemStatusTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SystemStatusTupleScheme getScheme() {
      return new SystemStatusTupleScheme();
    }
  }

  private static class SystemStatusTupleScheme extends org.apache.thrift.scheme.TupleScheme<SystemStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SystemStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCPU_Percentage()) {
        optionals.set(0);
      }
      if (struct.isSetMemoryCapacity_Used()) {
        optionals.set(1);
      }
      if (struct.isSetMemoryCapacity_Total()) {
        optionals.set(2);
      }
      if (struct.isSetDiskCapacity_Used()) {
        optionals.set(3);
      }
      if (struct.isSetDiskCapacity_Total()) {
        optionals.set(4);
      }
      if (struct.isSetCurrentProcCPU()) {
        optionals.set(5);
      }
      if (struct.isSetDiskInfos()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetCPU_Percentage()) {
        oprot.writeDouble(struct.CPU_Percentage);
      }
      if (struct.isSetMemoryCapacity_Used()) {
        oprot.writeI64(struct.MemoryCapacity_Used);
      }
      if (struct.isSetMemoryCapacity_Total()) {
        oprot.writeI64(struct.MemoryCapacity_Total);
      }
      if (struct.isSetDiskCapacity_Used()) {
        oprot.writeI64(struct.DiskCapacity_Used);
      }
      if (struct.isSetDiskCapacity_Total()) {
        oprot.writeI64(struct.DiskCapacity_Total);
      }
      if (struct.isSetCurrentProcCPU()) {
        oprot.writeDouble(struct.CurrentProcCPU);
      }
      if (struct.isSetDiskInfos()) {
        {
          oprot.writeI32(struct.DiskInfos.size());
          for (DiskInfo _iter44 : struct.DiskInfos)
          {
            _iter44.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SystemStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.CPU_Percentage = iprot.readDouble();
        struct.setCPU_PercentageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.MemoryCapacity_Used = iprot.readI64();
        struct.setMemoryCapacity_UsedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.MemoryCapacity_Total = iprot.readI64();
        struct.setMemoryCapacity_TotalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.DiskCapacity_Used = iprot.readI64();
        struct.setDiskCapacity_UsedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.DiskCapacity_Total = iprot.readI64();
        struct.setDiskCapacity_TotalIsSet(true);
      }
      if (incoming.get(5)) {
        struct.CurrentProcCPU = iprot.readDouble();
        struct.setCurrentProcCPUIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.DiskInfos = new java.util.ArrayList<DiskInfo>(_list45.size);
          DiskInfo _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new DiskInfo();
            _elem46.read(iprot);
            struct.DiskInfos.add(_elem46);
          }
        }
        struct.setDiskInfosIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

