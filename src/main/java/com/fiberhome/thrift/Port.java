/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fiberhome.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-20")
public class Port implements org.apache.thrift.TBase<Port, Port._Fields>, java.io.Serializable, Cloneable, Comparable<Port> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Port");

  private static final org.apache.thrift.protocol.TField BOARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("BoardId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BOARD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("BoardName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PORT_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("PortSpeed", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Direction", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("Mode", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("PortType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("PortName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PORT_GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("PortGroupType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PORT_GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("PortGroupName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField IS_SIGNED_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("IsSignedPort", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PORT_IN_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("PortInOut", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TRIB_PORT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("TribPortNumber", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField START_STM1_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("StartStm1No", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField START_TRIB_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("StartTribNo", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField START_LINE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("StartLineNo", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField PORT_LINE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("PortLineNo", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PORT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("PortNo", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField PORT_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("PortKey", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PortStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PortTupleSchemeFactory();

  public int BoardId; // required
  public java.lang.String BoardName; // required
  public java.lang.String PortSpeed; // required
  public int Direction; // required
  public int Mode; // required
  public int PortType; // required
  public java.lang.String PortName; // required
  public int PortGroupType; // required
  public java.lang.String PortGroupName; // required
  public int IsSignedPort; // required
  public int PortInOut; // required
  public int TribPortNumber; // required
  public int StartStm1No; // required
  public int StartTribNo; // required
  public int StartLineNo; // required
  public java.lang.String PortLineNo; // required
  public int PortNo; // required
  public java.lang.String PortKey; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOARD_ID((short)1, "BoardId"),
    BOARD_NAME((short)2, "BoardName"),
    PORT_SPEED((short)3, "PortSpeed"),
    DIRECTION((short)4, "Direction"),
    MODE((short)5, "Mode"),
    PORT_TYPE((short)6, "PortType"),
    PORT_NAME((short)7, "PortName"),
    PORT_GROUP_TYPE((short)8, "PortGroupType"),
    PORT_GROUP_NAME((short)9, "PortGroupName"),
    IS_SIGNED_PORT((short)10, "IsSignedPort"),
    PORT_IN_OUT((short)11, "PortInOut"),
    TRIB_PORT_NUMBER((short)12, "TribPortNumber"),
    START_STM1_NO((short)13, "StartStm1No"),
    START_TRIB_NO((short)14, "StartTribNo"),
    START_LINE_NO((short)15, "StartLineNo"),
    PORT_LINE_NO((short)16, "PortLineNo"),
    PORT_NO((short)17, "PortNo"),
    PORT_KEY((short)18, "PortKey");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOARD_ID
          return BOARD_ID;
        case 2: // BOARD_NAME
          return BOARD_NAME;
        case 3: // PORT_SPEED
          return PORT_SPEED;
        case 4: // DIRECTION
          return DIRECTION;
        case 5: // MODE
          return MODE;
        case 6: // PORT_TYPE
          return PORT_TYPE;
        case 7: // PORT_NAME
          return PORT_NAME;
        case 8: // PORT_GROUP_TYPE
          return PORT_GROUP_TYPE;
        case 9: // PORT_GROUP_NAME
          return PORT_GROUP_NAME;
        case 10: // IS_SIGNED_PORT
          return IS_SIGNED_PORT;
        case 11: // PORT_IN_OUT
          return PORT_IN_OUT;
        case 12: // TRIB_PORT_NUMBER
          return TRIB_PORT_NUMBER;
        case 13: // START_STM1_NO
          return START_STM1_NO;
        case 14: // START_TRIB_NO
          return START_TRIB_NO;
        case 15: // START_LINE_NO
          return START_LINE_NO;
        case 16: // PORT_LINE_NO
          return PORT_LINE_NO;
        case 17: // PORT_NO
          return PORT_NO;
        case 18: // PORT_KEY
          return PORT_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOARDID_ISSET_ID = 0;
  private static final int __DIRECTION_ISSET_ID = 1;
  private static final int __MODE_ISSET_ID = 2;
  private static final int __PORTTYPE_ISSET_ID = 3;
  private static final int __PORTGROUPTYPE_ISSET_ID = 4;
  private static final int __ISSIGNEDPORT_ISSET_ID = 5;
  private static final int __PORTINOUT_ISSET_ID = 6;
  private static final int __TRIBPORTNUMBER_ISSET_ID = 7;
  private static final int __STARTSTM1NO_ISSET_ID = 8;
  private static final int __STARTTRIBNO_ISSET_ID = 9;
  private static final int __STARTLINENO_ISSET_ID = 10;
  private static final int __PORTNO_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOARD_ID, new org.apache.thrift.meta_data.FieldMetaData("BoardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOARD_NAME, new org.apache.thrift.meta_data.FieldMetaData("BoardName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT_SPEED, new org.apache.thrift.meta_data.FieldMetaData("PortSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("Direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("Mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("PortType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("PortName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT_GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("PortGroupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PORT_GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("PortGroupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SIGNED_PORT, new org.apache.thrift.meta_data.FieldMetaData("IsSignedPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PORT_IN_OUT, new org.apache.thrift.meta_data.FieldMetaData("PortInOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRIB_PORT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("TribPortNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_STM1_NO, new org.apache.thrift.meta_data.FieldMetaData("StartStm1No", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TRIB_NO, new org.apache.thrift.meta_data.FieldMetaData("StartTribNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_LINE_NO, new org.apache.thrift.meta_data.FieldMetaData("StartLineNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PORT_LINE_NO, new org.apache.thrift.meta_data.FieldMetaData("PortLineNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT_NO, new org.apache.thrift.meta_data.FieldMetaData("PortNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PORT_KEY, new org.apache.thrift.meta_data.FieldMetaData("PortKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Port.class, metaDataMap);
  }

  public Port() {
  }

  public Port(
    int BoardId,
    java.lang.String BoardName,
    java.lang.String PortSpeed,
    int Direction,
    int Mode,
    int PortType,
    java.lang.String PortName,
    int PortGroupType,
    java.lang.String PortGroupName,
    int IsSignedPort,
    int PortInOut,
    int TribPortNumber,
    int StartStm1No,
    int StartTribNo,
    int StartLineNo,
    java.lang.String PortLineNo,
    int PortNo,
    java.lang.String PortKey)
  {
    this();
    this.BoardId = BoardId;
    setBoardIdIsSet(true);
    this.BoardName = BoardName;
    this.PortSpeed = PortSpeed;
    this.Direction = Direction;
    setDirectionIsSet(true);
    this.Mode = Mode;
    setModeIsSet(true);
    this.PortType = PortType;
    setPortTypeIsSet(true);
    this.PortName = PortName;
    this.PortGroupType = PortGroupType;
    setPortGroupTypeIsSet(true);
    this.PortGroupName = PortGroupName;
    this.IsSignedPort = IsSignedPort;
    setIsSignedPortIsSet(true);
    this.PortInOut = PortInOut;
    setPortInOutIsSet(true);
    this.TribPortNumber = TribPortNumber;
    setTribPortNumberIsSet(true);
    this.StartStm1No = StartStm1No;
    setStartStm1NoIsSet(true);
    this.StartTribNo = StartTribNo;
    setStartTribNoIsSet(true);
    this.StartLineNo = StartLineNo;
    setStartLineNoIsSet(true);
    this.PortLineNo = PortLineNo;
    this.PortNo = PortNo;
    setPortNoIsSet(true);
    this.PortKey = PortKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Port(Port other) {
    __isset_bitfield = other.__isset_bitfield;
    this.BoardId = other.BoardId;
    if (other.isSetBoardName()) {
      this.BoardName = other.BoardName;
    }
    if (other.isSetPortSpeed()) {
      this.PortSpeed = other.PortSpeed;
    }
    this.Direction = other.Direction;
    this.Mode = other.Mode;
    this.PortType = other.PortType;
    if (other.isSetPortName()) {
      this.PortName = other.PortName;
    }
    this.PortGroupType = other.PortGroupType;
    if (other.isSetPortGroupName()) {
      this.PortGroupName = other.PortGroupName;
    }
    this.IsSignedPort = other.IsSignedPort;
    this.PortInOut = other.PortInOut;
    this.TribPortNumber = other.TribPortNumber;
    this.StartStm1No = other.StartStm1No;
    this.StartTribNo = other.StartTribNo;
    this.StartLineNo = other.StartLineNo;
    if (other.isSetPortLineNo()) {
      this.PortLineNo = other.PortLineNo;
    }
    this.PortNo = other.PortNo;
    if (other.isSetPortKey()) {
      this.PortKey = other.PortKey;
    }
  }

  public Port deepCopy() {
    return new Port(this);
  }

  @Override
  public void clear() {
    setBoardIdIsSet(false);
    this.BoardId = 0;
    this.BoardName = null;
    this.PortSpeed = null;
    setDirectionIsSet(false);
    this.Direction = 0;
    setModeIsSet(false);
    this.Mode = 0;
    setPortTypeIsSet(false);
    this.PortType = 0;
    this.PortName = null;
    setPortGroupTypeIsSet(false);
    this.PortGroupType = 0;
    this.PortGroupName = null;
    setIsSignedPortIsSet(false);
    this.IsSignedPort = 0;
    setPortInOutIsSet(false);
    this.PortInOut = 0;
    setTribPortNumberIsSet(false);
    this.TribPortNumber = 0;
    setStartStm1NoIsSet(false);
    this.StartStm1No = 0;
    setStartTribNoIsSet(false);
    this.StartTribNo = 0;
    setStartLineNoIsSet(false);
    this.StartLineNo = 0;
    this.PortLineNo = null;
    setPortNoIsSet(false);
    this.PortNo = 0;
    this.PortKey = null;
  }

  public int getBoardId() {
    return this.BoardId;
  }

  public Port setBoardId(int BoardId) {
    this.BoardId = BoardId;
    setBoardIdIsSet(true);
    return this;
  }

  public void unsetBoardId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOARDID_ISSET_ID);
  }

  /** Returns true if field BoardId is set (has been assigned a value) and false otherwise */
  public boolean isSetBoardId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOARDID_ISSET_ID);
  }

  public void setBoardIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOARDID_ISSET_ID, value);
  }

  public java.lang.String getBoardName() {
    return this.BoardName;
  }

  public Port setBoardName(java.lang.String BoardName) {
    this.BoardName = BoardName;
    return this;
  }

  public void unsetBoardName() {
    this.BoardName = null;
  }

  /** Returns true if field BoardName is set (has been assigned a value) and false otherwise */
  public boolean isSetBoardName() {
    return this.BoardName != null;
  }

  public void setBoardNameIsSet(boolean value) {
    if (!value) {
      this.BoardName = null;
    }
  }

  public java.lang.String getPortSpeed() {
    return this.PortSpeed;
  }

  public Port setPortSpeed(java.lang.String PortSpeed) {
    this.PortSpeed = PortSpeed;
    return this;
  }

  public void unsetPortSpeed() {
    this.PortSpeed = null;
  }

  /** Returns true if field PortSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetPortSpeed() {
    return this.PortSpeed != null;
  }

  public void setPortSpeedIsSet(boolean value) {
    if (!value) {
      this.PortSpeed = null;
    }
  }

  public int getDirection() {
    return this.Direction;
  }

  public Port setDirection(int Direction) {
    this.Direction = Direction;
    setDirectionIsSet(true);
    return this;
  }

  public void unsetDirection() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  /** Returns true if field Direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  public void setDirectionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DIRECTION_ISSET_ID, value);
  }

  public int getMode() {
    return this.Mode;
  }

  public Port setMode(int Mode) {
    this.Mode = Mode;
    setModeIsSet(true);
    return this;
  }

  public void unsetMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  /** Returns true if field Mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
  }

  public void setModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
  }

  public int getPortType() {
    return this.PortType;
  }

  public Port setPortType(int PortType) {
    this.PortType = PortType;
    setPortTypeIsSet(true);
    return this;
  }

  public void unsetPortType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORTTYPE_ISSET_ID);
  }

  /** Returns true if field PortType is set (has been assigned a value) and false otherwise */
  public boolean isSetPortType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORTTYPE_ISSET_ID);
  }

  public void setPortTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORTTYPE_ISSET_ID, value);
  }

  public java.lang.String getPortName() {
    return this.PortName;
  }

  public Port setPortName(java.lang.String PortName) {
    this.PortName = PortName;
    return this;
  }

  public void unsetPortName() {
    this.PortName = null;
  }

  /** Returns true if field PortName is set (has been assigned a value) and false otherwise */
  public boolean isSetPortName() {
    return this.PortName != null;
  }

  public void setPortNameIsSet(boolean value) {
    if (!value) {
      this.PortName = null;
    }
  }

  public int getPortGroupType() {
    return this.PortGroupType;
  }

  public Port setPortGroupType(int PortGroupType) {
    this.PortGroupType = PortGroupType;
    setPortGroupTypeIsSet(true);
    return this;
  }

  public void unsetPortGroupType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORTGROUPTYPE_ISSET_ID);
  }

  /** Returns true if field PortGroupType is set (has been assigned a value) and false otherwise */
  public boolean isSetPortGroupType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORTGROUPTYPE_ISSET_ID);
  }

  public void setPortGroupTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORTGROUPTYPE_ISSET_ID, value);
  }

  public java.lang.String getPortGroupName() {
    return this.PortGroupName;
  }

  public Port setPortGroupName(java.lang.String PortGroupName) {
    this.PortGroupName = PortGroupName;
    return this;
  }

  public void unsetPortGroupName() {
    this.PortGroupName = null;
  }

  /** Returns true if field PortGroupName is set (has been assigned a value) and false otherwise */
  public boolean isSetPortGroupName() {
    return this.PortGroupName != null;
  }

  public void setPortGroupNameIsSet(boolean value) {
    if (!value) {
      this.PortGroupName = null;
    }
  }

  public int getIsSignedPort() {
    return this.IsSignedPort;
  }

  public Port setIsSignedPort(int IsSignedPort) {
    this.IsSignedPort = IsSignedPort;
    setIsSignedPortIsSet(true);
    return this;
  }

  public void unsetIsSignedPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSIGNEDPORT_ISSET_ID);
  }

  /** Returns true if field IsSignedPort is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSignedPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSIGNEDPORT_ISSET_ID);
  }

  public void setIsSignedPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSIGNEDPORT_ISSET_ID, value);
  }

  public int getPortInOut() {
    return this.PortInOut;
  }

  public Port setPortInOut(int PortInOut) {
    this.PortInOut = PortInOut;
    setPortInOutIsSet(true);
    return this;
  }

  public void unsetPortInOut() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORTINOUT_ISSET_ID);
  }

  /** Returns true if field PortInOut is set (has been assigned a value) and false otherwise */
  public boolean isSetPortInOut() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORTINOUT_ISSET_ID);
  }

  public void setPortInOutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORTINOUT_ISSET_ID, value);
  }

  public int getTribPortNumber() {
    return this.TribPortNumber;
  }

  public Port setTribPortNumber(int TribPortNumber) {
    this.TribPortNumber = TribPortNumber;
    setTribPortNumberIsSet(true);
    return this;
  }

  public void unsetTribPortNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRIBPORTNUMBER_ISSET_ID);
  }

  /** Returns true if field TribPortNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTribPortNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRIBPORTNUMBER_ISSET_ID);
  }

  public void setTribPortNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRIBPORTNUMBER_ISSET_ID, value);
  }

  public int getStartStm1No() {
    return this.StartStm1No;
  }

  public Port setStartStm1No(int StartStm1No) {
    this.StartStm1No = StartStm1No;
    setStartStm1NoIsSet(true);
    return this;
  }

  public void unsetStartStm1No() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTSTM1NO_ISSET_ID);
  }

  /** Returns true if field StartStm1No is set (has been assigned a value) and false otherwise */
  public boolean isSetStartStm1No() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTSTM1NO_ISSET_ID);
  }

  public void setStartStm1NoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTSTM1NO_ISSET_ID, value);
  }

  public int getStartTribNo() {
    return this.StartTribNo;
  }

  public Port setStartTribNo(int StartTribNo) {
    this.StartTribNo = StartTribNo;
    setStartTribNoIsSet(true);
    return this;
  }

  public void unsetStartTribNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTTRIBNO_ISSET_ID);
  }

  /** Returns true if field StartTribNo is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTribNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTTRIBNO_ISSET_ID);
  }

  public void setStartTribNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTTRIBNO_ISSET_ID, value);
  }

  public int getStartLineNo() {
    return this.StartLineNo;
  }

  public Port setStartLineNo(int StartLineNo) {
    this.StartLineNo = StartLineNo;
    setStartLineNoIsSet(true);
    return this;
  }

  public void unsetStartLineNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTLINENO_ISSET_ID);
  }

  /** Returns true if field StartLineNo is set (has been assigned a value) and false otherwise */
  public boolean isSetStartLineNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTLINENO_ISSET_ID);
  }

  public void setStartLineNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTLINENO_ISSET_ID, value);
  }

  public java.lang.String getPortLineNo() {
    return this.PortLineNo;
  }

  public Port setPortLineNo(java.lang.String PortLineNo) {
    this.PortLineNo = PortLineNo;
    return this;
  }

  public void unsetPortLineNo() {
    this.PortLineNo = null;
  }

  /** Returns true if field PortLineNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPortLineNo() {
    return this.PortLineNo != null;
  }

  public void setPortLineNoIsSet(boolean value) {
    if (!value) {
      this.PortLineNo = null;
    }
  }

  public int getPortNo() {
    return this.PortNo;
  }

  public Port setPortNo(int PortNo) {
    this.PortNo = PortNo;
    setPortNoIsSet(true);
    return this;
  }

  public void unsetPortNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORTNO_ISSET_ID);
  }

  /** Returns true if field PortNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPortNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORTNO_ISSET_ID);
  }

  public void setPortNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORTNO_ISSET_ID, value);
  }

  public java.lang.String getPortKey() {
    return this.PortKey;
  }

  public Port setPortKey(java.lang.String PortKey) {
    this.PortKey = PortKey;
    return this;
  }

  public void unsetPortKey() {
    this.PortKey = null;
  }

  /** Returns true if field PortKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPortKey() {
    return this.PortKey != null;
  }

  public void setPortKeyIsSet(boolean value) {
    if (!value) {
      this.PortKey = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BOARD_ID:
      if (value == null) {
        unsetBoardId();
      } else {
        setBoardId((java.lang.Integer)value);
      }
      break;

    case BOARD_NAME:
      if (value == null) {
        unsetBoardName();
      } else {
        setBoardName((java.lang.String)value);
      }
      break;

    case PORT_SPEED:
      if (value == null) {
        unsetPortSpeed();
      } else {
        setPortSpeed((java.lang.String)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((java.lang.Integer)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((java.lang.Integer)value);
      }
      break;

    case PORT_TYPE:
      if (value == null) {
        unsetPortType();
      } else {
        setPortType((java.lang.Integer)value);
      }
      break;

    case PORT_NAME:
      if (value == null) {
        unsetPortName();
      } else {
        setPortName((java.lang.String)value);
      }
      break;

    case PORT_GROUP_TYPE:
      if (value == null) {
        unsetPortGroupType();
      } else {
        setPortGroupType((java.lang.Integer)value);
      }
      break;

    case PORT_GROUP_NAME:
      if (value == null) {
        unsetPortGroupName();
      } else {
        setPortGroupName((java.lang.String)value);
      }
      break;

    case IS_SIGNED_PORT:
      if (value == null) {
        unsetIsSignedPort();
      } else {
        setIsSignedPort((java.lang.Integer)value);
      }
      break;

    case PORT_IN_OUT:
      if (value == null) {
        unsetPortInOut();
      } else {
        setPortInOut((java.lang.Integer)value);
      }
      break;

    case TRIB_PORT_NUMBER:
      if (value == null) {
        unsetTribPortNumber();
      } else {
        setTribPortNumber((java.lang.Integer)value);
      }
      break;

    case START_STM1_NO:
      if (value == null) {
        unsetStartStm1No();
      } else {
        setStartStm1No((java.lang.Integer)value);
      }
      break;

    case START_TRIB_NO:
      if (value == null) {
        unsetStartTribNo();
      } else {
        setStartTribNo((java.lang.Integer)value);
      }
      break;

    case START_LINE_NO:
      if (value == null) {
        unsetStartLineNo();
      } else {
        setStartLineNo((java.lang.Integer)value);
      }
      break;

    case PORT_LINE_NO:
      if (value == null) {
        unsetPortLineNo();
      } else {
        setPortLineNo((java.lang.String)value);
      }
      break;

    case PORT_NO:
      if (value == null) {
        unsetPortNo();
      } else {
        setPortNo((java.lang.Integer)value);
      }
      break;

    case PORT_KEY:
      if (value == null) {
        unsetPortKey();
      } else {
        setPortKey((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BOARD_ID:
      return getBoardId();

    case BOARD_NAME:
      return getBoardName();

    case PORT_SPEED:
      return getPortSpeed();

    case DIRECTION:
      return getDirection();

    case MODE:
      return getMode();

    case PORT_TYPE:
      return getPortType();

    case PORT_NAME:
      return getPortName();

    case PORT_GROUP_TYPE:
      return getPortGroupType();

    case PORT_GROUP_NAME:
      return getPortGroupName();

    case IS_SIGNED_PORT:
      return getIsSignedPort();

    case PORT_IN_OUT:
      return getPortInOut();

    case TRIB_PORT_NUMBER:
      return getTribPortNumber();

    case START_STM1_NO:
      return getStartStm1No();

    case START_TRIB_NO:
      return getStartTribNo();

    case START_LINE_NO:
      return getStartLineNo();

    case PORT_LINE_NO:
      return getPortLineNo();

    case PORT_NO:
      return getPortNo();

    case PORT_KEY:
      return getPortKey();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BOARD_ID:
      return isSetBoardId();
    case BOARD_NAME:
      return isSetBoardName();
    case PORT_SPEED:
      return isSetPortSpeed();
    case DIRECTION:
      return isSetDirection();
    case MODE:
      return isSetMode();
    case PORT_TYPE:
      return isSetPortType();
    case PORT_NAME:
      return isSetPortName();
    case PORT_GROUP_TYPE:
      return isSetPortGroupType();
    case PORT_GROUP_NAME:
      return isSetPortGroupName();
    case IS_SIGNED_PORT:
      return isSetIsSignedPort();
    case PORT_IN_OUT:
      return isSetPortInOut();
    case TRIB_PORT_NUMBER:
      return isSetTribPortNumber();
    case START_STM1_NO:
      return isSetStartStm1No();
    case START_TRIB_NO:
      return isSetStartTribNo();
    case START_LINE_NO:
      return isSetStartLineNo();
    case PORT_LINE_NO:
      return isSetPortLineNo();
    case PORT_NO:
      return isSetPortNo();
    case PORT_KEY:
      return isSetPortKey();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Port)
      return this.equals((Port)that);
    return false;
  }

  public boolean equals(Port that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_BoardId = true;
    boolean that_present_BoardId = true;
    if (this_present_BoardId || that_present_BoardId) {
      if (!(this_present_BoardId && that_present_BoardId))
        return false;
      if (this.BoardId != that.BoardId)
        return false;
    }

    boolean this_present_BoardName = true && this.isSetBoardName();
    boolean that_present_BoardName = true && that.isSetBoardName();
    if (this_present_BoardName || that_present_BoardName) {
      if (!(this_present_BoardName && that_present_BoardName))
        return false;
      if (!this.BoardName.equals(that.BoardName))
        return false;
    }

    boolean this_present_PortSpeed = true && this.isSetPortSpeed();
    boolean that_present_PortSpeed = true && that.isSetPortSpeed();
    if (this_present_PortSpeed || that_present_PortSpeed) {
      if (!(this_present_PortSpeed && that_present_PortSpeed))
        return false;
      if (!this.PortSpeed.equals(that.PortSpeed))
        return false;
    }

    boolean this_present_Direction = true;
    boolean that_present_Direction = true;
    if (this_present_Direction || that_present_Direction) {
      if (!(this_present_Direction && that_present_Direction))
        return false;
      if (this.Direction != that.Direction)
        return false;
    }

    boolean this_present_Mode = true;
    boolean that_present_Mode = true;
    if (this_present_Mode || that_present_Mode) {
      if (!(this_present_Mode && that_present_Mode))
        return false;
      if (this.Mode != that.Mode)
        return false;
    }

    boolean this_present_PortType = true;
    boolean that_present_PortType = true;
    if (this_present_PortType || that_present_PortType) {
      if (!(this_present_PortType && that_present_PortType))
        return false;
      if (this.PortType != that.PortType)
        return false;
    }

    boolean this_present_PortName = true && this.isSetPortName();
    boolean that_present_PortName = true && that.isSetPortName();
    if (this_present_PortName || that_present_PortName) {
      if (!(this_present_PortName && that_present_PortName))
        return false;
      if (!this.PortName.equals(that.PortName))
        return false;
    }

    boolean this_present_PortGroupType = true;
    boolean that_present_PortGroupType = true;
    if (this_present_PortGroupType || that_present_PortGroupType) {
      if (!(this_present_PortGroupType && that_present_PortGroupType))
        return false;
      if (this.PortGroupType != that.PortGroupType)
        return false;
    }

    boolean this_present_PortGroupName = true && this.isSetPortGroupName();
    boolean that_present_PortGroupName = true && that.isSetPortGroupName();
    if (this_present_PortGroupName || that_present_PortGroupName) {
      if (!(this_present_PortGroupName && that_present_PortGroupName))
        return false;
      if (!this.PortGroupName.equals(that.PortGroupName))
        return false;
    }

    boolean this_present_IsSignedPort = true;
    boolean that_present_IsSignedPort = true;
    if (this_present_IsSignedPort || that_present_IsSignedPort) {
      if (!(this_present_IsSignedPort && that_present_IsSignedPort))
        return false;
      if (this.IsSignedPort != that.IsSignedPort)
        return false;
    }

    boolean this_present_PortInOut = true;
    boolean that_present_PortInOut = true;
    if (this_present_PortInOut || that_present_PortInOut) {
      if (!(this_present_PortInOut && that_present_PortInOut))
        return false;
      if (this.PortInOut != that.PortInOut)
        return false;
    }

    boolean this_present_TribPortNumber = true;
    boolean that_present_TribPortNumber = true;
    if (this_present_TribPortNumber || that_present_TribPortNumber) {
      if (!(this_present_TribPortNumber && that_present_TribPortNumber))
        return false;
      if (this.TribPortNumber != that.TribPortNumber)
        return false;
    }

    boolean this_present_StartStm1No = true;
    boolean that_present_StartStm1No = true;
    if (this_present_StartStm1No || that_present_StartStm1No) {
      if (!(this_present_StartStm1No && that_present_StartStm1No))
        return false;
      if (this.StartStm1No != that.StartStm1No)
        return false;
    }

    boolean this_present_StartTribNo = true;
    boolean that_present_StartTribNo = true;
    if (this_present_StartTribNo || that_present_StartTribNo) {
      if (!(this_present_StartTribNo && that_present_StartTribNo))
        return false;
      if (this.StartTribNo != that.StartTribNo)
        return false;
    }

    boolean this_present_StartLineNo = true;
    boolean that_present_StartLineNo = true;
    if (this_present_StartLineNo || that_present_StartLineNo) {
      if (!(this_present_StartLineNo && that_present_StartLineNo))
        return false;
      if (this.StartLineNo != that.StartLineNo)
        return false;
    }

    boolean this_present_PortLineNo = true && this.isSetPortLineNo();
    boolean that_present_PortLineNo = true && that.isSetPortLineNo();
    if (this_present_PortLineNo || that_present_PortLineNo) {
      if (!(this_present_PortLineNo && that_present_PortLineNo))
        return false;
      if (!this.PortLineNo.equals(that.PortLineNo))
        return false;
    }

    boolean this_present_PortNo = true;
    boolean that_present_PortNo = true;
    if (this_present_PortNo || that_present_PortNo) {
      if (!(this_present_PortNo && that_present_PortNo))
        return false;
      if (this.PortNo != that.PortNo)
        return false;
    }

    boolean this_present_PortKey = true && this.isSetPortKey();
    boolean that_present_PortKey = true && that.isSetPortKey();
    if (this_present_PortKey || that_present_PortKey) {
      if (!(this_present_PortKey && that_present_PortKey))
        return false;
      if (!this.PortKey.equals(that.PortKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + BoardId;

    hashCode = hashCode * 8191 + ((isSetBoardName()) ? 131071 : 524287);
    if (isSetBoardName())
      hashCode = hashCode * 8191 + BoardName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPortSpeed()) ? 131071 : 524287);
    if (isSetPortSpeed())
      hashCode = hashCode * 8191 + PortSpeed.hashCode();

    hashCode = hashCode * 8191 + Direction;

    hashCode = hashCode * 8191 + Mode;

    hashCode = hashCode * 8191 + PortType;

    hashCode = hashCode * 8191 + ((isSetPortName()) ? 131071 : 524287);
    if (isSetPortName())
      hashCode = hashCode * 8191 + PortName.hashCode();

    hashCode = hashCode * 8191 + PortGroupType;

    hashCode = hashCode * 8191 + ((isSetPortGroupName()) ? 131071 : 524287);
    if (isSetPortGroupName())
      hashCode = hashCode * 8191 + PortGroupName.hashCode();

    hashCode = hashCode * 8191 + IsSignedPort;

    hashCode = hashCode * 8191 + PortInOut;

    hashCode = hashCode * 8191 + TribPortNumber;

    hashCode = hashCode * 8191 + StartStm1No;

    hashCode = hashCode * 8191 + StartTribNo;

    hashCode = hashCode * 8191 + StartLineNo;

    hashCode = hashCode * 8191 + ((isSetPortLineNo()) ? 131071 : 524287);
    if (isSetPortLineNo())
      hashCode = hashCode * 8191 + PortLineNo.hashCode();

    hashCode = hashCode * 8191 + PortNo;

    hashCode = hashCode * 8191 + ((isSetPortKey()) ? 131071 : 524287);
    if (isSetPortKey())
      hashCode = hashCode * 8191 + PortKey.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Port other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBoardId()).compareTo(other.isSetBoardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BoardId, other.BoardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBoardName()).compareTo(other.isSetBoardName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoardName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BoardName, other.BoardName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortSpeed()).compareTo(other.isSetPortSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortSpeed, other.PortSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Direction, other.Direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Mode, other.Mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortType()).compareTo(other.isSetPortType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortType, other.PortType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortName()).compareTo(other.isSetPortName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortName, other.PortName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortGroupType()).compareTo(other.isSetPortGroupType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortGroupType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortGroupType, other.PortGroupType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortGroupName()).compareTo(other.isSetPortGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortGroupName, other.PortGroupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsSignedPort()).compareTo(other.isSetIsSignedPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSignedPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsSignedPort, other.IsSignedPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortInOut()).compareTo(other.isSetPortInOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortInOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortInOut, other.PortInOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTribPortNumber()).compareTo(other.isSetTribPortNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTribPortNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TribPortNumber, other.TribPortNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartStm1No()).compareTo(other.isSetStartStm1No());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartStm1No()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.StartStm1No, other.StartStm1No);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartTribNo()).compareTo(other.isSetStartTribNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTribNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.StartTribNo, other.StartTribNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartLineNo()).compareTo(other.isSetStartLineNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartLineNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.StartLineNo, other.StartLineNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortLineNo()).compareTo(other.isSetPortLineNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortLineNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortLineNo, other.PortLineNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortNo()).compareTo(other.isSetPortNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortNo, other.PortNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortKey()).compareTo(other.isSetPortKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortKey, other.PortKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Port(");
    boolean first = true;

    sb.append("BoardId:");
    sb.append(this.BoardId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("BoardName:");
    if (this.BoardName == null) {
      sb.append("null");
    } else {
      sb.append(this.BoardName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortSpeed:");
    if (this.PortSpeed == null) {
      sb.append("null");
    } else {
      sb.append(this.PortSpeed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Direction:");
    sb.append(this.Direction);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Mode:");
    sb.append(this.Mode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortType:");
    sb.append(this.PortType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortName:");
    if (this.PortName == null) {
      sb.append("null");
    } else {
      sb.append(this.PortName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortGroupType:");
    sb.append(this.PortGroupType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortGroupName:");
    if (this.PortGroupName == null) {
      sb.append("null");
    } else {
      sb.append(this.PortGroupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsSignedPort:");
    sb.append(this.IsSignedPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortInOut:");
    sb.append(this.PortInOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("TribPortNumber:");
    sb.append(this.TribPortNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("StartStm1No:");
    sb.append(this.StartStm1No);
    first = false;
    if (!first) sb.append(", ");
    sb.append("StartTribNo:");
    sb.append(this.StartTribNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("StartLineNo:");
    sb.append(this.StartLineNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortLineNo:");
    if (this.PortLineNo == null) {
      sb.append("null");
    } else {
      sb.append(this.PortLineNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortNo:");
    sb.append(this.PortNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortKey:");
    if (this.PortKey == null) {
      sb.append("null");
    } else {
      sb.append(this.PortKey);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PortStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PortStandardScheme getScheme() {
      return new PortStandardScheme();
    }
  }

  private static class PortStandardScheme extends org.apache.thrift.scheme.StandardScheme<Port> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Port struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.BoardId = iprot.readI32();
              struct.setBoardIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOARD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.BoardName = iprot.readString();
              struct.setBoardNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PORT_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PortSpeed = iprot.readString();
              struct.setPortSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Direction = iprot.readI32();
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Mode = iprot.readI32();
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PortType = iprot.readI32();
              struct.setPortTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PORT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PortName = iprot.readString();
              struct.setPortNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PORT_GROUP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PortGroupType = iprot.readI32();
              struct.setPortGroupTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PORT_GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PortGroupName = iprot.readString();
              struct.setPortGroupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_SIGNED_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsSignedPort = iprot.readI32();
              struct.setIsSignedPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PORT_IN_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PortInOut = iprot.readI32();
              struct.setPortInOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRIB_PORT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TribPortNumber = iprot.readI32();
              struct.setTribPortNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // START_STM1_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.StartStm1No = iprot.readI32();
              struct.setStartStm1NoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // START_TRIB_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.StartTribNo = iprot.readI32();
              struct.setStartTribNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // START_LINE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.StartLineNo = iprot.readI32();
              struct.setStartLineNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PORT_LINE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PortLineNo = iprot.readString();
              struct.setPortLineNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PORT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PortNo = iprot.readI32();
              struct.setPortNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PORT_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PortKey = iprot.readString();
              struct.setPortKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Port struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOARD_ID_FIELD_DESC);
      oprot.writeI32(struct.BoardId);
      oprot.writeFieldEnd();
      if (struct.BoardName != null) {
        oprot.writeFieldBegin(BOARD_NAME_FIELD_DESC);
        oprot.writeString(struct.BoardName);
        oprot.writeFieldEnd();
      }
      if (struct.PortSpeed != null) {
        oprot.writeFieldBegin(PORT_SPEED_FIELD_DESC);
        oprot.writeString(struct.PortSpeed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
      oprot.writeI32(struct.Direction);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeI32(struct.Mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PORT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.PortType);
      oprot.writeFieldEnd();
      if (struct.PortName != null) {
        oprot.writeFieldBegin(PORT_NAME_FIELD_DESC);
        oprot.writeString(struct.PortName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_GROUP_TYPE_FIELD_DESC);
      oprot.writeI32(struct.PortGroupType);
      oprot.writeFieldEnd();
      if (struct.PortGroupName != null) {
        oprot.writeFieldBegin(PORT_GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.PortGroupName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_SIGNED_PORT_FIELD_DESC);
      oprot.writeI32(struct.IsSignedPort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PORT_IN_OUT_FIELD_DESC);
      oprot.writeI32(struct.PortInOut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRIB_PORT_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.TribPortNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_STM1_NO_FIELD_DESC);
      oprot.writeI32(struct.StartStm1No);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TRIB_NO_FIELD_DESC);
      oprot.writeI32(struct.StartTribNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_LINE_NO_FIELD_DESC);
      oprot.writeI32(struct.StartLineNo);
      oprot.writeFieldEnd();
      if (struct.PortLineNo != null) {
        oprot.writeFieldBegin(PORT_LINE_NO_FIELD_DESC);
        oprot.writeString(struct.PortLineNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_NO_FIELD_DESC);
      oprot.writeI32(struct.PortNo);
      oprot.writeFieldEnd();
      if (struct.PortKey != null) {
        oprot.writeFieldBegin(PORT_KEY_FIELD_DESC);
        oprot.writeString(struct.PortKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PortTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PortTupleScheme getScheme() {
      return new PortTupleScheme();
    }
  }

  private static class PortTupleScheme extends org.apache.thrift.scheme.TupleScheme<Port> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Port struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBoardId()) {
        optionals.set(0);
      }
      if (struct.isSetBoardName()) {
        optionals.set(1);
      }
      if (struct.isSetPortSpeed()) {
        optionals.set(2);
      }
      if (struct.isSetDirection()) {
        optionals.set(3);
      }
      if (struct.isSetMode()) {
        optionals.set(4);
      }
      if (struct.isSetPortType()) {
        optionals.set(5);
      }
      if (struct.isSetPortName()) {
        optionals.set(6);
      }
      if (struct.isSetPortGroupType()) {
        optionals.set(7);
      }
      if (struct.isSetPortGroupName()) {
        optionals.set(8);
      }
      if (struct.isSetIsSignedPort()) {
        optionals.set(9);
      }
      if (struct.isSetPortInOut()) {
        optionals.set(10);
      }
      if (struct.isSetTribPortNumber()) {
        optionals.set(11);
      }
      if (struct.isSetStartStm1No()) {
        optionals.set(12);
      }
      if (struct.isSetStartTribNo()) {
        optionals.set(13);
      }
      if (struct.isSetStartLineNo()) {
        optionals.set(14);
      }
      if (struct.isSetPortLineNo()) {
        optionals.set(15);
      }
      if (struct.isSetPortNo()) {
        optionals.set(16);
      }
      if (struct.isSetPortKey()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetBoardId()) {
        oprot.writeI32(struct.BoardId);
      }
      if (struct.isSetBoardName()) {
        oprot.writeString(struct.BoardName);
      }
      if (struct.isSetPortSpeed()) {
        oprot.writeString(struct.PortSpeed);
      }
      if (struct.isSetDirection()) {
        oprot.writeI32(struct.Direction);
      }
      if (struct.isSetMode()) {
        oprot.writeI32(struct.Mode);
      }
      if (struct.isSetPortType()) {
        oprot.writeI32(struct.PortType);
      }
      if (struct.isSetPortName()) {
        oprot.writeString(struct.PortName);
      }
      if (struct.isSetPortGroupType()) {
        oprot.writeI32(struct.PortGroupType);
      }
      if (struct.isSetPortGroupName()) {
        oprot.writeString(struct.PortGroupName);
      }
      if (struct.isSetIsSignedPort()) {
        oprot.writeI32(struct.IsSignedPort);
      }
      if (struct.isSetPortInOut()) {
        oprot.writeI32(struct.PortInOut);
      }
      if (struct.isSetTribPortNumber()) {
        oprot.writeI32(struct.TribPortNumber);
      }
      if (struct.isSetStartStm1No()) {
        oprot.writeI32(struct.StartStm1No);
      }
      if (struct.isSetStartTribNo()) {
        oprot.writeI32(struct.StartTribNo);
      }
      if (struct.isSetStartLineNo()) {
        oprot.writeI32(struct.StartLineNo);
      }
      if (struct.isSetPortLineNo()) {
        oprot.writeString(struct.PortLineNo);
      }
      if (struct.isSetPortNo()) {
        oprot.writeI32(struct.PortNo);
      }
      if (struct.isSetPortKey()) {
        oprot.writeString(struct.PortKey);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Port struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.BoardId = iprot.readI32();
        struct.setBoardIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.BoardName = iprot.readString();
        struct.setBoardNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.PortSpeed = iprot.readString();
        struct.setPortSpeedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.Direction = iprot.readI32();
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Mode = iprot.readI32();
        struct.setModeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.PortType = iprot.readI32();
        struct.setPortTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.PortName = iprot.readString();
        struct.setPortNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.PortGroupType = iprot.readI32();
        struct.setPortGroupTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.PortGroupName = iprot.readString();
        struct.setPortGroupNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.IsSignedPort = iprot.readI32();
        struct.setIsSignedPortIsSet(true);
      }
      if (incoming.get(10)) {
        struct.PortInOut = iprot.readI32();
        struct.setPortInOutIsSet(true);
      }
      if (incoming.get(11)) {
        struct.TribPortNumber = iprot.readI32();
        struct.setTribPortNumberIsSet(true);
      }
      if (incoming.get(12)) {
        struct.StartStm1No = iprot.readI32();
        struct.setStartStm1NoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.StartTribNo = iprot.readI32();
        struct.setStartTribNoIsSet(true);
      }
      if (incoming.get(14)) {
        struct.StartLineNo = iprot.readI32();
        struct.setStartLineNoIsSet(true);
      }
      if (incoming.get(15)) {
        struct.PortLineNo = iprot.readString();
        struct.setPortLineNoIsSet(true);
      }
      if (incoming.get(16)) {
        struct.PortNo = iprot.readI32();
        struct.setPortNoIsSet(true);
      }
      if (incoming.get(17)) {
        struct.PortKey = iprot.readString();
        struct.setPortKeyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

