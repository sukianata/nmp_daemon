/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fiberhome.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-20")
public class TopoLine implements org.apache.thrift.TBase<TopoLine, TopoLine._Fields>, java.io.Serializable, Cloneable, Comparable<TopoLine> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopoLine");

  private static final org.apache.thrift.protocol.TField TOPO_LINK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("TopoLinkId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ProjectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOPO_NODE_ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("TopoNodeId1", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField BOARD_ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("BoardId1", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PORT_NAME1_FIELD_DESC = new org.apache.thrift.protocol.TField("PortName1", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PORT_X1_FIELD_DESC = new org.apache.thrift.protocol.TField("PortX1", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PORT_Y1_FIELD_DESC = new org.apache.thrift.protocol.TField("PortY1", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PORT_Z1_FIELD_DESC = new org.apache.thrift.protocol.TField("PortZ1", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TOPO_NODE_ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("TopoNodeId2", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField BOARD_ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("BoardId2", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PORT_NAME2_FIELD_DESC = new org.apache.thrift.protocol.TField("PortName2", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PORT_X2_FIELD_DESC = new org.apache.thrift.protocol.TField("PortX2", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PORT_Y2_FIELD_DESC = new org.apache.thrift.protocol.TField("PortY2", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PORT_Z2_FIELD_DESC = new org.apache.thrift.protocol.TField("PortZ2", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField LINK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("LinkNo", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField LINK_SPEED_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("LinkSpeedNo", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField LINK_SPEED_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("LinkSpeedName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField LINK_DRAW_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("LinkDrawParam", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField TOPO_LINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("TopoLinkType", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField PORT_KEY1_FIELD_DESC = new org.apache.thrift.protocol.TField("PortKey1", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField PORT_KEY2_FIELD_DESC = new org.apache.thrift.protocol.TField("PortKey2", org.apache.thrift.protocol.TType.STRING, (short)21);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TopoLineStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TopoLineTupleSchemeFactory();

  public int TopoLinkId; // required
  public int ProjectId; // required
  public int TopoNodeId1; // required
  public int BoardId1; // required
  public java.lang.String PortName1; // required
  public int PortX1; // required
  public int PortY1; // required
  public int PortZ1; // required
  public int TopoNodeId2; // required
  public int BoardId2; // required
  public java.lang.String PortName2; // required
  public int PortX2; // required
  public int PortY2; // required
  public int PortZ2; // required
  public int LinkNo; // required
  public int LinkSpeedNo; // required
  public java.lang.String LinkSpeedName; // required
  public java.lang.String LinkDrawParam; // required
  public java.lang.String TopoLinkType; // required
  public java.lang.String PortKey1; // required
  public java.lang.String PortKey2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOPO_LINK_ID((short)1, "TopoLinkId"),
    PROJECT_ID((short)2, "ProjectId"),
    TOPO_NODE_ID1((short)3, "TopoNodeId1"),
    BOARD_ID1((short)4, "BoardId1"),
    PORT_NAME1((short)5, "PortName1"),
    PORT_X1((short)6, "PortX1"),
    PORT_Y1((short)7, "PortY1"),
    PORT_Z1((short)8, "PortZ1"),
    TOPO_NODE_ID2((short)9, "TopoNodeId2"),
    BOARD_ID2((short)10, "BoardId2"),
    PORT_NAME2((short)11, "PortName2"),
    PORT_X2((short)12, "PortX2"),
    PORT_Y2((short)13, "PortY2"),
    PORT_Z2((short)14, "PortZ2"),
    LINK_NO((short)15, "LinkNo"),
    LINK_SPEED_NO((short)16, "LinkSpeedNo"),
    LINK_SPEED_NAME((short)17, "LinkSpeedName"),
    LINK_DRAW_PARAM((short)18, "LinkDrawParam"),
    TOPO_LINK_TYPE((short)19, "TopoLinkType"),
    PORT_KEY1((short)20, "PortKey1"),
    PORT_KEY2((short)21, "PortKey2");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOPO_LINK_ID
          return TOPO_LINK_ID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // TOPO_NODE_ID1
          return TOPO_NODE_ID1;
        case 4: // BOARD_ID1
          return BOARD_ID1;
        case 5: // PORT_NAME1
          return PORT_NAME1;
        case 6: // PORT_X1
          return PORT_X1;
        case 7: // PORT_Y1
          return PORT_Y1;
        case 8: // PORT_Z1
          return PORT_Z1;
        case 9: // TOPO_NODE_ID2
          return TOPO_NODE_ID2;
        case 10: // BOARD_ID2
          return BOARD_ID2;
        case 11: // PORT_NAME2
          return PORT_NAME2;
        case 12: // PORT_X2
          return PORT_X2;
        case 13: // PORT_Y2
          return PORT_Y2;
        case 14: // PORT_Z2
          return PORT_Z2;
        case 15: // LINK_NO
          return LINK_NO;
        case 16: // LINK_SPEED_NO
          return LINK_SPEED_NO;
        case 17: // LINK_SPEED_NAME
          return LINK_SPEED_NAME;
        case 18: // LINK_DRAW_PARAM
          return LINK_DRAW_PARAM;
        case 19: // TOPO_LINK_TYPE
          return TOPO_LINK_TYPE;
        case 20: // PORT_KEY1
          return PORT_KEY1;
        case 21: // PORT_KEY2
          return PORT_KEY2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOPOLINKID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __TOPONODEID1_ISSET_ID = 2;
  private static final int __BOARDID1_ISSET_ID = 3;
  private static final int __PORTX1_ISSET_ID = 4;
  private static final int __PORTY1_ISSET_ID = 5;
  private static final int __PORTZ1_ISSET_ID = 6;
  private static final int __TOPONODEID2_ISSET_ID = 7;
  private static final int __BOARDID2_ISSET_ID = 8;
  private static final int __PORTX2_ISSET_ID = 9;
  private static final int __PORTY2_ISSET_ID = 10;
  private static final int __PORTZ2_ISSET_ID = 11;
  private static final int __LINKNO_ISSET_ID = 12;
  private static final int __LINKSPEEDNO_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOPO_LINK_ID, new org.apache.thrift.meta_data.FieldMetaData("TopoLinkId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("ProjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOPO_NODE_ID1, new org.apache.thrift.meta_data.FieldMetaData("TopoNodeId1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOARD_ID1, new org.apache.thrift.meta_data.FieldMetaData("BoardId1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PORT_NAME1, new org.apache.thrift.meta_data.FieldMetaData("PortName1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT_X1, new org.apache.thrift.meta_data.FieldMetaData("PortX1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PORT_Y1, new org.apache.thrift.meta_data.FieldMetaData("PortY1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PORT_Z1, new org.apache.thrift.meta_data.FieldMetaData("PortZ1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOPO_NODE_ID2, new org.apache.thrift.meta_data.FieldMetaData("TopoNodeId2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOARD_ID2, new org.apache.thrift.meta_data.FieldMetaData("BoardId2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PORT_NAME2, new org.apache.thrift.meta_data.FieldMetaData("PortName2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT_X2, new org.apache.thrift.meta_data.FieldMetaData("PortX2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PORT_Y2, new org.apache.thrift.meta_data.FieldMetaData("PortY2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PORT_Z2, new org.apache.thrift.meta_data.FieldMetaData("PortZ2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LINK_NO, new org.apache.thrift.meta_data.FieldMetaData("LinkNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LINK_SPEED_NO, new org.apache.thrift.meta_data.FieldMetaData("LinkSpeedNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LINK_SPEED_NAME, new org.apache.thrift.meta_data.FieldMetaData("LinkSpeedName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_DRAW_PARAM, new org.apache.thrift.meta_data.FieldMetaData("LinkDrawParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPO_LINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("TopoLinkType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT_KEY1, new org.apache.thrift.meta_data.FieldMetaData("PortKey1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT_KEY2, new org.apache.thrift.meta_data.FieldMetaData("PortKey2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopoLine.class, metaDataMap);
  }

  public TopoLine() {
  }

  public TopoLine(
    int TopoLinkId,
    int ProjectId,
    int TopoNodeId1,
    int BoardId1,
    java.lang.String PortName1,
    int PortX1,
    int PortY1,
    int PortZ1,
    int TopoNodeId2,
    int BoardId2,
    java.lang.String PortName2,
    int PortX2,
    int PortY2,
    int PortZ2,
    int LinkNo,
    int LinkSpeedNo,
    java.lang.String LinkSpeedName,
    java.lang.String LinkDrawParam,
    java.lang.String TopoLinkType,
    java.lang.String PortKey1,
    java.lang.String PortKey2)
  {
    this();
    this.TopoLinkId = TopoLinkId;
    setTopoLinkIdIsSet(true);
    this.ProjectId = ProjectId;
    setProjectIdIsSet(true);
    this.TopoNodeId1 = TopoNodeId1;
    setTopoNodeId1IsSet(true);
    this.BoardId1 = BoardId1;
    setBoardId1IsSet(true);
    this.PortName1 = PortName1;
    this.PortX1 = PortX1;
    setPortX1IsSet(true);
    this.PortY1 = PortY1;
    setPortY1IsSet(true);
    this.PortZ1 = PortZ1;
    setPortZ1IsSet(true);
    this.TopoNodeId2 = TopoNodeId2;
    setTopoNodeId2IsSet(true);
    this.BoardId2 = BoardId2;
    setBoardId2IsSet(true);
    this.PortName2 = PortName2;
    this.PortX2 = PortX2;
    setPortX2IsSet(true);
    this.PortY2 = PortY2;
    setPortY2IsSet(true);
    this.PortZ2 = PortZ2;
    setPortZ2IsSet(true);
    this.LinkNo = LinkNo;
    setLinkNoIsSet(true);
    this.LinkSpeedNo = LinkSpeedNo;
    setLinkSpeedNoIsSet(true);
    this.LinkSpeedName = LinkSpeedName;
    this.LinkDrawParam = LinkDrawParam;
    this.TopoLinkType = TopoLinkType;
    this.PortKey1 = PortKey1;
    this.PortKey2 = PortKey2;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopoLine(TopoLine other) {
    __isset_bitfield = other.__isset_bitfield;
    this.TopoLinkId = other.TopoLinkId;
    this.ProjectId = other.ProjectId;
    this.TopoNodeId1 = other.TopoNodeId1;
    this.BoardId1 = other.BoardId1;
    if (other.isSetPortName1()) {
      this.PortName1 = other.PortName1;
    }
    this.PortX1 = other.PortX1;
    this.PortY1 = other.PortY1;
    this.PortZ1 = other.PortZ1;
    this.TopoNodeId2 = other.TopoNodeId2;
    this.BoardId2 = other.BoardId2;
    if (other.isSetPortName2()) {
      this.PortName2 = other.PortName2;
    }
    this.PortX2 = other.PortX2;
    this.PortY2 = other.PortY2;
    this.PortZ2 = other.PortZ2;
    this.LinkNo = other.LinkNo;
    this.LinkSpeedNo = other.LinkSpeedNo;
    if (other.isSetLinkSpeedName()) {
      this.LinkSpeedName = other.LinkSpeedName;
    }
    if (other.isSetLinkDrawParam()) {
      this.LinkDrawParam = other.LinkDrawParam;
    }
    if (other.isSetTopoLinkType()) {
      this.TopoLinkType = other.TopoLinkType;
    }
    if (other.isSetPortKey1()) {
      this.PortKey1 = other.PortKey1;
    }
    if (other.isSetPortKey2()) {
      this.PortKey2 = other.PortKey2;
    }
  }

  public TopoLine deepCopy() {
    return new TopoLine(this);
  }

  @Override
  public void clear() {
    setTopoLinkIdIsSet(false);
    this.TopoLinkId = 0;
    setProjectIdIsSet(false);
    this.ProjectId = 0;
    setTopoNodeId1IsSet(false);
    this.TopoNodeId1 = 0;
    setBoardId1IsSet(false);
    this.BoardId1 = 0;
    this.PortName1 = null;
    setPortX1IsSet(false);
    this.PortX1 = 0;
    setPortY1IsSet(false);
    this.PortY1 = 0;
    setPortZ1IsSet(false);
    this.PortZ1 = 0;
    setTopoNodeId2IsSet(false);
    this.TopoNodeId2 = 0;
    setBoardId2IsSet(false);
    this.BoardId2 = 0;
    this.PortName2 = null;
    setPortX2IsSet(false);
    this.PortX2 = 0;
    setPortY2IsSet(false);
    this.PortY2 = 0;
    setPortZ2IsSet(false);
    this.PortZ2 = 0;
    setLinkNoIsSet(false);
    this.LinkNo = 0;
    setLinkSpeedNoIsSet(false);
    this.LinkSpeedNo = 0;
    this.LinkSpeedName = null;
    this.LinkDrawParam = null;
    this.TopoLinkType = null;
    this.PortKey1 = null;
    this.PortKey2 = null;
  }

  public int getTopoLinkId() {
    return this.TopoLinkId;
  }

  public TopoLine setTopoLinkId(int TopoLinkId) {
    this.TopoLinkId = TopoLinkId;
    setTopoLinkIdIsSet(true);
    return this;
  }

  public void unsetTopoLinkId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPOLINKID_ISSET_ID);
  }

  /** Returns true if field TopoLinkId is set (has been assigned a value) and false otherwise */
  public boolean isSetTopoLinkId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPOLINKID_ISSET_ID);
  }

  public void setTopoLinkIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPOLINKID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.ProjectId;
  }

  public TopoLine setProjectId(int ProjectId) {
    this.ProjectId = ProjectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field ProjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getTopoNodeId1() {
    return this.TopoNodeId1;
  }

  public TopoLine setTopoNodeId1(int TopoNodeId1) {
    this.TopoNodeId1 = TopoNodeId1;
    setTopoNodeId1IsSet(true);
    return this;
  }

  public void unsetTopoNodeId1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPONODEID1_ISSET_ID);
  }

  /** Returns true if field TopoNodeId1 is set (has been assigned a value) and false otherwise */
  public boolean isSetTopoNodeId1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPONODEID1_ISSET_ID);
  }

  public void setTopoNodeId1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPONODEID1_ISSET_ID, value);
  }

  public int getBoardId1() {
    return this.BoardId1;
  }

  public TopoLine setBoardId1(int BoardId1) {
    this.BoardId1 = BoardId1;
    setBoardId1IsSet(true);
    return this;
  }

  public void unsetBoardId1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOARDID1_ISSET_ID);
  }

  /** Returns true if field BoardId1 is set (has been assigned a value) and false otherwise */
  public boolean isSetBoardId1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOARDID1_ISSET_ID);
  }

  public void setBoardId1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOARDID1_ISSET_ID, value);
  }

  public java.lang.String getPortName1() {
    return this.PortName1;
  }

  public TopoLine setPortName1(java.lang.String PortName1) {
    this.PortName1 = PortName1;
    return this;
  }

  public void unsetPortName1() {
    this.PortName1 = null;
  }

  /** Returns true if field PortName1 is set (has been assigned a value) and false otherwise */
  public boolean isSetPortName1() {
    return this.PortName1 != null;
  }

  public void setPortName1IsSet(boolean value) {
    if (!value) {
      this.PortName1 = null;
    }
  }

  public int getPortX1() {
    return this.PortX1;
  }

  public TopoLine setPortX1(int PortX1) {
    this.PortX1 = PortX1;
    setPortX1IsSet(true);
    return this;
  }

  public void unsetPortX1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORTX1_ISSET_ID);
  }

  /** Returns true if field PortX1 is set (has been assigned a value) and false otherwise */
  public boolean isSetPortX1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORTX1_ISSET_ID);
  }

  public void setPortX1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORTX1_ISSET_ID, value);
  }

  public int getPortY1() {
    return this.PortY1;
  }

  public TopoLine setPortY1(int PortY1) {
    this.PortY1 = PortY1;
    setPortY1IsSet(true);
    return this;
  }

  public void unsetPortY1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORTY1_ISSET_ID);
  }

  /** Returns true if field PortY1 is set (has been assigned a value) and false otherwise */
  public boolean isSetPortY1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORTY1_ISSET_ID);
  }

  public void setPortY1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORTY1_ISSET_ID, value);
  }

  public int getPortZ1() {
    return this.PortZ1;
  }

  public TopoLine setPortZ1(int PortZ1) {
    this.PortZ1 = PortZ1;
    setPortZ1IsSet(true);
    return this;
  }

  public void unsetPortZ1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORTZ1_ISSET_ID);
  }

  /** Returns true if field PortZ1 is set (has been assigned a value) and false otherwise */
  public boolean isSetPortZ1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORTZ1_ISSET_ID);
  }

  public void setPortZ1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORTZ1_ISSET_ID, value);
  }

  public int getTopoNodeId2() {
    return this.TopoNodeId2;
  }

  public TopoLine setTopoNodeId2(int TopoNodeId2) {
    this.TopoNodeId2 = TopoNodeId2;
    setTopoNodeId2IsSet(true);
    return this;
  }

  public void unsetTopoNodeId2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPONODEID2_ISSET_ID);
  }

  /** Returns true if field TopoNodeId2 is set (has been assigned a value) and false otherwise */
  public boolean isSetTopoNodeId2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPONODEID2_ISSET_ID);
  }

  public void setTopoNodeId2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPONODEID2_ISSET_ID, value);
  }

  public int getBoardId2() {
    return this.BoardId2;
  }

  public TopoLine setBoardId2(int BoardId2) {
    this.BoardId2 = BoardId2;
    setBoardId2IsSet(true);
    return this;
  }

  public void unsetBoardId2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOARDID2_ISSET_ID);
  }

  /** Returns true if field BoardId2 is set (has been assigned a value) and false otherwise */
  public boolean isSetBoardId2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOARDID2_ISSET_ID);
  }

  public void setBoardId2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOARDID2_ISSET_ID, value);
  }

  public java.lang.String getPortName2() {
    return this.PortName2;
  }

  public TopoLine setPortName2(java.lang.String PortName2) {
    this.PortName2 = PortName2;
    return this;
  }

  public void unsetPortName2() {
    this.PortName2 = null;
  }

  /** Returns true if field PortName2 is set (has been assigned a value) and false otherwise */
  public boolean isSetPortName2() {
    return this.PortName2 != null;
  }

  public void setPortName2IsSet(boolean value) {
    if (!value) {
      this.PortName2 = null;
    }
  }

  public int getPortX2() {
    return this.PortX2;
  }

  public TopoLine setPortX2(int PortX2) {
    this.PortX2 = PortX2;
    setPortX2IsSet(true);
    return this;
  }

  public void unsetPortX2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORTX2_ISSET_ID);
  }

  /** Returns true if field PortX2 is set (has been assigned a value) and false otherwise */
  public boolean isSetPortX2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORTX2_ISSET_ID);
  }

  public void setPortX2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORTX2_ISSET_ID, value);
  }

  public int getPortY2() {
    return this.PortY2;
  }

  public TopoLine setPortY2(int PortY2) {
    this.PortY2 = PortY2;
    setPortY2IsSet(true);
    return this;
  }

  public void unsetPortY2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORTY2_ISSET_ID);
  }

  /** Returns true if field PortY2 is set (has been assigned a value) and false otherwise */
  public boolean isSetPortY2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORTY2_ISSET_ID);
  }

  public void setPortY2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORTY2_ISSET_ID, value);
  }

  public int getPortZ2() {
    return this.PortZ2;
  }

  public TopoLine setPortZ2(int PortZ2) {
    this.PortZ2 = PortZ2;
    setPortZ2IsSet(true);
    return this;
  }

  public void unsetPortZ2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORTZ2_ISSET_ID);
  }

  /** Returns true if field PortZ2 is set (has been assigned a value) and false otherwise */
  public boolean isSetPortZ2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORTZ2_ISSET_ID);
  }

  public void setPortZ2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORTZ2_ISSET_ID, value);
  }

  public int getLinkNo() {
    return this.LinkNo;
  }

  public TopoLine setLinkNo(int LinkNo) {
    this.LinkNo = LinkNo;
    setLinkNoIsSet(true);
    return this;
  }

  public void unsetLinkNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINKNO_ISSET_ID);
  }

  /** Returns true if field LinkNo is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINKNO_ISSET_ID);
  }

  public void setLinkNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINKNO_ISSET_ID, value);
  }

  public int getLinkSpeedNo() {
    return this.LinkSpeedNo;
  }

  public TopoLine setLinkSpeedNo(int LinkSpeedNo) {
    this.LinkSpeedNo = LinkSpeedNo;
    setLinkSpeedNoIsSet(true);
    return this;
  }

  public void unsetLinkSpeedNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINKSPEEDNO_ISSET_ID);
  }

  /** Returns true if field LinkSpeedNo is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkSpeedNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINKSPEEDNO_ISSET_ID);
  }

  public void setLinkSpeedNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINKSPEEDNO_ISSET_ID, value);
  }

  public java.lang.String getLinkSpeedName() {
    return this.LinkSpeedName;
  }

  public TopoLine setLinkSpeedName(java.lang.String LinkSpeedName) {
    this.LinkSpeedName = LinkSpeedName;
    return this;
  }

  public void unsetLinkSpeedName() {
    this.LinkSpeedName = null;
  }

  /** Returns true if field LinkSpeedName is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkSpeedName() {
    return this.LinkSpeedName != null;
  }

  public void setLinkSpeedNameIsSet(boolean value) {
    if (!value) {
      this.LinkSpeedName = null;
    }
  }

  public java.lang.String getLinkDrawParam() {
    return this.LinkDrawParam;
  }

  public TopoLine setLinkDrawParam(java.lang.String LinkDrawParam) {
    this.LinkDrawParam = LinkDrawParam;
    return this;
  }

  public void unsetLinkDrawParam() {
    this.LinkDrawParam = null;
  }

  /** Returns true if field LinkDrawParam is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkDrawParam() {
    return this.LinkDrawParam != null;
  }

  public void setLinkDrawParamIsSet(boolean value) {
    if (!value) {
      this.LinkDrawParam = null;
    }
  }

  public java.lang.String getTopoLinkType() {
    return this.TopoLinkType;
  }

  public TopoLine setTopoLinkType(java.lang.String TopoLinkType) {
    this.TopoLinkType = TopoLinkType;
    return this;
  }

  public void unsetTopoLinkType() {
    this.TopoLinkType = null;
  }

  /** Returns true if field TopoLinkType is set (has been assigned a value) and false otherwise */
  public boolean isSetTopoLinkType() {
    return this.TopoLinkType != null;
  }

  public void setTopoLinkTypeIsSet(boolean value) {
    if (!value) {
      this.TopoLinkType = null;
    }
  }

  public java.lang.String getPortKey1() {
    return this.PortKey1;
  }

  public TopoLine setPortKey1(java.lang.String PortKey1) {
    this.PortKey1 = PortKey1;
    return this;
  }

  public void unsetPortKey1() {
    this.PortKey1 = null;
  }

  /** Returns true if field PortKey1 is set (has been assigned a value) and false otherwise */
  public boolean isSetPortKey1() {
    return this.PortKey1 != null;
  }

  public void setPortKey1IsSet(boolean value) {
    if (!value) {
      this.PortKey1 = null;
    }
  }

  public java.lang.String getPortKey2() {
    return this.PortKey2;
  }

  public TopoLine setPortKey2(java.lang.String PortKey2) {
    this.PortKey2 = PortKey2;
    return this;
  }

  public void unsetPortKey2() {
    this.PortKey2 = null;
  }

  /** Returns true if field PortKey2 is set (has been assigned a value) and false otherwise */
  public boolean isSetPortKey2() {
    return this.PortKey2 != null;
  }

  public void setPortKey2IsSet(boolean value) {
    if (!value) {
      this.PortKey2 = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TOPO_LINK_ID:
      if (value == null) {
        unsetTopoLinkId();
      } else {
        setTopoLinkId((java.lang.Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((java.lang.Integer)value);
      }
      break;

    case TOPO_NODE_ID1:
      if (value == null) {
        unsetTopoNodeId1();
      } else {
        setTopoNodeId1((java.lang.Integer)value);
      }
      break;

    case BOARD_ID1:
      if (value == null) {
        unsetBoardId1();
      } else {
        setBoardId1((java.lang.Integer)value);
      }
      break;

    case PORT_NAME1:
      if (value == null) {
        unsetPortName1();
      } else {
        setPortName1((java.lang.String)value);
      }
      break;

    case PORT_X1:
      if (value == null) {
        unsetPortX1();
      } else {
        setPortX1((java.lang.Integer)value);
      }
      break;

    case PORT_Y1:
      if (value == null) {
        unsetPortY1();
      } else {
        setPortY1((java.lang.Integer)value);
      }
      break;

    case PORT_Z1:
      if (value == null) {
        unsetPortZ1();
      } else {
        setPortZ1((java.lang.Integer)value);
      }
      break;

    case TOPO_NODE_ID2:
      if (value == null) {
        unsetTopoNodeId2();
      } else {
        setTopoNodeId2((java.lang.Integer)value);
      }
      break;

    case BOARD_ID2:
      if (value == null) {
        unsetBoardId2();
      } else {
        setBoardId2((java.lang.Integer)value);
      }
      break;

    case PORT_NAME2:
      if (value == null) {
        unsetPortName2();
      } else {
        setPortName2((java.lang.String)value);
      }
      break;

    case PORT_X2:
      if (value == null) {
        unsetPortX2();
      } else {
        setPortX2((java.lang.Integer)value);
      }
      break;

    case PORT_Y2:
      if (value == null) {
        unsetPortY2();
      } else {
        setPortY2((java.lang.Integer)value);
      }
      break;

    case PORT_Z2:
      if (value == null) {
        unsetPortZ2();
      } else {
        setPortZ2((java.lang.Integer)value);
      }
      break;

    case LINK_NO:
      if (value == null) {
        unsetLinkNo();
      } else {
        setLinkNo((java.lang.Integer)value);
      }
      break;

    case LINK_SPEED_NO:
      if (value == null) {
        unsetLinkSpeedNo();
      } else {
        setLinkSpeedNo((java.lang.Integer)value);
      }
      break;

    case LINK_SPEED_NAME:
      if (value == null) {
        unsetLinkSpeedName();
      } else {
        setLinkSpeedName((java.lang.String)value);
      }
      break;

    case LINK_DRAW_PARAM:
      if (value == null) {
        unsetLinkDrawParam();
      } else {
        setLinkDrawParam((java.lang.String)value);
      }
      break;

    case TOPO_LINK_TYPE:
      if (value == null) {
        unsetTopoLinkType();
      } else {
        setTopoLinkType((java.lang.String)value);
      }
      break;

    case PORT_KEY1:
      if (value == null) {
        unsetPortKey1();
      } else {
        setPortKey1((java.lang.String)value);
      }
      break;

    case PORT_KEY2:
      if (value == null) {
        unsetPortKey2();
      } else {
        setPortKey2((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TOPO_LINK_ID:
      return getTopoLinkId();

    case PROJECT_ID:
      return getProjectId();

    case TOPO_NODE_ID1:
      return getTopoNodeId1();

    case BOARD_ID1:
      return getBoardId1();

    case PORT_NAME1:
      return getPortName1();

    case PORT_X1:
      return getPortX1();

    case PORT_Y1:
      return getPortY1();

    case PORT_Z1:
      return getPortZ1();

    case TOPO_NODE_ID2:
      return getTopoNodeId2();

    case BOARD_ID2:
      return getBoardId2();

    case PORT_NAME2:
      return getPortName2();

    case PORT_X2:
      return getPortX2();

    case PORT_Y2:
      return getPortY2();

    case PORT_Z2:
      return getPortZ2();

    case LINK_NO:
      return getLinkNo();

    case LINK_SPEED_NO:
      return getLinkSpeedNo();

    case LINK_SPEED_NAME:
      return getLinkSpeedName();

    case LINK_DRAW_PARAM:
      return getLinkDrawParam();

    case TOPO_LINK_TYPE:
      return getTopoLinkType();

    case PORT_KEY1:
      return getPortKey1();

    case PORT_KEY2:
      return getPortKey2();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TOPO_LINK_ID:
      return isSetTopoLinkId();
    case PROJECT_ID:
      return isSetProjectId();
    case TOPO_NODE_ID1:
      return isSetTopoNodeId1();
    case BOARD_ID1:
      return isSetBoardId1();
    case PORT_NAME1:
      return isSetPortName1();
    case PORT_X1:
      return isSetPortX1();
    case PORT_Y1:
      return isSetPortY1();
    case PORT_Z1:
      return isSetPortZ1();
    case TOPO_NODE_ID2:
      return isSetTopoNodeId2();
    case BOARD_ID2:
      return isSetBoardId2();
    case PORT_NAME2:
      return isSetPortName2();
    case PORT_X2:
      return isSetPortX2();
    case PORT_Y2:
      return isSetPortY2();
    case PORT_Z2:
      return isSetPortZ2();
    case LINK_NO:
      return isSetLinkNo();
    case LINK_SPEED_NO:
      return isSetLinkSpeedNo();
    case LINK_SPEED_NAME:
      return isSetLinkSpeedName();
    case LINK_DRAW_PARAM:
      return isSetLinkDrawParam();
    case TOPO_LINK_TYPE:
      return isSetTopoLinkType();
    case PORT_KEY1:
      return isSetPortKey1();
    case PORT_KEY2:
      return isSetPortKey2();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TopoLine)
      return this.equals((TopoLine)that);
    return false;
  }

  public boolean equals(TopoLine that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_TopoLinkId = true;
    boolean that_present_TopoLinkId = true;
    if (this_present_TopoLinkId || that_present_TopoLinkId) {
      if (!(this_present_TopoLinkId && that_present_TopoLinkId))
        return false;
      if (this.TopoLinkId != that.TopoLinkId)
        return false;
    }

    boolean this_present_ProjectId = true;
    boolean that_present_ProjectId = true;
    if (this_present_ProjectId || that_present_ProjectId) {
      if (!(this_present_ProjectId && that_present_ProjectId))
        return false;
      if (this.ProjectId != that.ProjectId)
        return false;
    }

    boolean this_present_TopoNodeId1 = true;
    boolean that_present_TopoNodeId1 = true;
    if (this_present_TopoNodeId1 || that_present_TopoNodeId1) {
      if (!(this_present_TopoNodeId1 && that_present_TopoNodeId1))
        return false;
      if (this.TopoNodeId1 != that.TopoNodeId1)
        return false;
    }

    boolean this_present_BoardId1 = true;
    boolean that_present_BoardId1 = true;
    if (this_present_BoardId1 || that_present_BoardId1) {
      if (!(this_present_BoardId1 && that_present_BoardId1))
        return false;
      if (this.BoardId1 != that.BoardId1)
        return false;
    }

    boolean this_present_PortName1 = true && this.isSetPortName1();
    boolean that_present_PortName1 = true && that.isSetPortName1();
    if (this_present_PortName1 || that_present_PortName1) {
      if (!(this_present_PortName1 && that_present_PortName1))
        return false;
      if (!this.PortName1.equals(that.PortName1))
        return false;
    }

    boolean this_present_PortX1 = true;
    boolean that_present_PortX1 = true;
    if (this_present_PortX1 || that_present_PortX1) {
      if (!(this_present_PortX1 && that_present_PortX1))
        return false;
      if (this.PortX1 != that.PortX1)
        return false;
    }

    boolean this_present_PortY1 = true;
    boolean that_present_PortY1 = true;
    if (this_present_PortY1 || that_present_PortY1) {
      if (!(this_present_PortY1 && that_present_PortY1))
        return false;
      if (this.PortY1 != that.PortY1)
        return false;
    }

    boolean this_present_PortZ1 = true;
    boolean that_present_PortZ1 = true;
    if (this_present_PortZ1 || that_present_PortZ1) {
      if (!(this_present_PortZ1 && that_present_PortZ1))
        return false;
      if (this.PortZ1 != that.PortZ1)
        return false;
    }

    boolean this_present_TopoNodeId2 = true;
    boolean that_present_TopoNodeId2 = true;
    if (this_present_TopoNodeId2 || that_present_TopoNodeId2) {
      if (!(this_present_TopoNodeId2 && that_present_TopoNodeId2))
        return false;
      if (this.TopoNodeId2 != that.TopoNodeId2)
        return false;
    }

    boolean this_present_BoardId2 = true;
    boolean that_present_BoardId2 = true;
    if (this_present_BoardId2 || that_present_BoardId2) {
      if (!(this_present_BoardId2 && that_present_BoardId2))
        return false;
      if (this.BoardId2 != that.BoardId2)
        return false;
    }

    boolean this_present_PortName2 = true && this.isSetPortName2();
    boolean that_present_PortName2 = true && that.isSetPortName2();
    if (this_present_PortName2 || that_present_PortName2) {
      if (!(this_present_PortName2 && that_present_PortName2))
        return false;
      if (!this.PortName2.equals(that.PortName2))
        return false;
    }

    boolean this_present_PortX2 = true;
    boolean that_present_PortX2 = true;
    if (this_present_PortX2 || that_present_PortX2) {
      if (!(this_present_PortX2 && that_present_PortX2))
        return false;
      if (this.PortX2 != that.PortX2)
        return false;
    }

    boolean this_present_PortY2 = true;
    boolean that_present_PortY2 = true;
    if (this_present_PortY2 || that_present_PortY2) {
      if (!(this_present_PortY2 && that_present_PortY2))
        return false;
      if (this.PortY2 != that.PortY2)
        return false;
    }

    boolean this_present_PortZ2 = true;
    boolean that_present_PortZ2 = true;
    if (this_present_PortZ2 || that_present_PortZ2) {
      if (!(this_present_PortZ2 && that_present_PortZ2))
        return false;
      if (this.PortZ2 != that.PortZ2)
        return false;
    }

    boolean this_present_LinkNo = true;
    boolean that_present_LinkNo = true;
    if (this_present_LinkNo || that_present_LinkNo) {
      if (!(this_present_LinkNo && that_present_LinkNo))
        return false;
      if (this.LinkNo != that.LinkNo)
        return false;
    }

    boolean this_present_LinkSpeedNo = true;
    boolean that_present_LinkSpeedNo = true;
    if (this_present_LinkSpeedNo || that_present_LinkSpeedNo) {
      if (!(this_present_LinkSpeedNo && that_present_LinkSpeedNo))
        return false;
      if (this.LinkSpeedNo != that.LinkSpeedNo)
        return false;
    }

    boolean this_present_LinkSpeedName = true && this.isSetLinkSpeedName();
    boolean that_present_LinkSpeedName = true && that.isSetLinkSpeedName();
    if (this_present_LinkSpeedName || that_present_LinkSpeedName) {
      if (!(this_present_LinkSpeedName && that_present_LinkSpeedName))
        return false;
      if (!this.LinkSpeedName.equals(that.LinkSpeedName))
        return false;
    }

    boolean this_present_LinkDrawParam = true && this.isSetLinkDrawParam();
    boolean that_present_LinkDrawParam = true && that.isSetLinkDrawParam();
    if (this_present_LinkDrawParam || that_present_LinkDrawParam) {
      if (!(this_present_LinkDrawParam && that_present_LinkDrawParam))
        return false;
      if (!this.LinkDrawParam.equals(that.LinkDrawParam))
        return false;
    }

    boolean this_present_TopoLinkType = true && this.isSetTopoLinkType();
    boolean that_present_TopoLinkType = true && that.isSetTopoLinkType();
    if (this_present_TopoLinkType || that_present_TopoLinkType) {
      if (!(this_present_TopoLinkType && that_present_TopoLinkType))
        return false;
      if (!this.TopoLinkType.equals(that.TopoLinkType))
        return false;
    }

    boolean this_present_PortKey1 = true && this.isSetPortKey1();
    boolean that_present_PortKey1 = true && that.isSetPortKey1();
    if (this_present_PortKey1 || that_present_PortKey1) {
      if (!(this_present_PortKey1 && that_present_PortKey1))
        return false;
      if (!this.PortKey1.equals(that.PortKey1))
        return false;
    }

    boolean this_present_PortKey2 = true && this.isSetPortKey2();
    boolean that_present_PortKey2 = true && that.isSetPortKey2();
    if (this_present_PortKey2 || that_present_PortKey2) {
      if (!(this_present_PortKey2 && that_present_PortKey2))
        return false;
      if (!this.PortKey2.equals(that.PortKey2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + TopoLinkId;

    hashCode = hashCode * 8191 + ProjectId;

    hashCode = hashCode * 8191 + TopoNodeId1;

    hashCode = hashCode * 8191 + BoardId1;

    hashCode = hashCode * 8191 + ((isSetPortName1()) ? 131071 : 524287);
    if (isSetPortName1())
      hashCode = hashCode * 8191 + PortName1.hashCode();

    hashCode = hashCode * 8191 + PortX1;

    hashCode = hashCode * 8191 + PortY1;

    hashCode = hashCode * 8191 + PortZ1;

    hashCode = hashCode * 8191 + TopoNodeId2;

    hashCode = hashCode * 8191 + BoardId2;

    hashCode = hashCode * 8191 + ((isSetPortName2()) ? 131071 : 524287);
    if (isSetPortName2())
      hashCode = hashCode * 8191 + PortName2.hashCode();

    hashCode = hashCode * 8191 + PortX2;

    hashCode = hashCode * 8191 + PortY2;

    hashCode = hashCode * 8191 + PortZ2;

    hashCode = hashCode * 8191 + LinkNo;

    hashCode = hashCode * 8191 + LinkSpeedNo;

    hashCode = hashCode * 8191 + ((isSetLinkSpeedName()) ? 131071 : 524287);
    if (isSetLinkSpeedName())
      hashCode = hashCode * 8191 + LinkSpeedName.hashCode();

    hashCode = hashCode * 8191 + ((isSetLinkDrawParam()) ? 131071 : 524287);
    if (isSetLinkDrawParam())
      hashCode = hashCode * 8191 + LinkDrawParam.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopoLinkType()) ? 131071 : 524287);
    if (isSetTopoLinkType())
      hashCode = hashCode * 8191 + TopoLinkType.hashCode();

    hashCode = hashCode * 8191 + ((isSetPortKey1()) ? 131071 : 524287);
    if (isSetPortKey1())
      hashCode = hashCode * 8191 + PortKey1.hashCode();

    hashCode = hashCode * 8191 + ((isSetPortKey2()) ? 131071 : 524287);
    if (isSetPortKey2())
      hashCode = hashCode * 8191 + PortKey2.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TopoLine other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTopoLinkId()).compareTo(other.isSetTopoLinkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopoLinkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TopoLinkId, other.TopoLinkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ProjectId, other.ProjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopoNodeId1()).compareTo(other.isSetTopoNodeId1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopoNodeId1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TopoNodeId1, other.TopoNodeId1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBoardId1()).compareTo(other.isSetBoardId1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoardId1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BoardId1, other.BoardId1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortName1()).compareTo(other.isSetPortName1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortName1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortName1, other.PortName1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortX1()).compareTo(other.isSetPortX1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortX1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortX1, other.PortX1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortY1()).compareTo(other.isSetPortY1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortY1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortY1, other.PortY1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortZ1()).compareTo(other.isSetPortZ1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortZ1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortZ1, other.PortZ1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopoNodeId2()).compareTo(other.isSetTopoNodeId2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopoNodeId2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TopoNodeId2, other.TopoNodeId2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBoardId2()).compareTo(other.isSetBoardId2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoardId2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BoardId2, other.BoardId2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortName2()).compareTo(other.isSetPortName2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortName2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortName2, other.PortName2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortX2()).compareTo(other.isSetPortX2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortX2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortX2, other.PortX2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortY2()).compareTo(other.isSetPortY2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortY2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortY2, other.PortY2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortZ2()).compareTo(other.isSetPortZ2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortZ2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortZ2, other.PortZ2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkNo()).compareTo(other.isSetLinkNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LinkNo, other.LinkNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkSpeedNo()).compareTo(other.isSetLinkSpeedNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkSpeedNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LinkSpeedNo, other.LinkSpeedNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkSpeedName()).compareTo(other.isSetLinkSpeedName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkSpeedName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LinkSpeedName, other.LinkSpeedName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkDrawParam()).compareTo(other.isSetLinkDrawParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkDrawParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LinkDrawParam, other.LinkDrawParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopoLinkType()).compareTo(other.isSetTopoLinkType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopoLinkType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TopoLinkType, other.TopoLinkType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortKey1()).compareTo(other.isSetPortKey1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortKey1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortKey1, other.PortKey1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortKey2()).compareTo(other.isSetPortKey2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortKey2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PortKey2, other.PortKey2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TopoLine(");
    boolean first = true;

    sb.append("TopoLinkId:");
    sb.append(this.TopoLinkId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ProjectId:");
    sb.append(this.ProjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("TopoNodeId1:");
    sb.append(this.TopoNodeId1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("BoardId1:");
    sb.append(this.BoardId1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortName1:");
    if (this.PortName1 == null) {
      sb.append("null");
    } else {
      sb.append(this.PortName1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortX1:");
    sb.append(this.PortX1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortY1:");
    sb.append(this.PortY1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortZ1:");
    sb.append(this.PortZ1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("TopoNodeId2:");
    sb.append(this.TopoNodeId2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("BoardId2:");
    sb.append(this.BoardId2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortName2:");
    if (this.PortName2 == null) {
      sb.append("null");
    } else {
      sb.append(this.PortName2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortX2:");
    sb.append(this.PortX2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortY2:");
    sb.append(this.PortY2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortZ2:");
    sb.append(this.PortZ2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("LinkNo:");
    sb.append(this.LinkNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("LinkSpeedNo:");
    sb.append(this.LinkSpeedNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("LinkSpeedName:");
    if (this.LinkSpeedName == null) {
      sb.append("null");
    } else {
      sb.append(this.LinkSpeedName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("LinkDrawParam:");
    if (this.LinkDrawParam == null) {
      sb.append("null");
    } else {
      sb.append(this.LinkDrawParam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TopoLinkType:");
    if (this.TopoLinkType == null) {
      sb.append("null");
    } else {
      sb.append(this.TopoLinkType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortKey1:");
    if (this.PortKey1 == null) {
      sb.append("null");
    } else {
      sb.append(this.PortKey1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PortKey2:");
    if (this.PortKey2 == null) {
      sb.append("null");
    } else {
      sb.append(this.PortKey2);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopoLineStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopoLineStandardScheme getScheme() {
      return new TopoLineStandardScheme();
    }
  }

  private static class TopoLineStandardScheme extends org.apache.thrift.scheme.StandardScheme<TopoLine> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TopoLine struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOPO_LINK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TopoLinkId = iprot.readI32();
              struct.setTopoLinkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ProjectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOPO_NODE_ID1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TopoNodeId1 = iprot.readI32();
              struct.setTopoNodeId1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BOARD_ID1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.BoardId1 = iprot.readI32();
              struct.setBoardId1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PORT_NAME1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PortName1 = iprot.readString();
              struct.setPortName1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PORT_X1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PortX1 = iprot.readI32();
              struct.setPortX1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PORT_Y1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PortY1 = iprot.readI32();
              struct.setPortY1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PORT_Z1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PortZ1 = iprot.readI32();
              struct.setPortZ1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOPO_NODE_ID2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TopoNodeId2 = iprot.readI32();
              struct.setTopoNodeId2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BOARD_ID2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.BoardId2 = iprot.readI32();
              struct.setBoardId2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PORT_NAME2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PortName2 = iprot.readString();
              struct.setPortName2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PORT_X2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PortX2 = iprot.readI32();
              struct.setPortX2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PORT_Y2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PortY2 = iprot.readI32();
              struct.setPortY2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PORT_Z2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PortZ2 = iprot.readI32();
              struct.setPortZ2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LINK_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.LinkNo = iprot.readI32();
              struct.setLinkNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LINK_SPEED_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.LinkSpeedNo = iprot.readI32();
              struct.setLinkSpeedNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LINK_SPEED_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.LinkSpeedName = iprot.readString();
              struct.setLinkSpeedNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LINK_DRAW_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.LinkDrawParam = iprot.readString();
              struct.setLinkDrawParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TOPO_LINK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.TopoLinkType = iprot.readString();
              struct.setTopoLinkTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PORT_KEY1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PortKey1 = iprot.readString();
              struct.setPortKey1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PORT_KEY2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PortKey2 = iprot.readString();
              struct.setPortKey2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TopoLine struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOPO_LINK_ID_FIELD_DESC);
      oprot.writeI32(struct.TopoLinkId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.ProjectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOPO_NODE_ID1_FIELD_DESC);
      oprot.writeI32(struct.TopoNodeId1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOARD_ID1_FIELD_DESC);
      oprot.writeI32(struct.BoardId1);
      oprot.writeFieldEnd();
      if (struct.PortName1 != null) {
        oprot.writeFieldBegin(PORT_NAME1_FIELD_DESC);
        oprot.writeString(struct.PortName1);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_X1_FIELD_DESC);
      oprot.writeI32(struct.PortX1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PORT_Y1_FIELD_DESC);
      oprot.writeI32(struct.PortY1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PORT_Z1_FIELD_DESC);
      oprot.writeI32(struct.PortZ1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOPO_NODE_ID2_FIELD_DESC);
      oprot.writeI32(struct.TopoNodeId2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOARD_ID2_FIELD_DESC);
      oprot.writeI32(struct.BoardId2);
      oprot.writeFieldEnd();
      if (struct.PortName2 != null) {
        oprot.writeFieldBegin(PORT_NAME2_FIELD_DESC);
        oprot.writeString(struct.PortName2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_X2_FIELD_DESC);
      oprot.writeI32(struct.PortX2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PORT_Y2_FIELD_DESC);
      oprot.writeI32(struct.PortY2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PORT_Z2_FIELD_DESC);
      oprot.writeI32(struct.PortZ2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LINK_NO_FIELD_DESC);
      oprot.writeI32(struct.LinkNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LINK_SPEED_NO_FIELD_DESC);
      oprot.writeI32(struct.LinkSpeedNo);
      oprot.writeFieldEnd();
      if (struct.LinkSpeedName != null) {
        oprot.writeFieldBegin(LINK_SPEED_NAME_FIELD_DESC);
        oprot.writeString(struct.LinkSpeedName);
        oprot.writeFieldEnd();
      }
      if (struct.LinkDrawParam != null) {
        oprot.writeFieldBegin(LINK_DRAW_PARAM_FIELD_DESC);
        oprot.writeString(struct.LinkDrawParam);
        oprot.writeFieldEnd();
      }
      if (struct.TopoLinkType != null) {
        oprot.writeFieldBegin(TOPO_LINK_TYPE_FIELD_DESC);
        oprot.writeString(struct.TopoLinkType);
        oprot.writeFieldEnd();
      }
      if (struct.PortKey1 != null) {
        oprot.writeFieldBegin(PORT_KEY1_FIELD_DESC);
        oprot.writeString(struct.PortKey1);
        oprot.writeFieldEnd();
      }
      if (struct.PortKey2 != null) {
        oprot.writeFieldBegin(PORT_KEY2_FIELD_DESC);
        oprot.writeString(struct.PortKey2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopoLineTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopoLineTupleScheme getScheme() {
      return new TopoLineTupleScheme();
    }
  }

  private static class TopoLineTupleScheme extends org.apache.thrift.scheme.TupleScheme<TopoLine> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TopoLine struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTopoLinkId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetTopoNodeId1()) {
        optionals.set(2);
      }
      if (struct.isSetBoardId1()) {
        optionals.set(3);
      }
      if (struct.isSetPortName1()) {
        optionals.set(4);
      }
      if (struct.isSetPortX1()) {
        optionals.set(5);
      }
      if (struct.isSetPortY1()) {
        optionals.set(6);
      }
      if (struct.isSetPortZ1()) {
        optionals.set(7);
      }
      if (struct.isSetTopoNodeId2()) {
        optionals.set(8);
      }
      if (struct.isSetBoardId2()) {
        optionals.set(9);
      }
      if (struct.isSetPortName2()) {
        optionals.set(10);
      }
      if (struct.isSetPortX2()) {
        optionals.set(11);
      }
      if (struct.isSetPortY2()) {
        optionals.set(12);
      }
      if (struct.isSetPortZ2()) {
        optionals.set(13);
      }
      if (struct.isSetLinkNo()) {
        optionals.set(14);
      }
      if (struct.isSetLinkSpeedNo()) {
        optionals.set(15);
      }
      if (struct.isSetLinkSpeedName()) {
        optionals.set(16);
      }
      if (struct.isSetLinkDrawParam()) {
        optionals.set(17);
      }
      if (struct.isSetTopoLinkType()) {
        optionals.set(18);
      }
      if (struct.isSetPortKey1()) {
        optionals.set(19);
      }
      if (struct.isSetPortKey2()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetTopoLinkId()) {
        oprot.writeI32(struct.TopoLinkId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.ProjectId);
      }
      if (struct.isSetTopoNodeId1()) {
        oprot.writeI32(struct.TopoNodeId1);
      }
      if (struct.isSetBoardId1()) {
        oprot.writeI32(struct.BoardId1);
      }
      if (struct.isSetPortName1()) {
        oprot.writeString(struct.PortName1);
      }
      if (struct.isSetPortX1()) {
        oprot.writeI32(struct.PortX1);
      }
      if (struct.isSetPortY1()) {
        oprot.writeI32(struct.PortY1);
      }
      if (struct.isSetPortZ1()) {
        oprot.writeI32(struct.PortZ1);
      }
      if (struct.isSetTopoNodeId2()) {
        oprot.writeI32(struct.TopoNodeId2);
      }
      if (struct.isSetBoardId2()) {
        oprot.writeI32(struct.BoardId2);
      }
      if (struct.isSetPortName2()) {
        oprot.writeString(struct.PortName2);
      }
      if (struct.isSetPortX2()) {
        oprot.writeI32(struct.PortX2);
      }
      if (struct.isSetPortY2()) {
        oprot.writeI32(struct.PortY2);
      }
      if (struct.isSetPortZ2()) {
        oprot.writeI32(struct.PortZ2);
      }
      if (struct.isSetLinkNo()) {
        oprot.writeI32(struct.LinkNo);
      }
      if (struct.isSetLinkSpeedNo()) {
        oprot.writeI32(struct.LinkSpeedNo);
      }
      if (struct.isSetLinkSpeedName()) {
        oprot.writeString(struct.LinkSpeedName);
      }
      if (struct.isSetLinkDrawParam()) {
        oprot.writeString(struct.LinkDrawParam);
      }
      if (struct.isSetTopoLinkType()) {
        oprot.writeString(struct.TopoLinkType);
      }
      if (struct.isSetPortKey1()) {
        oprot.writeString(struct.PortKey1);
      }
      if (struct.isSetPortKey2()) {
        oprot.writeString(struct.PortKey2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TopoLine struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.TopoLinkId = iprot.readI32();
        struct.setTopoLinkIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ProjectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.TopoNodeId1 = iprot.readI32();
        struct.setTopoNodeId1IsSet(true);
      }
      if (incoming.get(3)) {
        struct.BoardId1 = iprot.readI32();
        struct.setBoardId1IsSet(true);
      }
      if (incoming.get(4)) {
        struct.PortName1 = iprot.readString();
        struct.setPortName1IsSet(true);
      }
      if (incoming.get(5)) {
        struct.PortX1 = iprot.readI32();
        struct.setPortX1IsSet(true);
      }
      if (incoming.get(6)) {
        struct.PortY1 = iprot.readI32();
        struct.setPortY1IsSet(true);
      }
      if (incoming.get(7)) {
        struct.PortZ1 = iprot.readI32();
        struct.setPortZ1IsSet(true);
      }
      if (incoming.get(8)) {
        struct.TopoNodeId2 = iprot.readI32();
        struct.setTopoNodeId2IsSet(true);
      }
      if (incoming.get(9)) {
        struct.BoardId2 = iprot.readI32();
        struct.setBoardId2IsSet(true);
      }
      if (incoming.get(10)) {
        struct.PortName2 = iprot.readString();
        struct.setPortName2IsSet(true);
      }
      if (incoming.get(11)) {
        struct.PortX2 = iprot.readI32();
        struct.setPortX2IsSet(true);
      }
      if (incoming.get(12)) {
        struct.PortY2 = iprot.readI32();
        struct.setPortY2IsSet(true);
      }
      if (incoming.get(13)) {
        struct.PortZ2 = iprot.readI32();
        struct.setPortZ2IsSet(true);
      }
      if (incoming.get(14)) {
        struct.LinkNo = iprot.readI32();
        struct.setLinkNoIsSet(true);
      }
      if (incoming.get(15)) {
        struct.LinkSpeedNo = iprot.readI32();
        struct.setLinkSpeedNoIsSet(true);
      }
      if (incoming.get(16)) {
        struct.LinkSpeedName = iprot.readString();
        struct.setLinkSpeedNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.LinkDrawParam = iprot.readString();
        struct.setLinkDrawParamIsSet(true);
      }
      if (incoming.get(18)) {
        struct.TopoLinkType = iprot.readString();
        struct.setTopoLinkTypeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.PortKey1 = iprot.readString();
        struct.setPortKey1IsSet(true);
      }
      if (incoming.get(20)) {
        struct.PortKey2 = iprot.readString();
        struct.setPortKey2IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

