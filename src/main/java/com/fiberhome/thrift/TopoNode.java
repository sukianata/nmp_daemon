/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fiberhome.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-20")
public class TopoNode implements org.apache.thrift.TBase<TopoNode, TopoNode._Fields>, java.io.Serializable, Cloneable, Comparable<TopoNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopoNode");

  private static final org.apache.thrift.protocol.TField TOPO_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("TopoNodeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ProjectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("NeId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ParentId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TOPO_NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("TopoNodeType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField POS_X_FIELD_DESC = new org.apache.thrift.protocol.TField("PosX", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField POS_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("PosY", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField POS_Z_FIELD_DESC = new org.apache.thrift.protocol.TField("PosZ", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LAYER3_D_FIELD_DESC = new org.apache.thrift.protocol.TField("Layer3D", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TopoNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TopoNodeTupleSchemeFactory();

  public int TopoNodeId; // required
  public int ProjectId; // required
  public int NeId; // required
  public int ParentId; // required
  public int TopoNodeType; // required
  public int PosX; // required
  public int PosY; // required
  public int PosZ; // required
  public int Layer3D; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOPO_NODE_ID((short)1, "TopoNodeId"),
    PROJECT_ID((short)2, "ProjectId"),
    NE_ID((short)3, "NeId"),
    PARENT_ID((short)4, "ParentId"),
    TOPO_NODE_TYPE((short)5, "TopoNodeType"),
    POS_X((short)6, "PosX"),
    POS_Y((short)7, "PosY"),
    POS_Z((short)8, "PosZ"),
    LAYER3_D((short)9, "Layer3D");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOPO_NODE_ID
          return TOPO_NODE_ID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // NE_ID
          return NE_ID;
        case 4: // PARENT_ID
          return PARENT_ID;
        case 5: // TOPO_NODE_TYPE
          return TOPO_NODE_TYPE;
        case 6: // POS_X
          return POS_X;
        case 7: // POS_Y
          return POS_Y;
        case 8: // POS_Z
          return POS_Z;
        case 9: // LAYER3_D
          return LAYER3_D;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOPONODEID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __NEID_ISSET_ID = 2;
  private static final int __PARENTID_ISSET_ID = 3;
  private static final int __TOPONODETYPE_ISSET_ID = 4;
  private static final int __POSX_ISSET_ID = 5;
  private static final int __POSY_ISSET_ID = 6;
  private static final int __POSZ_ISSET_ID = 7;
  private static final int __LAYER3D_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOPO_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("TopoNodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("ProjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NE_ID, new org.apache.thrift.meta_data.FieldMetaData("NeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("ParentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOPO_NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("TopoNodeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POS_X, new org.apache.thrift.meta_data.FieldMetaData("PosX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POS_Y, new org.apache.thrift.meta_data.FieldMetaData("PosY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POS_Z, new org.apache.thrift.meta_data.FieldMetaData("PosZ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAYER3_D, new org.apache.thrift.meta_data.FieldMetaData("Layer3D", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopoNode.class, metaDataMap);
  }

  public TopoNode() {
  }

  public TopoNode(
    int TopoNodeId,
    int ProjectId,
    int NeId,
    int ParentId,
    int TopoNodeType,
    int PosX,
    int PosY,
    int PosZ,
    int Layer3D)
  {
    this();
    this.TopoNodeId = TopoNodeId;
    setTopoNodeIdIsSet(true);
    this.ProjectId = ProjectId;
    setProjectIdIsSet(true);
    this.NeId = NeId;
    setNeIdIsSet(true);
    this.ParentId = ParentId;
    setParentIdIsSet(true);
    this.TopoNodeType = TopoNodeType;
    setTopoNodeTypeIsSet(true);
    this.PosX = PosX;
    setPosXIsSet(true);
    this.PosY = PosY;
    setPosYIsSet(true);
    this.PosZ = PosZ;
    setPosZIsSet(true);
    this.Layer3D = Layer3D;
    setLayer3DIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopoNode(TopoNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.TopoNodeId = other.TopoNodeId;
    this.ProjectId = other.ProjectId;
    this.NeId = other.NeId;
    this.ParentId = other.ParentId;
    this.TopoNodeType = other.TopoNodeType;
    this.PosX = other.PosX;
    this.PosY = other.PosY;
    this.PosZ = other.PosZ;
    this.Layer3D = other.Layer3D;
  }

  public TopoNode deepCopy() {
    return new TopoNode(this);
  }

  @Override
  public void clear() {
    setTopoNodeIdIsSet(false);
    this.TopoNodeId = 0;
    setProjectIdIsSet(false);
    this.ProjectId = 0;
    setNeIdIsSet(false);
    this.NeId = 0;
    setParentIdIsSet(false);
    this.ParentId = 0;
    setTopoNodeTypeIsSet(false);
    this.TopoNodeType = 0;
    setPosXIsSet(false);
    this.PosX = 0;
    setPosYIsSet(false);
    this.PosY = 0;
    setPosZIsSet(false);
    this.PosZ = 0;
    setLayer3DIsSet(false);
    this.Layer3D = 0;
  }

  public int getTopoNodeId() {
    return this.TopoNodeId;
  }

  public TopoNode setTopoNodeId(int TopoNodeId) {
    this.TopoNodeId = TopoNodeId;
    setTopoNodeIdIsSet(true);
    return this;
  }

  public void unsetTopoNodeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPONODEID_ISSET_ID);
  }

  /** Returns true if field TopoNodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTopoNodeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPONODEID_ISSET_ID);
  }

  public void setTopoNodeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPONODEID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.ProjectId;
  }

  public TopoNode setProjectId(int ProjectId) {
    this.ProjectId = ProjectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field ProjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getNeId() {
    return this.NeId;
  }

  public TopoNode setNeId(int NeId) {
    this.NeId = NeId;
    setNeIdIsSet(true);
    return this;
  }

  public void unsetNeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEID_ISSET_ID);
  }

  /** Returns true if field NeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEID_ISSET_ID);
  }

  public void setNeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEID_ISSET_ID, value);
  }

  public int getParentId() {
    return this.ParentId;
  }

  public TopoNode setParentId(int ParentId) {
    this.ParentId = ParentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field ParentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  public int getTopoNodeType() {
    return this.TopoNodeType;
  }

  public TopoNode setTopoNodeType(int TopoNodeType) {
    this.TopoNodeType = TopoNodeType;
    setTopoNodeTypeIsSet(true);
    return this;
  }

  public void unsetTopoNodeType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPONODETYPE_ISSET_ID);
  }

  /** Returns true if field TopoNodeType is set (has been assigned a value) and false otherwise */
  public boolean isSetTopoNodeType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPONODETYPE_ISSET_ID);
  }

  public void setTopoNodeTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPONODETYPE_ISSET_ID, value);
  }

  public int getPosX() {
    return this.PosX;
  }

  public TopoNode setPosX(int PosX) {
    this.PosX = PosX;
    setPosXIsSet(true);
    return this;
  }

  public void unsetPosX() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSX_ISSET_ID);
  }

  /** Returns true if field PosX is set (has been assigned a value) and false otherwise */
  public boolean isSetPosX() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSX_ISSET_ID);
  }

  public void setPosXIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSX_ISSET_ID, value);
  }

  public int getPosY() {
    return this.PosY;
  }

  public TopoNode setPosY(int PosY) {
    this.PosY = PosY;
    setPosYIsSet(true);
    return this;
  }

  public void unsetPosY() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSY_ISSET_ID);
  }

  /** Returns true if field PosY is set (has been assigned a value) and false otherwise */
  public boolean isSetPosY() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSY_ISSET_ID);
  }

  public void setPosYIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSY_ISSET_ID, value);
  }

  public int getPosZ() {
    return this.PosZ;
  }

  public TopoNode setPosZ(int PosZ) {
    this.PosZ = PosZ;
    setPosZIsSet(true);
    return this;
  }

  public void unsetPosZ() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSZ_ISSET_ID);
  }

  /** Returns true if field PosZ is set (has been assigned a value) and false otherwise */
  public boolean isSetPosZ() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSZ_ISSET_ID);
  }

  public void setPosZIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSZ_ISSET_ID, value);
  }

  public int getLayer3D() {
    return this.Layer3D;
  }

  public TopoNode setLayer3D(int Layer3D) {
    this.Layer3D = Layer3D;
    setLayer3DIsSet(true);
    return this;
  }

  public void unsetLayer3D() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAYER3D_ISSET_ID);
  }

  /** Returns true if field Layer3D is set (has been assigned a value) and false otherwise */
  public boolean isSetLayer3D() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAYER3D_ISSET_ID);
  }

  public void setLayer3DIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAYER3D_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TOPO_NODE_ID:
      if (value == null) {
        unsetTopoNodeId();
      } else {
        setTopoNodeId((java.lang.Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((java.lang.Integer)value);
      }
      break;

    case NE_ID:
      if (value == null) {
        unsetNeId();
      } else {
        setNeId((java.lang.Integer)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((java.lang.Integer)value);
      }
      break;

    case TOPO_NODE_TYPE:
      if (value == null) {
        unsetTopoNodeType();
      } else {
        setTopoNodeType((java.lang.Integer)value);
      }
      break;

    case POS_X:
      if (value == null) {
        unsetPosX();
      } else {
        setPosX((java.lang.Integer)value);
      }
      break;

    case POS_Y:
      if (value == null) {
        unsetPosY();
      } else {
        setPosY((java.lang.Integer)value);
      }
      break;

    case POS_Z:
      if (value == null) {
        unsetPosZ();
      } else {
        setPosZ((java.lang.Integer)value);
      }
      break;

    case LAYER3_D:
      if (value == null) {
        unsetLayer3D();
      } else {
        setLayer3D((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TOPO_NODE_ID:
      return getTopoNodeId();

    case PROJECT_ID:
      return getProjectId();

    case NE_ID:
      return getNeId();

    case PARENT_ID:
      return getParentId();

    case TOPO_NODE_TYPE:
      return getTopoNodeType();

    case POS_X:
      return getPosX();

    case POS_Y:
      return getPosY();

    case POS_Z:
      return getPosZ();

    case LAYER3_D:
      return getLayer3D();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TOPO_NODE_ID:
      return isSetTopoNodeId();
    case PROJECT_ID:
      return isSetProjectId();
    case NE_ID:
      return isSetNeId();
    case PARENT_ID:
      return isSetParentId();
    case TOPO_NODE_TYPE:
      return isSetTopoNodeType();
    case POS_X:
      return isSetPosX();
    case POS_Y:
      return isSetPosY();
    case POS_Z:
      return isSetPosZ();
    case LAYER3_D:
      return isSetLayer3D();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TopoNode)
      return this.equals((TopoNode)that);
    return false;
  }

  public boolean equals(TopoNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_TopoNodeId = true;
    boolean that_present_TopoNodeId = true;
    if (this_present_TopoNodeId || that_present_TopoNodeId) {
      if (!(this_present_TopoNodeId && that_present_TopoNodeId))
        return false;
      if (this.TopoNodeId != that.TopoNodeId)
        return false;
    }

    boolean this_present_ProjectId = true;
    boolean that_present_ProjectId = true;
    if (this_present_ProjectId || that_present_ProjectId) {
      if (!(this_present_ProjectId && that_present_ProjectId))
        return false;
      if (this.ProjectId != that.ProjectId)
        return false;
    }

    boolean this_present_NeId = true;
    boolean that_present_NeId = true;
    if (this_present_NeId || that_present_NeId) {
      if (!(this_present_NeId && that_present_NeId))
        return false;
      if (this.NeId != that.NeId)
        return false;
    }

    boolean this_present_ParentId = true;
    boolean that_present_ParentId = true;
    if (this_present_ParentId || that_present_ParentId) {
      if (!(this_present_ParentId && that_present_ParentId))
        return false;
      if (this.ParentId != that.ParentId)
        return false;
    }

    boolean this_present_TopoNodeType = true;
    boolean that_present_TopoNodeType = true;
    if (this_present_TopoNodeType || that_present_TopoNodeType) {
      if (!(this_present_TopoNodeType && that_present_TopoNodeType))
        return false;
      if (this.TopoNodeType != that.TopoNodeType)
        return false;
    }

    boolean this_present_PosX = true;
    boolean that_present_PosX = true;
    if (this_present_PosX || that_present_PosX) {
      if (!(this_present_PosX && that_present_PosX))
        return false;
      if (this.PosX != that.PosX)
        return false;
    }

    boolean this_present_PosY = true;
    boolean that_present_PosY = true;
    if (this_present_PosY || that_present_PosY) {
      if (!(this_present_PosY && that_present_PosY))
        return false;
      if (this.PosY != that.PosY)
        return false;
    }

    boolean this_present_PosZ = true;
    boolean that_present_PosZ = true;
    if (this_present_PosZ || that_present_PosZ) {
      if (!(this_present_PosZ && that_present_PosZ))
        return false;
      if (this.PosZ != that.PosZ)
        return false;
    }

    boolean this_present_Layer3D = true;
    boolean that_present_Layer3D = true;
    if (this_present_Layer3D || that_present_Layer3D) {
      if (!(this_present_Layer3D && that_present_Layer3D))
        return false;
      if (this.Layer3D != that.Layer3D)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + TopoNodeId;

    hashCode = hashCode * 8191 + ProjectId;

    hashCode = hashCode * 8191 + NeId;

    hashCode = hashCode * 8191 + ParentId;

    hashCode = hashCode * 8191 + TopoNodeType;

    hashCode = hashCode * 8191 + PosX;

    hashCode = hashCode * 8191 + PosY;

    hashCode = hashCode * 8191 + PosZ;

    hashCode = hashCode * 8191 + Layer3D;

    return hashCode;
  }

  @Override
  public int compareTo(TopoNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTopoNodeId()).compareTo(other.isSetTopoNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopoNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TopoNodeId, other.TopoNodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ProjectId, other.ProjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNeId()).compareTo(other.isSetNeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NeId, other.NeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ParentId, other.ParentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopoNodeType()).compareTo(other.isSetTopoNodeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopoNodeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TopoNodeType, other.TopoNodeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPosX()).compareTo(other.isSetPosX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PosX, other.PosX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPosY()).compareTo(other.isSetPosY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PosY, other.PosY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPosZ()).compareTo(other.isSetPosZ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosZ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PosZ, other.PosZ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLayer3D()).compareTo(other.isSetLayer3D());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLayer3D()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Layer3D, other.Layer3D);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TopoNode(");
    boolean first = true;

    sb.append("TopoNodeId:");
    sb.append(this.TopoNodeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ProjectId:");
    sb.append(this.ProjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NeId:");
    sb.append(this.NeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ParentId:");
    sb.append(this.ParentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("TopoNodeType:");
    sb.append(this.TopoNodeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PosX:");
    sb.append(this.PosX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PosY:");
    sb.append(this.PosY);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PosZ:");
    sb.append(this.PosZ);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Layer3D:");
    sb.append(this.Layer3D);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopoNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopoNodeStandardScheme getScheme() {
      return new TopoNodeStandardScheme();
    }
  }

  private static class TopoNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TopoNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TopoNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOPO_NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TopoNodeId = iprot.readI32();
              struct.setTopoNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ProjectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.NeId = iprot.readI32();
              struct.setNeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ParentId = iprot.readI32();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOPO_NODE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TopoNodeType = iprot.readI32();
              struct.setTopoNodeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POS_X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PosX = iprot.readI32();
              struct.setPosXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POS_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PosY = iprot.readI32();
              struct.setPosYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POS_Z
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PosZ = iprot.readI32();
              struct.setPosZIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAYER3_D
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Layer3D = iprot.readI32();
              struct.setLayer3DIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TopoNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOPO_NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.TopoNodeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.ProjectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NE_ID_FIELD_DESC);
      oprot.writeI32(struct.NeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI32(struct.ParentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOPO_NODE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.TopoNodeType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POS_X_FIELD_DESC);
      oprot.writeI32(struct.PosX);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POS_Y_FIELD_DESC);
      oprot.writeI32(struct.PosY);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POS_Z_FIELD_DESC);
      oprot.writeI32(struct.PosZ);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAYER3_D_FIELD_DESC);
      oprot.writeI32(struct.Layer3D);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopoNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopoNodeTupleScheme getScheme() {
      return new TopoNodeTupleScheme();
    }
  }

  private static class TopoNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TopoNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TopoNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTopoNodeId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetNeId()) {
        optionals.set(2);
      }
      if (struct.isSetParentId()) {
        optionals.set(3);
      }
      if (struct.isSetTopoNodeType()) {
        optionals.set(4);
      }
      if (struct.isSetPosX()) {
        optionals.set(5);
      }
      if (struct.isSetPosY()) {
        optionals.set(6);
      }
      if (struct.isSetPosZ()) {
        optionals.set(7);
      }
      if (struct.isSetLayer3D()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetTopoNodeId()) {
        oprot.writeI32(struct.TopoNodeId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.ProjectId);
      }
      if (struct.isSetNeId()) {
        oprot.writeI32(struct.NeId);
      }
      if (struct.isSetParentId()) {
        oprot.writeI32(struct.ParentId);
      }
      if (struct.isSetTopoNodeType()) {
        oprot.writeI32(struct.TopoNodeType);
      }
      if (struct.isSetPosX()) {
        oprot.writeI32(struct.PosX);
      }
      if (struct.isSetPosY()) {
        oprot.writeI32(struct.PosY);
      }
      if (struct.isSetPosZ()) {
        oprot.writeI32(struct.PosZ);
      }
      if (struct.isSetLayer3D()) {
        oprot.writeI32(struct.Layer3D);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TopoNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.TopoNodeId = iprot.readI32();
        struct.setTopoNodeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ProjectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.NeId = iprot.readI32();
        struct.setNeIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ParentId = iprot.readI32();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.TopoNodeType = iprot.readI32();
        struct.setTopoNodeTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.PosX = iprot.readI32();
        struct.setPosXIsSet(true);
      }
      if (incoming.get(6)) {
        struct.PosY = iprot.readI32();
        struct.setPosYIsSet(true);
      }
      if (incoming.get(7)) {
        struct.PosZ = iprot.readI32();
        struct.setPosZIsSet(true);
      }
      if (incoming.get(8)) {
        struct.Layer3D = iprot.readI32();
        struct.setLayer3DIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

