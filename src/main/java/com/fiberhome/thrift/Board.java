/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fiberhome.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-20")
public class Board implements org.apache.thrift.TBase<Board, Board._Fields>, java.io.Serializable, Cloneable, Comparable<Board> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Board");

  private static final org.apache.thrift.protocol.TField BOARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("BoardId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ProjectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("NeId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("GroupId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField GROUP_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("GroupNo", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("GroupName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BUREAU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("BureauId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BUREAU_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("BureauNo", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BUREAU_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("BureauName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField RACK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("RackId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField RACK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("RackNo", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField RACK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("RackName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SHELF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ShelfId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField SHELF_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ShelfName", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SLOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("SlotId", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SLOT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("SlotNo", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField SLOT_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("SlotAddress", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField SLOT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("SlotName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField BOARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("BoardNo", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField BOARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("BoardType", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField BOARD_ALIAS_FIELD_DESC = new org.apache.thrift.protocol.TField("BoardAlias", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField BOARD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("BoardName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField BOARD_NAMEC_FIELD_DESC = new org.apache.thrift.protocol.TField("BoardNamec", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField SHELF_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("ShelfNo", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField SHELF_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ShelfType", org.apache.thrift.protocol.TType.I32, (short)25);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BoardStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BoardTupleSchemeFactory();

  public int BoardId; // required
  public int ProjectId; // required
  public int NeId; // required
  public int GroupId; // required
  public int GroupNo; // required
  public java.lang.String GroupName; // required
  public int BureauId; // required
  public int BureauNo; // required
  public java.lang.String BureauName; // required
  public int RackId; // required
  public int RackNo; // required
  public java.lang.String RackName; // required
  public int ShelfId; // required
  public java.lang.String ShelfName; // required
  public int SlotId; // required
  public int SlotNo; // required
  public int SlotAddress; // required
  public java.lang.String SlotName; // required
  public int BoardNo; // required
  public int BoardType; // required
  public java.lang.String BoardAlias; // required
  public java.lang.String BoardName; // required
  public java.lang.String BoardNamec; // required
  public int ShelfNo; // required
  public int ShelfType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOARD_ID((short)1, "BoardId"),
    PROJECT_ID((short)2, "ProjectId"),
    NE_ID((short)3, "NeId"),
    GROUP_ID((short)4, "GroupId"),
    GROUP_NO((short)5, "GroupNo"),
    GROUP_NAME((short)6, "GroupName"),
    BUREAU_ID((short)7, "BureauId"),
    BUREAU_NO((short)8, "BureauNo"),
    BUREAU_NAME((short)9, "BureauName"),
    RACK_ID((short)10, "RackId"),
    RACK_NO((short)11, "RackNo"),
    RACK_NAME((short)12, "RackName"),
    SHELF_ID((short)13, "ShelfId"),
    SHELF_NAME((short)14, "ShelfName"),
    SLOT_ID((short)15, "SlotId"),
    SLOT_NO((short)16, "SlotNo"),
    SLOT_ADDRESS((short)17, "SlotAddress"),
    SLOT_NAME((short)18, "SlotName"),
    BOARD_NO((short)19, "BoardNo"),
    BOARD_TYPE((short)20, "BoardType"),
    BOARD_ALIAS((short)21, "BoardAlias"),
    BOARD_NAME((short)22, "BoardName"),
    BOARD_NAMEC((short)23, "BoardNamec"),
    SHELF_NO((short)24, "ShelfNo"),
    SHELF_TYPE((short)25, "ShelfType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOARD_ID
          return BOARD_ID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // NE_ID
          return NE_ID;
        case 4: // GROUP_ID
          return GROUP_ID;
        case 5: // GROUP_NO
          return GROUP_NO;
        case 6: // GROUP_NAME
          return GROUP_NAME;
        case 7: // BUREAU_ID
          return BUREAU_ID;
        case 8: // BUREAU_NO
          return BUREAU_NO;
        case 9: // BUREAU_NAME
          return BUREAU_NAME;
        case 10: // RACK_ID
          return RACK_ID;
        case 11: // RACK_NO
          return RACK_NO;
        case 12: // RACK_NAME
          return RACK_NAME;
        case 13: // SHELF_ID
          return SHELF_ID;
        case 14: // SHELF_NAME
          return SHELF_NAME;
        case 15: // SLOT_ID
          return SLOT_ID;
        case 16: // SLOT_NO
          return SLOT_NO;
        case 17: // SLOT_ADDRESS
          return SLOT_ADDRESS;
        case 18: // SLOT_NAME
          return SLOT_NAME;
        case 19: // BOARD_NO
          return BOARD_NO;
        case 20: // BOARD_TYPE
          return BOARD_TYPE;
        case 21: // BOARD_ALIAS
          return BOARD_ALIAS;
        case 22: // BOARD_NAME
          return BOARD_NAME;
        case 23: // BOARD_NAMEC
          return BOARD_NAMEC;
        case 24: // SHELF_NO
          return SHELF_NO;
        case 25: // SHELF_TYPE
          return SHELF_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOARDID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __NEID_ISSET_ID = 2;
  private static final int __GROUPID_ISSET_ID = 3;
  private static final int __GROUPNO_ISSET_ID = 4;
  private static final int __BUREAUID_ISSET_ID = 5;
  private static final int __BUREAUNO_ISSET_ID = 6;
  private static final int __RACKID_ISSET_ID = 7;
  private static final int __RACKNO_ISSET_ID = 8;
  private static final int __SHELFID_ISSET_ID = 9;
  private static final int __SLOTID_ISSET_ID = 10;
  private static final int __SLOTNO_ISSET_ID = 11;
  private static final int __SLOTADDRESS_ISSET_ID = 12;
  private static final int __BOARDNO_ISSET_ID = 13;
  private static final int __BOARDTYPE_ISSET_ID = 14;
  private static final int __SHELFNO_ISSET_ID = 15;
  private static final int __SHELFTYPE_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOARD_ID, new org.apache.thrift.meta_data.FieldMetaData("BoardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("ProjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NE_ID, new org.apache.thrift.meta_data.FieldMetaData("NeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("GroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_NO, new org.apache.thrift.meta_data.FieldMetaData("GroupNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("GroupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUREAU_ID, new org.apache.thrift.meta_data.FieldMetaData("BureauId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUREAU_NO, new org.apache.thrift.meta_data.FieldMetaData("BureauNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUREAU_NAME, new org.apache.thrift.meta_data.FieldMetaData("BureauName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RACK_ID, new org.apache.thrift.meta_data.FieldMetaData("RackId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RACK_NO, new org.apache.thrift.meta_data.FieldMetaData("RackNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RACK_NAME, new org.apache.thrift.meta_data.FieldMetaData("RackName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHELF_ID, new org.apache.thrift.meta_data.FieldMetaData("ShelfId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHELF_NAME, new org.apache.thrift.meta_data.FieldMetaData("ShelfName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLOT_ID, new org.apache.thrift.meta_data.FieldMetaData("SlotId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLOT_NO, new org.apache.thrift.meta_data.FieldMetaData("SlotNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLOT_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("SlotAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLOT_NAME, new org.apache.thrift.meta_data.FieldMetaData("SlotName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOARD_NO, new org.apache.thrift.meta_data.FieldMetaData("BoardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("BoardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOARD_ALIAS, new org.apache.thrift.meta_data.FieldMetaData("BoardAlias", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOARD_NAME, new org.apache.thrift.meta_data.FieldMetaData("BoardName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOARD_NAMEC, new org.apache.thrift.meta_data.FieldMetaData("BoardNamec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHELF_NO, new org.apache.thrift.meta_data.FieldMetaData("ShelfNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHELF_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ShelfType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Board.class, metaDataMap);
  }

  public Board() {
  }

  public Board(
    int BoardId,
    int ProjectId,
    int NeId,
    int GroupId,
    int GroupNo,
    java.lang.String GroupName,
    int BureauId,
    int BureauNo,
    java.lang.String BureauName,
    int RackId,
    int RackNo,
    java.lang.String RackName,
    int ShelfId,
    java.lang.String ShelfName,
    int SlotId,
    int SlotNo,
    int SlotAddress,
    java.lang.String SlotName,
    int BoardNo,
    int BoardType,
    java.lang.String BoardAlias,
    java.lang.String BoardName,
    java.lang.String BoardNamec,
    int ShelfNo,
    int ShelfType)
  {
    this();
    this.BoardId = BoardId;
    setBoardIdIsSet(true);
    this.ProjectId = ProjectId;
    setProjectIdIsSet(true);
    this.NeId = NeId;
    setNeIdIsSet(true);
    this.GroupId = GroupId;
    setGroupIdIsSet(true);
    this.GroupNo = GroupNo;
    setGroupNoIsSet(true);
    this.GroupName = GroupName;
    this.BureauId = BureauId;
    setBureauIdIsSet(true);
    this.BureauNo = BureauNo;
    setBureauNoIsSet(true);
    this.BureauName = BureauName;
    this.RackId = RackId;
    setRackIdIsSet(true);
    this.RackNo = RackNo;
    setRackNoIsSet(true);
    this.RackName = RackName;
    this.ShelfId = ShelfId;
    setShelfIdIsSet(true);
    this.ShelfName = ShelfName;
    this.SlotId = SlotId;
    setSlotIdIsSet(true);
    this.SlotNo = SlotNo;
    setSlotNoIsSet(true);
    this.SlotAddress = SlotAddress;
    setSlotAddressIsSet(true);
    this.SlotName = SlotName;
    this.BoardNo = BoardNo;
    setBoardNoIsSet(true);
    this.BoardType = BoardType;
    setBoardTypeIsSet(true);
    this.BoardAlias = BoardAlias;
    this.BoardName = BoardName;
    this.BoardNamec = BoardNamec;
    this.ShelfNo = ShelfNo;
    setShelfNoIsSet(true);
    this.ShelfType = ShelfType;
    setShelfTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Board(Board other) {
    __isset_bitfield = other.__isset_bitfield;
    this.BoardId = other.BoardId;
    this.ProjectId = other.ProjectId;
    this.NeId = other.NeId;
    this.GroupId = other.GroupId;
    this.GroupNo = other.GroupNo;
    if (other.isSetGroupName()) {
      this.GroupName = other.GroupName;
    }
    this.BureauId = other.BureauId;
    this.BureauNo = other.BureauNo;
    if (other.isSetBureauName()) {
      this.BureauName = other.BureauName;
    }
    this.RackId = other.RackId;
    this.RackNo = other.RackNo;
    if (other.isSetRackName()) {
      this.RackName = other.RackName;
    }
    this.ShelfId = other.ShelfId;
    if (other.isSetShelfName()) {
      this.ShelfName = other.ShelfName;
    }
    this.SlotId = other.SlotId;
    this.SlotNo = other.SlotNo;
    this.SlotAddress = other.SlotAddress;
    if (other.isSetSlotName()) {
      this.SlotName = other.SlotName;
    }
    this.BoardNo = other.BoardNo;
    this.BoardType = other.BoardType;
    if (other.isSetBoardAlias()) {
      this.BoardAlias = other.BoardAlias;
    }
    if (other.isSetBoardName()) {
      this.BoardName = other.BoardName;
    }
    if (other.isSetBoardNamec()) {
      this.BoardNamec = other.BoardNamec;
    }
    this.ShelfNo = other.ShelfNo;
    this.ShelfType = other.ShelfType;
  }

  public Board deepCopy() {
    return new Board(this);
  }

  @Override
  public void clear() {
    setBoardIdIsSet(false);
    this.BoardId = 0;
    setProjectIdIsSet(false);
    this.ProjectId = 0;
    setNeIdIsSet(false);
    this.NeId = 0;
    setGroupIdIsSet(false);
    this.GroupId = 0;
    setGroupNoIsSet(false);
    this.GroupNo = 0;
    this.GroupName = null;
    setBureauIdIsSet(false);
    this.BureauId = 0;
    setBureauNoIsSet(false);
    this.BureauNo = 0;
    this.BureauName = null;
    setRackIdIsSet(false);
    this.RackId = 0;
    setRackNoIsSet(false);
    this.RackNo = 0;
    this.RackName = null;
    setShelfIdIsSet(false);
    this.ShelfId = 0;
    this.ShelfName = null;
    setSlotIdIsSet(false);
    this.SlotId = 0;
    setSlotNoIsSet(false);
    this.SlotNo = 0;
    setSlotAddressIsSet(false);
    this.SlotAddress = 0;
    this.SlotName = null;
    setBoardNoIsSet(false);
    this.BoardNo = 0;
    setBoardTypeIsSet(false);
    this.BoardType = 0;
    this.BoardAlias = null;
    this.BoardName = null;
    this.BoardNamec = null;
    setShelfNoIsSet(false);
    this.ShelfNo = 0;
    setShelfTypeIsSet(false);
    this.ShelfType = 0;
  }

  public int getBoardId() {
    return this.BoardId;
  }

  public Board setBoardId(int BoardId) {
    this.BoardId = BoardId;
    setBoardIdIsSet(true);
    return this;
  }

  public void unsetBoardId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOARDID_ISSET_ID);
  }

  /** Returns true if field BoardId is set (has been assigned a value) and false otherwise */
  public boolean isSetBoardId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOARDID_ISSET_ID);
  }

  public void setBoardIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOARDID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.ProjectId;
  }

  public Board setProjectId(int ProjectId) {
    this.ProjectId = ProjectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field ProjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getNeId() {
    return this.NeId;
  }

  public Board setNeId(int NeId) {
    this.NeId = NeId;
    setNeIdIsSet(true);
    return this;
  }

  public void unsetNeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEID_ISSET_ID);
  }

  /** Returns true if field NeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEID_ISSET_ID);
  }

  public void setNeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEID_ISSET_ID, value);
  }

  public int getGroupId() {
    return this.GroupId;
  }

  public Board setGroupId(int GroupId) {
    this.GroupId = GroupId;
    setGroupIdIsSet(true);
    return this;
  }

  public void unsetGroupId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field GroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  public int getGroupNo() {
    return this.GroupNo;
  }

  public Board setGroupNo(int GroupNo) {
    this.GroupNo = GroupNo;
    setGroupNoIsSet(true);
    return this;
  }

  public void unsetGroupNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GROUPNO_ISSET_ID);
  }

  /** Returns true if field GroupNo is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GROUPNO_ISSET_ID);
  }

  public void setGroupNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GROUPNO_ISSET_ID, value);
  }

  public java.lang.String getGroupName() {
    return this.GroupName;
  }

  public Board setGroupName(java.lang.String GroupName) {
    this.GroupName = GroupName;
    return this;
  }

  public void unsetGroupName() {
    this.GroupName = null;
  }

  /** Returns true if field GroupName is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupName() {
    return this.GroupName != null;
  }

  public void setGroupNameIsSet(boolean value) {
    if (!value) {
      this.GroupName = null;
    }
  }

  public int getBureauId() {
    return this.BureauId;
  }

  public Board setBureauId(int BureauId) {
    this.BureauId = BureauId;
    setBureauIdIsSet(true);
    return this;
  }

  public void unsetBureauId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUREAUID_ISSET_ID);
  }

  /** Returns true if field BureauId is set (has been assigned a value) and false otherwise */
  public boolean isSetBureauId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUREAUID_ISSET_ID);
  }

  public void setBureauIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUREAUID_ISSET_ID, value);
  }

  public int getBureauNo() {
    return this.BureauNo;
  }

  public Board setBureauNo(int BureauNo) {
    this.BureauNo = BureauNo;
    setBureauNoIsSet(true);
    return this;
  }

  public void unsetBureauNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUREAUNO_ISSET_ID);
  }

  /** Returns true if field BureauNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBureauNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUREAUNO_ISSET_ID);
  }

  public void setBureauNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUREAUNO_ISSET_ID, value);
  }

  public java.lang.String getBureauName() {
    return this.BureauName;
  }

  public Board setBureauName(java.lang.String BureauName) {
    this.BureauName = BureauName;
    return this;
  }

  public void unsetBureauName() {
    this.BureauName = null;
  }

  /** Returns true if field BureauName is set (has been assigned a value) and false otherwise */
  public boolean isSetBureauName() {
    return this.BureauName != null;
  }

  public void setBureauNameIsSet(boolean value) {
    if (!value) {
      this.BureauName = null;
    }
  }

  public int getRackId() {
    return this.RackId;
  }

  public Board setRackId(int RackId) {
    this.RackId = RackId;
    setRackIdIsSet(true);
    return this;
  }

  public void unsetRackId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RACKID_ISSET_ID);
  }

  /** Returns true if field RackId is set (has been assigned a value) and false otherwise */
  public boolean isSetRackId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RACKID_ISSET_ID);
  }

  public void setRackIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RACKID_ISSET_ID, value);
  }

  public int getRackNo() {
    return this.RackNo;
  }

  public Board setRackNo(int RackNo) {
    this.RackNo = RackNo;
    setRackNoIsSet(true);
    return this;
  }

  public void unsetRackNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RACKNO_ISSET_ID);
  }

  /** Returns true if field RackNo is set (has been assigned a value) and false otherwise */
  public boolean isSetRackNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RACKNO_ISSET_ID);
  }

  public void setRackNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RACKNO_ISSET_ID, value);
  }

  public java.lang.String getRackName() {
    return this.RackName;
  }

  public Board setRackName(java.lang.String RackName) {
    this.RackName = RackName;
    return this;
  }

  public void unsetRackName() {
    this.RackName = null;
  }

  /** Returns true if field RackName is set (has been assigned a value) and false otherwise */
  public boolean isSetRackName() {
    return this.RackName != null;
  }

  public void setRackNameIsSet(boolean value) {
    if (!value) {
      this.RackName = null;
    }
  }

  public int getShelfId() {
    return this.ShelfId;
  }

  public Board setShelfId(int ShelfId) {
    this.ShelfId = ShelfId;
    setShelfIdIsSet(true);
    return this;
  }

  public void unsetShelfId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHELFID_ISSET_ID);
  }

  /** Returns true if field ShelfId is set (has been assigned a value) and false otherwise */
  public boolean isSetShelfId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHELFID_ISSET_ID);
  }

  public void setShelfIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHELFID_ISSET_ID, value);
  }

  public java.lang.String getShelfName() {
    return this.ShelfName;
  }

  public Board setShelfName(java.lang.String ShelfName) {
    this.ShelfName = ShelfName;
    return this;
  }

  public void unsetShelfName() {
    this.ShelfName = null;
  }

  /** Returns true if field ShelfName is set (has been assigned a value) and false otherwise */
  public boolean isSetShelfName() {
    return this.ShelfName != null;
  }

  public void setShelfNameIsSet(boolean value) {
    if (!value) {
      this.ShelfName = null;
    }
  }

  public int getSlotId() {
    return this.SlotId;
  }

  public Board setSlotId(int SlotId) {
    this.SlotId = SlotId;
    setSlotIdIsSet(true);
    return this;
  }

  public void unsetSlotId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SLOTID_ISSET_ID);
  }

  /** Returns true if field SlotId is set (has been assigned a value) and false otherwise */
  public boolean isSetSlotId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SLOTID_ISSET_ID);
  }

  public void setSlotIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SLOTID_ISSET_ID, value);
  }

  public int getSlotNo() {
    return this.SlotNo;
  }

  public Board setSlotNo(int SlotNo) {
    this.SlotNo = SlotNo;
    setSlotNoIsSet(true);
    return this;
  }

  public void unsetSlotNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SLOTNO_ISSET_ID);
  }

  /** Returns true if field SlotNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSlotNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SLOTNO_ISSET_ID);
  }

  public void setSlotNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SLOTNO_ISSET_ID, value);
  }

  public int getSlotAddress() {
    return this.SlotAddress;
  }

  public Board setSlotAddress(int SlotAddress) {
    this.SlotAddress = SlotAddress;
    setSlotAddressIsSet(true);
    return this;
  }

  public void unsetSlotAddress() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SLOTADDRESS_ISSET_ID);
  }

  /** Returns true if field SlotAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetSlotAddress() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SLOTADDRESS_ISSET_ID);
  }

  public void setSlotAddressIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SLOTADDRESS_ISSET_ID, value);
  }

  public java.lang.String getSlotName() {
    return this.SlotName;
  }

  public Board setSlotName(java.lang.String SlotName) {
    this.SlotName = SlotName;
    return this;
  }

  public void unsetSlotName() {
    this.SlotName = null;
  }

  /** Returns true if field SlotName is set (has been assigned a value) and false otherwise */
  public boolean isSetSlotName() {
    return this.SlotName != null;
  }

  public void setSlotNameIsSet(boolean value) {
    if (!value) {
      this.SlotName = null;
    }
  }

  public int getBoardNo() {
    return this.BoardNo;
  }

  public Board setBoardNo(int BoardNo) {
    this.BoardNo = BoardNo;
    setBoardNoIsSet(true);
    return this;
  }

  public void unsetBoardNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOARDNO_ISSET_ID);
  }

  /** Returns true if field BoardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBoardNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOARDNO_ISSET_ID);
  }

  public void setBoardNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOARDNO_ISSET_ID, value);
  }

  public int getBoardType() {
    return this.BoardType;
  }

  public Board setBoardType(int BoardType) {
    this.BoardType = BoardType;
    setBoardTypeIsSet(true);
    return this;
  }

  public void unsetBoardType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOARDTYPE_ISSET_ID);
  }

  /** Returns true if field BoardType is set (has been assigned a value) and false otherwise */
  public boolean isSetBoardType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOARDTYPE_ISSET_ID);
  }

  public void setBoardTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOARDTYPE_ISSET_ID, value);
  }

  public java.lang.String getBoardAlias() {
    return this.BoardAlias;
  }

  public Board setBoardAlias(java.lang.String BoardAlias) {
    this.BoardAlias = BoardAlias;
    return this;
  }

  public void unsetBoardAlias() {
    this.BoardAlias = null;
  }

  /** Returns true if field BoardAlias is set (has been assigned a value) and false otherwise */
  public boolean isSetBoardAlias() {
    return this.BoardAlias != null;
  }

  public void setBoardAliasIsSet(boolean value) {
    if (!value) {
      this.BoardAlias = null;
    }
  }

  public java.lang.String getBoardName() {
    return this.BoardName;
  }

  public Board setBoardName(java.lang.String BoardName) {
    this.BoardName = BoardName;
    return this;
  }

  public void unsetBoardName() {
    this.BoardName = null;
  }

  /** Returns true if field BoardName is set (has been assigned a value) and false otherwise */
  public boolean isSetBoardName() {
    return this.BoardName != null;
  }

  public void setBoardNameIsSet(boolean value) {
    if (!value) {
      this.BoardName = null;
    }
  }

  public java.lang.String getBoardNamec() {
    return this.BoardNamec;
  }

  public Board setBoardNamec(java.lang.String BoardNamec) {
    this.BoardNamec = BoardNamec;
    return this;
  }

  public void unsetBoardNamec() {
    this.BoardNamec = null;
  }

  /** Returns true if field BoardNamec is set (has been assigned a value) and false otherwise */
  public boolean isSetBoardNamec() {
    return this.BoardNamec != null;
  }

  public void setBoardNamecIsSet(boolean value) {
    if (!value) {
      this.BoardNamec = null;
    }
  }

  public int getShelfNo() {
    return this.ShelfNo;
  }

  public Board setShelfNo(int ShelfNo) {
    this.ShelfNo = ShelfNo;
    setShelfNoIsSet(true);
    return this;
  }

  public void unsetShelfNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHELFNO_ISSET_ID);
  }

  /** Returns true if field ShelfNo is set (has been assigned a value) and false otherwise */
  public boolean isSetShelfNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHELFNO_ISSET_ID);
  }

  public void setShelfNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHELFNO_ISSET_ID, value);
  }

  public int getShelfType() {
    return this.ShelfType;
  }

  public Board setShelfType(int ShelfType) {
    this.ShelfType = ShelfType;
    setShelfTypeIsSet(true);
    return this;
  }

  public void unsetShelfType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHELFTYPE_ISSET_ID);
  }

  /** Returns true if field ShelfType is set (has been assigned a value) and false otherwise */
  public boolean isSetShelfType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHELFTYPE_ISSET_ID);
  }

  public void setShelfTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHELFTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BOARD_ID:
      if (value == null) {
        unsetBoardId();
      } else {
        setBoardId((java.lang.Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((java.lang.Integer)value);
      }
      break;

    case NE_ID:
      if (value == null) {
        unsetNeId();
      } else {
        setNeId((java.lang.Integer)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroupId();
      } else {
        setGroupId((java.lang.Integer)value);
      }
      break;

    case GROUP_NO:
      if (value == null) {
        unsetGroupNo();
      } else {
        setGroupNo((java.lang.Integer)value);
      }
      break;

    case GROUP_NAME:
      if (value == null) {
        unsetGroupName();
      } else {
        setGroupName((java.lang.String)value);
      }
      break;

    case BUREAU_ID:
      if (value == null) {
        unsetBureauId();
      } else {
        setBureauId((java.lang.Integer)value);
      }
      break;

    case BUREAU_NO:
      if (value == null) {
        unsetBureauNo();
      } else {
        setBureauNo((java.lang.Integer)value);
      }
      break;

    case BUREAU_NAME:
      if (value == null) {
        unsetBureauName();
      } else {
        setBureauName((java.lang.String)value);
      }
      break;

    case RACK_ID:
      if (value == null) {
        unsetRackId();
      } else {
        setRackId((java.lang.Integer)value);
      }
      break;

    case RACK_NO:
      if (value == null) {
        unsetRackNo();
      } else {
        setRackNo((java.lang.Integer)value);
      }
      break;

    case RACK_NAME:
      if (value == null) {
        unsetRackName();
      } else {
        setRackName((java.lang.String)value);
      }
      break;

    case SHELF_ID:
      if (value == null) {
        unsetShelfId();
      } else {
        setShelfId((java.lang.Integer)value);
      }
      break;

    case SHELF_NAME:
      if (value == null) {
        unsetShelfName();
      } else {
        setShelfName((java.lang.String)value);
      }
      break;

    case SLOT_ID:
      if (value == null) {
        unsetSlotId();
      } else {
        setSlotId((java.lang.Integer)value);
      }
      break;

    case SLOT_NO:
      if (value == null) {
        unsetSlotNo();
      } else {
        setSlotNo((java.lang.Integer)value);
      }
      break;

    case SLOT_ADDRESS:
      if (value == null) {
        unsetSlotAddress();
      } else {
        setSlotAddress((java.lang.Integer)value);
      }
      break;

    case SLOT_NAME:
      if (value == null) {
        unsetSlotName();
      } else {
        setSlotName((java.lang.String)value);
      }
      break;

    case BOARD_NO:
      if (value == null) {
        unsetBoardNo();
      } else {
        setBoardNo((java.lang.Integer)value);
      }
      break;

    case BOARD_TYPE:
      if (value == null) {
        unsetBoardType();
      } else {
        setBoardType((java.lang.Integer)value);
      }
      break;

    case BOARD_ALIAS:
      if (value == null) {
        unsetBoardAlias();
      } else {
        setBoardAlias((java.lang.String)value);
      }
      break;

    case BOARD_NAME:
      if (value == null) {
        unsetBoardName();
      } else {
        setBoardName((java.lang.String)value);
      }
      break;

    case BOARD_NAMEC:
      if (value == null) {
        unsetBoardNamec();
      } else {
        setBoardNamec((java.lang.String)value);
      }
      break;

    case SHELF_NO:
      if (value == null) {
        unsetShelfNo();
      } else {
        setShelfNo((java.lang.Integer)value);
      }
      break;

    case SHELF_TYPE:
      if (value == null) {
        unsetShelfType();
      } else {
        setShelfType((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BOARD_ID:
      return getBoardId();

    case PROJECT_ID:
      return getProjectId();

    case NE_ID:
      return getNeId();

    case GROUP_ID:
      return getGroupId();

    case GROUP_NO:
      return getGroupNo();

    case GROUP_NAME:
      return getGroupName();

    case BUREAU_ID:
      return getBureauId();

    case BUREAU_NO:
      return getBureauNo();

    case BUREAU_NAME:
      return getBureauName();

    case RACK_ID:
      return getRackId();

    case RACK_NO:
      return getRackNo();

    case RACK_NAME:
      return getRackName();

    case SHELF_ID:
      return getShelfId();

    case SHELF_NAME:
      return getShelfName();

    case SLOT_ID:
      return getSlotId();

    case SLOT_NO:
      return getSlotNo();

    case SLOT_ADDRESS:
      return getSlotAddress();

    case SLOT_NAME:
      return getSlotName();

    case BOARD_NO:
      return getBoardNo();

    case BOARD_TYPE:
      return getBoardType();

    case BOARD_ALIAS:
      return getBoardAlias();

    case BOARD_NAME:
      return getBoardName();

    case BOARD_NAMEC:
      return getBoardNamec();

    case SHELF_NO:
      return getShelfNo();

    case SHELF_TYPE:
      return getShelfType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BOARD_ID:
      return isSetBoardId();
    case PROJECT_ID:
      return isSetProjectId();
    case NE_ID:
      return isSetNeId();
    case GROUP_ID:
      return isSetGroupId();
    case GROUP_NO:
      return isSetGroupNo();
    case GROUP_NAME:
      return isSetGroupName();
    case BUREAU_ID:
      return isSetBureauId();
    case BUREAU_NO:
      return isSetBureauNo();
    case BUREAU_NAME:
      return isSetBureauName();
    case RACK_ID:
      return isSetRackId();
    case RACK_NO:
      return isSetRackNo();
    case RACK_NAME:
      return isSetRackName();
    case SHELF_ID:
      return isSetShelfId();
    case SHELF_NAME:
      return isSetShelfName();
    case SLOT_ID:
      return isSetSlotId();
    case SLOT_NO:
      return isSetSlotNo();
    case SLOT_ADDRESS:
      return isSetSlotAddress();
    case SLOT_NAME:
      return isSetSlotName();
    case BOARD_NO:
      return isSetBoardNo();
    case BOARD_TYPE:
      return isSetBoardType();
    case BOARD_ALIAS:
      return isSetBoardAlias();
    case BOARD_NAME:
      return isSetBoardName();
    case BOARD_NAMEC:
      return isSetBoardNamec();
    case SHELF_NO:
      return isSetShelfNo();
    case SHELF_TYPE:
      return isSetShelfType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Board)
      return this.equals((Board)that);
    return false;
  }

  public boolean equals(Board that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_BoardId = true;
    boolean that_present_BoardId = true;
    if (this_present_BoardId || that_present_BoardId) {
      if (!(this_present_BoardId && that_present_BoardId))
        return false;
      if (this.BoardId != that.BoardId)
        return false;
    }

    boolean this_present_ProjectId = true;
    boolean that_present_ProjectId = true;
    if (this_present_ProjectId || that_present_ProjectId) {
      if (!(this_present_ProjectId && that_present_ProjectId))
        return false;
      if (this.ProjectId != that.ProjectId)
        return false;
    }

    boolean this_present_NeId = true;
    boolean that_present_NeId = true;
    if (this_present_NeId || that_present_NeId) {
      if (!(this_present_NeId && that_present_NeId))
        return false;
      if (this.NeId != that.NeId)
        return false;
    }

    boolean this_present_GroupId = true;
    boolean that_present_GroupId = true;
    if (this_present_GroupId || that_present_GroupId) {
      if (!(this_present_GroupId && that_present_GroupId))
        return false;
      if (this.GroupId != that.GroupId)
        return false;
    }

    boolean this_present_GroupNo = true;
    boolean that_present_GroupNo = true;
    if (this_present_GroupNo || that_present_GroupNo) {
      if (!(this_present_GroupNo && that_present_GroupNo))
        return false;
      if (this.GroupNo != that.GroupNo)
        return false;
    }

    boolean this_present_GroupName = true && this.isSetGroupName();
    boolean that_present_GroupName = true && that.isSetGroupName();
    if (this_present_GroupName || that_present_GroupName) {
      if (!(this_present_GroupName && that_present_GroupName))
        return false;
      if (!this.GroupName.equals(that.GroupName))
        return false;
    }

    boolean this_present_BureauId = true;
    boolean that_present_BureauId = true;
    if (this_present_BureauId || that_present_BureauId) {
      if (!(this_present_BureauId && that_present_BureauId))
        return false;
      if (this.BureauId != that.BureauId)
        return false;
    }

    boolean this_present_BureauNo = true;
    boolean that_present_BureauNo = true;
    if (this_present_BureauNo || that_present_BureauNo) {
      if (!(this_present_BureauNo && that_present_BureauNo))
        return false;
      if (this.BureauNo != that.BureauNo)
        return false;
    }

    boolean this_present_BureauName = true && this.isSetBureauName();
    boolean that_present_BureauName = true && that.isSetBureauName();
    if (this_present_BureauName || that_present_BureauName) {
      if (!(this_present_BureauName && that_present_BureauName))
        return false;
      if (!this.BureauName.equals(that.BureauName))
        return false;
    }

    boolean this_present_RackId = true;
    boolean that_present_RackId = true;
    if (this_present_RackId || that_present_RackId) {
      if (!(this_present_RackId && that_present_RackId))
        return false;
      if (this.RackId != that.RackId)
        return false;
    }

    boolean this_present_RackNo = true;
    boolean that_present_RackNo = true;
    if (this_present_RackNo || that_present_RackNo) {
      if (!(this_present_RackNo && that_present_RackNo))
        return false;
      if (this.RackNo != that.RackNo)
        return false;
    }

    boolean this_present_RackName = true && this.isSetRackName();
    boolean that_present_RackName = true && that.isSetRackName();
    if (this_present_RackName || that_present_RackName) {
      if (!(this_present_RackName && that_present_RackName))
        return false;
      if (!this.RackName.equals(that.RackName))
        return false;
    }

    boolean this_present_ShelfId = true;
    boolean that_present_ShelfId = true;
    if (this_present_ShelfId || that_present_ShelfId) {
      if (!(this_present_ShelfId && that_present_ShelfId))
        return false;
      if (this.ShelfId != that.ShelfId)
        return false;
    }

    boolean this_present_ShelfName = true && this.isSetShelfName();
    boolean that_present_ShelfName = true && that.isSetShelfName();
    if (this_present_ShelfName || that_present_ShelfName) {
      if (!(this_present_ShelfName && that_present_ShelfName))
        return false;
      if (!this.ShelfName.equals(that.ShelfName))
        return false;
    }

    boolean this_present_SlotId = true;
    boolean that_present_SlotId = true;
    if (this_present_SlotId || that_present_SlotId) {
      if (!(this_present_SlotId && that_present_SlotId))
        return false;
      if (this.SlotId != that.SlotId)
        return false;
    }

    boolean this_present_SlotNo = true;
    boolean that_present_SlotNo = true;
    if (this_present_SlotNo || that_present_SlotNo) {
      if (!(this_present_SlotNo && that_present_SlotNo))
        return false;
      if (this.SlotNo != that.SlotNo)
        return false;
    }

    boolean this_present_SlotAddress = true;
    boolean that_present_SlotAddress = true;
    if (this_present_SlotAddress || that_present_SlotAddress) {
      if (!(this_present_SlotAddress && that_present_SlotAddress))
        return false;
      if (this.SlotAddress != that.SlotAddress)
        return false;
    }

    boolean this_present_SlotName = true && this.isSetSlotName();
    boolean that_present_SlotName = true && that.isSetSlotName();
    if (this_present_SlotName || that_present_SlotName) {
      if (!(this_present_SlotName && that_present_SlotName))
        return false;
      if (!this.SlotName.equals(that.SlotName))
        return false;
    }

    boolean this_present_BoardNo = true;
    boolean that_present_BoardNo = true;
    if (this_present_BoardNo || that_present_BoardNo) {
      if (!(this_present_BoardNo && that_present_BoardNo))
        return false;
      if (this.BoardNo != that.BoardNo)
        return false;
    }

    boolean this_present_BoardType = true;
    boolean that_present_BoardType = true;
    if (this_present_BoardType || that_present_BoardType) {
      if (!(this_present_BoardType && that_present_BoardType))
        return false;
      if (this.BoardType != that.BoardType)
        return false;
    }

    boolean this_present_BoardAlias = true && this.isSetBoardAlias();
    boolean that_present_BoardAlias = true && that.isSetBoardAlias();
    if (this_present_BoardAlias || that_present_BoardAlias) {
      if (!(this_present_BoardAlias && that_present_BoardAlias))
        return false;
      if (!this.BoardAlias.equals(that.BoardAlias))
        return false;
    }

    boolean this_present_BoardName = true && this.isSetBoardName();
    boolean that_present_BoardName = true && that.isSetBoardName();
    if (this_present_BoardName || that_present_BoardName) {
      if (!(this_present_BoardName && that_present_BoardName))
        return false;
      if (!this.BoardName.equals(that.BoardName))
        return false;
    }

    boolean this_present_BoardNamec = true && this.isSetBoardNamec();
    boolean that_present_BoardNamec = true && that.isSetBoardNamec();
    if (this_present_BoardNamec || that_present_BoardNamec) {
      if (!(this_present_BoardNamec && that_present_BoardNamec))
        return false;
      if (!this.BoardNamec.equals(that.BoardNamec))
        return false;
    }

    boolean this_present_ShelfNo = true;
    boolean that_present_ShelfNo = true;
    if (this_present_ShelfNo || that_present_ShelfNo) {
      if (!(this_present_ShelfNo && that_present_ShelfNo))
        return false;
      if (this.ShelfNo != that.ShelfNo)
        return false;
    }

    boolean this_present_ShelfType = true;
    boolean that_present_ShelfType = true;
    if (this_present_ShelfType || that_present_ShelfType) {
      if (!(this_present_ShelfType && that_present_ShelfType))
        return false;
      if (this.ShelfType != that.ShelfType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + BoardId;

    hashCode = hashCode * 8191 + ProjectId;

    hashCode = hashCode * 8191 + NeId;

    hashCode = hashCode * 8191 + GroupId;

    hashCode = hashCode * 8191 + GroupNo;

    hashCode = hashCode * 8191 + ((isSetGroupName()) ? 131071 : 524287);
    if (isSetGroupName())
      hashCode = hashCode * 8191 + GroupName.hashCode();

    hashCode = hashCode * 8191 + BureauId;

    hashCode = hashCode * 8191 + BureauNo;

    hashCode = hashCode * 8191 + ((isSetBureauName()) ? 131071 : 524287);
    if (isSetBureauName())
      hashCode = hashCode * 8191 + BureauName.hashCode();

    hashCode = hashCode * 8191 + RackId;

    hashCode = hashCode * 8191 + RackNo;

    hashCode = hashCode * 8191 + ((isSetRackName()) ? 131071 : 524287);
    if (isSetRackName())
      hashCode = hashCode * 8191 + RackName.hashCode();

    hashCode = hashCode * 8191 + ShelfId;

    hashCode = hashCode * 8191 + ((isSetShelfName()) ? 131071 : 524287);
    if (isSetShelfName())
      hashCode = hashCode * 8191 + ShelfName.hashCode();

    hashCode = hashCode * 8191 + SlotId;

    hashCode = hashCode * 8191 + SlotNo;

    hashCode = hashCode * 8191 + SlotAddress;

    hashCode = hashCode * 8191 + ((isSetSlotName()) ? 131071 : 524287);
    if (isSetSlotName())
      hashCode = hashCode * 8191 + SlotName.hashCode();

    hashCode = hashCode * 8191 + BoardNo;

    hashCode = hashCode * 8191 + BoardType;

    hashCode = hashCode * 8191 + ((isSetBoardAlias()) ? 131071 : 524287);
    if (isSetBoardAlias())
      hashCode = hashCode * 8191 + BoardAlias.hashCode();

    hashCode = hashCode * 8191 + ((isSetBoardName()) ? 131071 : 524287);
    if (isSetBoardName())
      hashCode = hashCode * 8191 + BoardName.hashCode();

    hashCode = hashCode * 8191 + ((isSetBoardNamec()) ? 131071 : 524287);
    if (isSetBoardNamec())
      hashCode = hashCode * 8191 + BoardNamec.hashCode();

    hashCode = hashCode * 8191 + ShelfNo;

    hashCode = hashCode * 8191 + ShelfType;

    return hashCode;
  }

  @Override
  public int compareTo(Board other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBoardId()).compareTo(other.isSetBoardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BoardId, other.BoardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ProjectId, other.ProjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNeId()).compareTo(other.isSetNeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NeId, other.NeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GroupId, other.GroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGroupNo()).compareTo(other.isSetGroupNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GroupNo, other.GroupNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGroupName()).compareTo(other.isSetGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GroupName, other.GroupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBureauId()).compareTo(other.isSetBureauId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBureauId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BureauId, other.BureauId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBureauNo()).compareTo(other.isSetBureauNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBureauNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BureauNo, other.BureauNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBureauName()).compareTo(other.isSetBureauName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBureauName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BureauName, other.BureauName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRackId()).compareTo(other.isSetRackId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRackId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RackId, other.RackId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRackNo()).compareTo(other.isSetRackNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRackNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RackNo, other.RackNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRackName()).compareTo(other.isSetRackName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRackName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RackName, other.RackName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShelfId()).compareTo(other.isSetShelfId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShelfId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ShelfId, other.ShelfId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShelfName()).compareTo(other.isSetShelfName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShelfName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ShelfName, other.ShelfName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSlotId()).compareTo(other.isSetSlotId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlotId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SlotId, other.SlotId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSlotNo()).compareTo(other.isSetSlotNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlotNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SlotNo, other.SlotNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSlotAddress()).compareTo(other.isSetSlotAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlotAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SlotAddress, other.SlotAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSlotName()).compareTo(other.isSetSlotName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlotName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SlotName, other.SlotName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBoardNo()).compareTo(other.isSetBoardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BoardNo, other.BoardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBoardType()).compareTo(other.isSetBoardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BoardType, other.BoardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBoardAlias()).compareTo(other.isSetBoardAlias());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoardAlias()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BoardAlias, other.BoardAlias);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBoardName()).compareTo(other.isSetBoardName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoardName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BoardName, other.BoardName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBoardNamec()).compareTo(other.isSetBoardNamec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoardNamec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BoardNamec, other.BoardNamec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShelfNo()).compareTo(other.isSetShelfNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShelfNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ShelfNo, other.ShelfNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShelfType()).compareTo(other.isSetShelfType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShelfType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ShelfType, other.ShelfType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Board(");
    boolean first = true;

    sb.append("BoardId:");
    sb.append(this.BoardId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ProjectId:");
    sb.append(this.ProjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NeId:");
    sb.append(this.NeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("GroupId:");
    sb.append(this.GroupId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("GroupNo:");
    sb.append(this.GroupNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("GroupName:");
    if (this.GroupName == null) {
      sb.append("null");
    } else {
      sb.append(this.GroupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BureauId:");
    sb.append(this.BureauId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("BureauNo:");
    sb.append(this.BureauNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("BureauName:");
    if (this.BureauName == null) {
      sb.append("null");
    } else {
      sb.append(this.BureauName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RackId:");
    sb.append(this.RackId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("RackNo:");
    sb.append(this.RackNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("RackName:");
    if (this.RackName == null) {
      sb.append("null");
    } else {
      sb.append(this.RackName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ShelfId:");
    sb.append(this.ShelfId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ShelfName:");
    if (this.ShelfName == null) {
      sb.append("null");
    } else {
      sb.append(this.ShelfName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SlotId:");
    sb.append(this.SlotId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SlotNo:");
    sb.append(this.SlotNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SlotAddress:");
    sb.append(this.SlotAddress);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SlotName:");
    if (this.SlotName == null) {
      sb.append("null");
    } else {
      sb.append(this.SlotName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BoardNo:");
    sb.append(this.BoardNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("BoardType:");
    sb.append(this.BoardType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("BoardAlias:");
    if (this.BoardAlias == null) {
      sb.append("null");
    } else {
      sb.append(this.BoardAlias);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BoardName:");
    if (this.BoardName == null) {
      sb.append("null");
    } else {
      sb.append(this.BoardName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BoardNamec:");
    if (this.BoardNamec == null) {
      sb.append("null");
    } else {
      sb.append(this.BoardNamec);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ShelfNo:");
    sb.append(this.ShelfNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ShelfType:");
    sb.append(this.ShelfType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BoardStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BoardStandardScheme getScheme() {
      return new BoardStandardScheme();
    }
  }

  private static class BoardStandardScheme extends org.apache.thrift.scheme.StandardScheme<Board> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Board struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.BoardId = iprot.readI32();
              struct.setBoardIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ProjectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.NeId = iprot.readI32();
              struct.setNeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.GroupId = iprot.readI32();
              struct.setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GROUP_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.GroupNo = iprot.readI32();
              struct.setGroupNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.GroupName = iprot.readString();
              struct.setGroupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BUREAU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.BureauId = iprot.readI32();
              struct.setBureauIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BUREAU_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.BureauNo = iprot.readI32();
              struct.setBureauNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BUREAU_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.BureauName = iprot.readString();
              struct.setBureauNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RACK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.RackId = iprot.readI32();
              struct.setRackIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RACK_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.RackNo = iprot.readI32();
              struct.setRackNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RACK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.RackName = iprot.readString();
              struct.setRackNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHELF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ShelfId = iprot.readI32();
              struct.setShelfIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SHELF_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ShelfName = iprot.readString();
              struct.setShelfNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SLOT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.SlotId = iprot.readI32();
              struct.setSlotIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SLOT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.SlotNo = iprot.readI32();
              struct.setSlotNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SLOT_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.SlotAddress = iprot.readI32();
              struct.setSlotAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SLOT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SlotName = iprot.readString();
              struct.setSlotNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // BOARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.BoardNo = iprot.readI32();
              struct.setBoardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BOARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.BoardType = iprot.readI32();
              struct.setBoardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // BOARD_ALIAS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.BoardAlias = iprot.readString();
              struct.setBoardAliasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // BOARD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.BoardName = iprot.readString();
              struct.setBoardNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // BOARD_NAMEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.BoardNamec = iprot.readString();
              struct.setBoardNamecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SHELF_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ShelfNo = iprot.readI32();
              struct.setShelfNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SHELF_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ShelfType = iprot.readI32();
              struct.setShelfTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Board struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOARD_ID_FIELD_DESC);
      oprot.writeI32(struct.BoardId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.ProjectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NE_ID_FIELD_DESC);
      oprot.writeI32(struct.NeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
      oprot.writeI32(struct.GroupId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_NO_FIELD_DESC);
      oprot.writeI32(struct.GroupNo);
      oprot.writeFieldEnd();
      if (struct.GroupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.GroupName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUREAU_ID_FIELD_DESC);
      oprot.writeI32(struct.BureauId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUREAU_NO_FIELD_DESC);
      oprot.writeI32(struct.BureauNo);
      oprot.writeFieldEnd();
      if (struct.BureauName != null) {
        oprot.writeFieldBegin(BUREAU_NAME_FIELD_DESC);
        oprot.writeString(struct.BureauName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RACK_ID_FIELD_DESC);
      oprot.writeI32(struct.RackId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RACK_NO_FIELD_DESC);
      oprot.writeI32(struct.RackNo);
      oprot.writeFieldEnd();
      if (struct.RackName != null) {
        oprot.writeFieldBegin(RACK_NAME_FIELD_DESC);
        oprot.writeString(struct.RackName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHELF_ID_FIELD_DESC);
      oprot.writeI32(struct.ShelfId);
      oprot.writeFieldEnd();
      if (struct.ShelfName != null) {
        oprot.writeFieldBegin(SHELF_NAME_FIELD_DESC);
        oprot.writeString(struct.ShelfName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SLOT_ID_FIELD_DESC);
      oprot.writeI32(struct.SlotId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SLOT_NO_FIELD_DESC);
      oprot.writeI32(struct.SlotNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SLOT_ADDRESS_FIELD_DESC);
      oprot.writeI32(struct.SlotAddress);
      oprot.writeFieldEnd();
      if (struct.SlotName != null) {
        oprot.writeFieldBegin(SLOT_NAME_FIELD_DESC);
        oprot.writeString(struct.SlotName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BOARD_NO_FIELD_DESC);
      oprot.writeI32(struct.BoardNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOARD_TYPE_FIELD_DESC);
      oprot.writeI32(struct.BoardType);
      oprot.writeFieldEnd();
      if (struct.BoardAlias != null) {
        oprot.writeFieldBegin(BOARD_ALIAS_FIELD_DESC);
        oprot.writeString(struct.BoardAlias);
        oprot.writeFieldEnd();
      }
      if (struct.BoardName != null) {
        oprot.writeFieldBegin(BOARD_NAME_FIELD_DESC);
        oprot.writeString(struct.BoardName);
        oprot.writeFieldEnd();
      }
      if (struct.BoardNamec != null) {
        oprot.writeFieldBegin(BOARD_NAMEC_FIELD_DESC);
        oprot.writeString(struct.BoardNamec);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHELF_NO_FIELD_DESC);
      oprot.writeI32(struct.ShelfNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHELF_TYPE_FIELD_DESC);
      oprot.writeI32(struct.ShelfType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BoardTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BoardTupleScheme getScheme() {
      return new BoardTupleScheme();
    }
  }

  private static class BoardTupleScheme extends org.apache.thrift.scheme.TupleScheme<Board> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Board struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBoardId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetNeId()) {
        optionals.set(2);
      }
      if (struct.isSetGroupId()) {
        optionals.set(3);
      }
      if (struct.isSetGroupNo()) {
        optionals.set(4);
      }
      if (struct.isSetGroupName()) {
        optionals.set(5);
      }
      if (struct.isSetBureauId()) {
        optionals.set(6);
      }
      if (struct.isSetBureauNo()) {
        optionals.set(7);
      }
      if (struct.isSetBureauName()) {
        optionals.set(8);
      }
      if (struct.isSetRackId()) {
        optionals.set(9);
      }
      if (struct.isSetRackNo()) {
        optionals.set(10);
      }
      if (struct.isSetRackName()) {
        optionals.set(11);
      }
      if (struct.isSetShelfId()) {
        optionals.set(12);
      }
      if (struct.isSetShelfName()) {
        optionals.set(13);
      }
      if (struct.isSetSlotId()) {
        optionals.set(14);
      }
      if (struct.isSetSlotNo()) {
        optionals.set(15);
      }
      if (struct.isSetSlotAddress()) {
        optionals.set(16);
      }
      if (struct.isSetSlotName()) {
        optionals.set(17);
      }
      if (struct.isSetBoardNo()) {
        optionals.set(18);
      }
      if (struct.isSetBoardType()) {
        optionals.set(19);
      }
      if (struct.isSetBoardAlias()) {
        optionals.set(20);
      }
      if (struct.isSetBoardName()) {
        optionals.set(21);
      }
      if (struct.isSetBoardNamec()) {
        optionals.set(22);
      }
      if (struct.isSetShelfNo()) {
        optionals.set(23);
      }
      if (struct.isSetShelfType()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetBoardId()) {
        oprot.writeI32(struct.BoardId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.ProjectId);
      }
      if (struct.isSetNeId()) {
        oprot.writeI32(struct.NeId);
      }
      if (struct.isSetGroupId()) {
        oprot.writeI32(struct.GroupId);
      }
      if (struct.isSetGroupNo()) {
        oprot.writeI32(struct.GroupNo);
      }
      if (struct.isSetGroupName()) {
        oprot.writeString(struct.GroupName);
      }
      if (struct.isSetBureauId()) {
        oprot.writeI32(struct.BureauId);
      }
      if (struct.isSetBureauNo()) {
        oprot.writeI32(struct.BureauNo);
      }
      if (struct.isSetBureauName()) {
        oprot.writeString(struct.BureauName);
      }
      if (struct.isSetRackId()) {
        oprot.writeI32(struct.RackId);
      }
      if (struct.isSetRackNo()) {
        oprot.writeI32(struct.RackNo);
      }
      if (struct.isSetRackName()) {
        oprot.writeString(struct.RackName);
      }
      if (struct.isSetShelfId()) {
        oprot.writeI32(struct.ShelfId);
      }
      if (struct.isSetShelfName()) {
        oprot.writeString(struct.ShelfName);
      }
      if (struct.isSetSlotId()) {
        oprot.writeI32(struct.SlotId);
      }
      if (struct.isSetSlotNo()) {
        oprot.writeI32(struct.SlotNo);
      }
      if (struct.isSetSlotAddress()) {
        oprot.writeI32(struct.SlotAddress);
      }
      if (struct.isSetSlotName()) {
        oprot.writeString(struct.SlotName);
      }
      if (struct.isSetBoardNo()) {
        oprot.writeI32(struct.BoardNo);
      }
      if (struct.isSetBoardType()) {
        oprot.writeI32(struct.BoardType);
      }
      if (struct.isSetBoardAlias()) {
        oprot.writeString(struct.BoardAlias);
      }
      if (struct.isSetBoardName()) {
        oprot.writeString(struct.BoardName);
      }
      if (struct.isSetBoardNamec()) {
        oprot.writeString(struct.BoardNamec);
      }
      if (struct.isSetShelfNo()) {
        oprot.writeI32(struct.ShelfNo);
      }
      if (struct.isSetShelfType()) {
        oprot.writeI32(struct.ShelfType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Board struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.BoardId = iprot.readI32();
        struct.setBoardIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ProjectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.NeId = iprot.readI32();
        struct.setNeIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.GroupId = iprot.readI32();
        struct.setGroupIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.GroupNo = iprot.readI32();
        struct.setGroupNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.GroupName = iprot.readString();
        struct.setGroupNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.BureauId = iprot.readI32();
        struct.setBureauIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.BureauNo = iprot.readI32();
        struct.setBureauNoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.BureauName = iprot.readString();
        struct.setBureauNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.RackId = iprot.readI32();
        struct.setRackIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.RackNo = iprot.readI32();
        struct.setRackNoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.RackName = iprot.readString();
        struct.setRackNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.ShelfId = iprot.readI32();
        struct.setShelfIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.ShelfName = iprot.readString();
        struct.setShelfNameIsSet(true);
      }
      if (incoming.get(14)) {
        struct.SlotId = iprot.readI32();
        struct.setSlotIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.SlotNo = iprot.readI32();
        struct.setSlotNoIsSet(true);
      }
      if (incoming.get(16)) {
        struct.SlotAddress = iprot.readI32();
        struct.setSlotAddressIsSet(true);
      }
      if (incoming.get(17)) {
        struct.SlotName = iprot.readString();
        struct.setSlotNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.BoardNo = iprot.readI32();
        struct.setBoardNoIsSet(true);
      }
      if (incoming.get(19)) {
        struct.BoardType = iprot.readI32();
        struct.setBoardTypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.BoardAlias = iprot.readString();
        struct.setBoardAliasIsSet(true);
      }
      if (incoming.get(21)) {
        struct.BoardName = iprot.readString();
        struct.setBoardNameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.BoardNamec = iprot.readString();
        struct.setBoardNamecIsSet(true);
      }
      if (incoming.get(23)) {
        struct.ShelfNo = iprot.readI32();
        struct.setShelfNoIsSet(true);
      }
      if (incoming.get(24)) {
        struct.ShelfType = iprot.readI32();
        struct.setShelfTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

