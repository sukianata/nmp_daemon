/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fiberhome.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-20")
public class Topology implements org.apache.thrift.TBase<Topology, Topology._Fields>, java.io.Serializable, Cloneable, Comparable<Topology> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Topology");

  private static final org.apache.thrift.protocol.TField LINES_FIELD_DESC = new org.apache.thrift.protocol.TField("Lines", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("Nodes", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TopologyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TopologyTupleSchemeFactory();

  public java.util.List<TopoLine> Lines; // required
  public java.util.List<TopoNode> Nodes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LINES((short)1, "Lines"),
    NODES((short)2, "Nodes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LINES
          return LINES;
        case 2: // NODES
          return NODES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LINES, new org.apache.thrift.meta_data.FieldMetaData("Lines", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TopoLine.class))));
    tmpMap.put(_Fields.NODES, new org.apache.thrift.meta_data.FieldMetaData("Nodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TopoNode.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Topology.class, metaDataMap);
  }

  public Topology() {
  }

  public Topology(
    java.util.List<TopoLine> Lines,
    java.util.List<TopoNode> Nodes)
  {
    this();
    this.Lines = Lines;
    this.Nodes = Nodes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Topology(Topology other) {
    if (other.isSetLines()) {
      java.util.List<TopoLine> __this__Lines = new java.util.ArrayList<TopoLine>(other.Lines.size());
      for (TopoLine other_element : other.Lines) {
        __this__Lines.add(new TopoLine(other_element));
      }
      this.Lines = __this__Lines;
    }
    if (other.isSetNodes()) {
      java.util.List<TopoNode> __this__Nodes = new java.util.ArrayList<TopoNode>(other.Nodes.size());
      for (TopoNode other_element : other.Nodes) {
        __this__Nodes.add(new TopoNode(other_element));
      }
      this.Nodes = __this__Nodes;
    }
  }

  public Topology deepCopy() {
    return new Topology(this);
  }

  @Override
  public void clear() {
    this.Lines = null;
    this.Nodes = null;
  }

  public int getLinesSize() {
    return (this.Lines == null) ? 0 : this.Lines.size();
  }

  public java.util.Iterator<TopoLine> getLinesIterator() {
    return (this.Lines == null) ? null : this.Lines.iterator();
  }

  public void addToLines(TopoLine elem) {
    if (this.Lines == null) {
      this.Lines = new java.util.ArrayList<TopoLine>();
    }
    this.Lines.add(elem);
  }

  public java.util.List<TopoLine> getLines() {
    return this.Lines;
  }

  public Topology setLines(java.util.List<TopoLine> Lines) {
    this.Lines = Lines;
    return this;
  }

  public void unsetLines() {
    this.Lines = null;
  }

  /** Returns true if field Lines is set (has been assigned a value) and false otherwise */
  public boolean isSetLines() {
    return this.Lines != null;
  }

  public void setLinesIsSet(boolean value) {
    if (!value) {
      this.Lines = null;
    }
  }

  public int getNodesSize() {
    return (this.Nodes == null) ? 0 : this.Nodes.size();
  }

  public java.util.Iterator<TopoNode> getNodesIterator() {
    return (this.Nodes == null) ? null : this.Nodes.iterator();
  }

  public void addToNodes(TopoNode elem) {
    if (this.Nodes == null) {
      this.Nodes = new java.util.ArrayList<TopoNode>();
    }
    this.Nodes.add(elem);
  }

  public java.util.List<TopoNode> getNodes() {
    return this.Nodes;
  }

  public Topology setNodes(java.util.List<TopoNode> Nodes) {
    this.Nodes = Nodes;
    return this;
  }

  public void unsetNodes() {
    this.Nodes = null;
  }

  /** Returns true if field Nodes is set (has been assigned a value) and false otherwise */
  public boolean isSetNodes() {
    return this.Nodes != null;
  }

  public void setNodesIsSet(boolean value) {
    if (!value) {
      this.Nodes = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case LINES:
      if (value == null) {
        unsetLines();
      } else {
        setLines((java.util.List<TopoLine>)value);
      }
      break;

    case NODES:
      if (value == null) {
        unsetNodes();
      } else {
        setNodes((java.util.List<TopoNode>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LINES:
      return getLines();

    case NODES:
      return getNodes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LINES:
      return isSetLines();
    case NODES:
      return isSetNodes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Topology)
      return this.equals((Topology)that);
    return false;
  }

  public boolean equals(Topology that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Lines = true && this.isSetLines();
    boolean that_present_Lines = true && that.isSetLines();
    if (this_present_Lines || that_present_Lines) {
      if (!(this_present_Lines && that_present_Lines))
        return false;
      if (!this.Lines.equals(that.Lines))
        return false;
    }

    boolean this_present_Nodes = true && this.isSetNodes();
    boolean that_present_Nodes = true && that.isSetNodes();
    if (this_present_Nodes || that_present_Nodes) {
      if (!(this_present_Nodes && that_present_Nodes))
        return false;
      if (!this.Nodes.equals(that.Nodes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLines()) ? 131071 : 524287);
    if (isSetLines())
      hashCode = hashCode * 8191 + Lines.hashCode();

    hashCode = hashCode * 8191 + ((isSetNodes()) ? 131071 : 524287);
    if (isSetNodes())
      hashCode = hashCode * 8191 + Nodes.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Topology other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetLines()).compareTo(other.isSetLines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Lines, other.Lines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodes()).compareTo(other.isSetNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Nodes, other.Nodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Topology(");
    boolean first = true;

    sb.append("Lines:");
    if (this.Lines == null) {
      sb.append("null");
    } else {
      sb.append(this.Lines);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Nodes:");
    if (this.Nodes == null) {
      sb.append("null");
    } else {
      sb.append(this.Nodes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopologyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopologyStandardScheme getScheme() {
      return new TopologyStandardScheme();
    }
  }

  private static class TopologyStandardScheme extends org.apache.thrift.scheme.StandardScheme<Topology> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Topology struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LINES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.Lines = new java.util.ArrayList<TopoLine>(_list0.size);
                TopoLine _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TopoLine();
                  _elem1.read(iprot);
                  struct.Lines.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setLinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.Nodes = new java.util.ArrayList<TopoNode>(_list3.size);
                TopoNode _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new TopoNode();
                  _elem4.read(iprot);
                  struct.Nodes.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Topology struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Lines != null) {
        oprot.writeFieldBegin(LINES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Lines.size()));
          for (TopoLine _iter6 : struct.Lines)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Nodes != null) {
        oprot.writeFieldBegin(NODES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Nodes.size()));
          for (TopoNode _iter7 : struct.Nodes)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopologyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopologyTupleScheme getScheme() {
      return new TopologyTupleScheme();
    }
  }

  private static class TopologyTupleScheme extends org.apache.thrift.scheme.TupleScheme<Topology> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Topology struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLines()) {
        optionals.set(0);
      }
      if (struct.isSetNodes()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLines()) {
        {
          oprot.writeI32(struct.Lines.size());
          for (TopoLine _iter8 : struct.Lines)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetNodes()) {
        {
          oprot.writeI32(struct.Nodes.size());
          for (TopoNode _iter9 : struct.Nodes)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Topology struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Lines = new java.util.ArrayList<TopoLine>(_list10.size);
          TopoLine _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new TopoLine();
            _elem11.read(iprot);
            struct.Lines.add(_elem11);
          }
        }
        struct.setLinesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Nodes = new java.util.ArrayList<TopoNode>(_list13.size);
          TopoNode _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new TopoNode();
            _elem14.read(iprot);
            struct.Nodes.add(_elem14);
          }
        }
        struct.setNodesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

